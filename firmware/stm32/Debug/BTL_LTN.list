
BTL_LTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085c4  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005a88  080087b4  080087b4  000097b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e23c  0800e23c  00010090  2**0
                  CONTENTS
  4 .ARM          00000000  0800e23c  0800e23c  00010090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e23c  0800e23c  00010090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e23c  0800e23c  0000f23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e240  0800e240  0000f240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0800e244  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d0c  20000090  0800e2d4  00010090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004d9c  0800e2d4  00010d9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c7f  00000000  00000000  000100b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003db0  00000000  00000000  00026d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c0  00000000  00000000  0002aae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fff  00000000  00000000  0002bfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ec2b  00000000  00000000  0002cfa7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bed0  00000000  00000000  0004bbd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af9a4  00000000  00000000  00067aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117446  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005758  00000000  00000000  0011748c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0011cbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000090 	.word	0x20000090
 800020c:	00000000 	.word	0x00000000
 8000210:	0800879c 	.word	0x0800879c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000094 	.word	0x20000094
 800022c:	0800879c 	.word	0x0800879c

08000230 <App_Main>:
static void Task_DHT_Get_Data(void *pvParameters);

static void UART_Frame_TX(UART_frame_t frame_data, uint8_t TX_data[], uint8_t TX_count);

void App_Main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af02      	add	r7, sp, #8
    Delay_Init(&htim3, &htim2);
 8000236:	495b      	ldr	r1, [pc, #364]	@ (80003a4 <App_Main+0x174>)
 8000238:	485b      	ldr	r0, [pc, #364]	@ (80003a8 <App_Main+0x178>)
 800023a:	f006 fc27 	bl	8006a8c <Delay_Init>
    UART_Config(&huart1, 128, 64, 0);
 800023e:	2300      	movs	r3, #0
 8000240:	2240      	movs	r2, #64	@ 0x40
 8000242:	2180      	movs	r1, #128	@ 0x80
 8000244:	4859      	ldr	r0, [pc, #356]	@ (80003ac <App_Main+0x17c>)
 8000246:	f007 ff1f 	bl	8008088 <UART_Config>

    DHT_Init(GPIOB, GPIO_PIN_0, &htim3);
 800024a:	4a57      	ldr	r2, [pc, #348]	@ (80003a8 <App_Main+0x178>)
 800024c:	2101      	movs	r1, #1
 800024e:	4858      	ldr	r0, [pc, #352]	@ (80003b0 <App_Main+0x180>)
 8000250:	f006 fd60 	bl	8006d14 <DHT_Init>
    PIR_AM312_Init(GPIOB, GPIO_PIN_1);
 8000254:	2102      	movs	r1, #2
 8000256:	4856      	ldr	r0, [pc, #344]	@ (80003b0 <App_Main+0x180>)
 8000258:	f006 fe70 	bl	8006f3c <PIR_AM312_Init>
    LM393_Init(GPIOB, GPIO_PIN_2);
 800025c:	2104      	movs	r1, #4
 800025e:	4854      	ldr	r0, [pc, #336]	@ (80003b0 <App_Main+0x180>)
 8000260:	f006 fe44 	bl	8006eec <LM393_Init>

    ILI9341_Init();
 8000264:	f007 faa4 	bl	80077b0 <ILI9341_Init>
    ILI9341_SetRotation(SCREEN_HORIZONTAL_1);
 8000268:	2001      	movs	r0, #1
 800026a:	f007 fbab 	bl	80079c4 <ILI9341_SetRotation>

    ILI9341_FillScreen(WHITE);
 800026e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000272:	f007 fc91 	bl	8007b98 <ILI9341_FillScreen>
    ILI9341_Draw_LVGL(40, 50, 48, 48, HUMID_ICON);
 8000276:	4b4f      	ldr	r3, [pc, #316]	@ (80003b4 <App_Main+0x184>)
 8000278:	9300      	str	r3, [sp, #0]
 800027a:	2330      	movs	r3, #48	@ 0x30
 800027c:	2230      	movs	r2, #48	@ 0x30
 800027e:	2132      	movs	r1, #50	@ 0x32
 8000280:	2028      	movs	r0, #40	@ 0x28
 8000282:	f007 fdc5 	bl	8007e10 <ILI9341_Draw_LVGL>
    ILI9341_Draw_LVGL(190, 50, 48, 48, TEMP_ICON);
 8000286:	4b4c      	ldr	r3, [pc, #304]	@ (80003b8 <App_Main+0x188>)
 8000288:	9300      	str	r3, [sp, #0]
 800028a:	2330      	movs	r3, #48	@ 0x30
 800028c:	2230      	movs	r2, #48	@ 0x30
 800028e:	2132      	movs	r1, #50	@ 0x32
 8000290:	20be      	movs	r0, #190	@ 0xbe
 8000292:	f007 fdbd 	bl	8007e10 <ILI9341_Draw_LVGL>
    ILI9341_Draw_LVGL(40, 140, 48, 48, YES_PEOPLE_ICON);
 8000296:	4b49      	ldr	r3, [pc, #292]	@ (80003bc <App_Main+0x18c>)
 8000298:	9300      	str	r3, [sp, #0]
 800029a:	2330      	movs	r3, #48	@ 0x30
 800029c:	2230      	movs	r2, #48	@ 0x30
 800029e:	218c      	movs	r1, #140	@ 0x8c
 80002a0:	2028      	movs	r0, #40	@ 0x28
 80002a2:	f007 fdb5 	bl	8007e10 <ILI9341_Draw_LVGL>
    ILI9341_Draw_LVGL(190, 140, 48, 48, SUN_ICON);
 80002a6:	4b46      	ldr	r3, [pc, #280]	@ (80003c0 <App_Main+0x190>)
 80002a8:	9300      	str	r3, [sp, #0]
 80002aa:	2330      	movs	r3, #48	@ 0x30
 80002ac:	2230      	movs	r2, #48	@ 0x30
 80002ae:	218c      	movs	r1, #140	@ 0x8c
 80002b0:	20be      	movs	r0, #190	@ 0xbe
 80002b2:	f007 fdad 	bl	8007e10 <ILI9341_Draw_LVGL>

    queue_relay_light_data      = xQueueCreate(10, sizeof(relay_light_data_t));
 80002b6:	2200      	movs	r2, #0
 80002b8:	2101      	movs	r1, #1
 80002ba:	200a      	movs	r0, #10
 80002bc:	f004 fbd6 	bl	8004a6c <xQueueGenericCreate>
 80002c0:	4603      	mov	r3, r0
 80002c2:	4a40      	ldr	r2, [pc, #256]	@ (80003c4 <App_Main+0x194>)
 80002c4:	6013      	str	r3, [r2, #0]
    queue_UART_RX_data          = xQueueCreate(16, sizeof(UART_frame_t));
 80002c6:	2200      	movs	r2, #0
 80002c8:	2101      	movs	r1, #1
 80002ca:	2010      	movs	r0, #16
 80002cc:	f004 fbce 	bl	8004a6c <xQueueGenericCreate>
 80002d0:	4603      	mov	r3, r0
 80002d2:	4a3d      	ldr	r2, [pc, #244]	@ (80003c8 <App_Main+0x198>)
 80002d4:	6013      	str	r3, [r2, #0]
    queue_DHT_data              = xQueueCreate(10, sizeof(DHT_data_t));
 80002d6:	2200      	movs	r2, #0
 80002d8:	2105      	movs	r1, #5
 80002da:	200a      	movs	r0, #10
 80002dc:	f004 fbc6 	bl	8004a6c <xQueueGenericCreate>
 80002e0:	4603      	mov	r3, r0
 80002e2:	4a3a      	ldr	r2, [pc, #232]	@ (80003cc <App_Main+0x19c>)
 80002e4:	6013      	str	r3, [r2, #0]
    queue_relay_humid_fan_data  = xQueueCreate(10, sizeof(relay_humid_fan_data_t));
 80002e6:	2200      	movs	r2, #0
 80002e8:	2101      	movs	r1, #1
 80002ea:	200a      	movs	r0, #10
 80002ec:	f004 fbbe 	bl	8004a6c <xQueueGenericCreate>
 80002f0:	4603      	mov	r3, r0
 80002f2:	4a37      	ldr	r2, [pc, #220]	@ (80003d0 <App_Main+0x1a0>)
 80002f4:	6013      	str	r3, [r2, #0]

    queue_UART_TX_state         = xQueueCreate(32, sizeof(UART_TX_state_t));
 80002f6:	2200      	movs	r2, #0
 80002f8:	2101      	movs	r1, #1
 80002fa:	2020      	movs	r0, #32
 80002fc:	f004 fbb6 	bl	8004a6c <xQueueGenericCreate>
 8000300:	4603      	mov	r3, r0
 8000302:	4a34      	ldr	r2, [pc, #208]	@ (80003d4 <App_Main+0x1a4>)
 8000304:	6013      	str	r3, [r2, #0]
    queue_TFT_state             = xQueueCreate(10, sizeof(TFT_state_t));
 8000306:	2200      	movs	r2, #0
 8000308:	2101      	movs	r1, #1
 800030a:	200a      	movs	r0, #10
 800030c:	f004 fbae 	bl	8004a6c <xQueueGenericCreate>
 8000310:	4603      	mov	r3, r0
 8000312:	4a31      	ldr	r2, [pc, #196]	@ (80003d8 <App_Main+0x1a8>)
 8000314:	6013      	str	r3, [r2, #0]

    xTaskCreate(Task_Relay_Light, "Task_Relay_Light", 256, NULL, 7, &Task_Relay_Light_Handle);
 8000316:	4b31      	ldr	r3, [pc, #196]	@ (80003dc <App_Main+0x1ac>)
 8000318:	9301      	str	r3, [sp, #4]
 800031a:	2307      	movs	r3, #7
 800031c:	9300      	str	r3, [sp, #0]
 800031e:	2300      	movs	r3, #0
 8000320:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000324:	492e      	ldr	r1, [pc, #184]	@ (80003e0 <App_Main+0x1b0>)
 8000326:	482f      	ldr	r0, [pc, #188]	@ (80003e4 <App_Main+0x1b4>)
 8000328:	f004 ffa1 	bl	800526e <xTaskCreate>
    xTaskCreate(Task_UART_RX, "Task_UART_RX", 256, NULL, 6, &Task_UART_RX_Handle);
 800032c:	4b2e      	ldr	r3, [pc, #184]	@ (80003e8 <App_Main+0x1b8>)
 800032e:	9301      	str	r3, [sp, #4]
 8000330:	2306      	movs	r3, #6
 8000332:	9300      	str	r3, [sp, #0]
 8000334:	2300      	movs	r3, #0
 8000336:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800033a:	492c      	ldr	r1, [pc, #176]	@ (80003ec <App_Main+0x1bc>)
 800033c:	482c      	ldr	r0, [pc, #176]	@ (80003f0 <App_Main+0x1c0>)
 800033e:	f004 ff96 	bl	800526e <xTaskCreate>
    xTaskCreate(Task_UART_TX, "Task_UART_TX", 512, NULL, 5, &Task_UART_TX_Handle);
 8000342:	4b2c      	ldr	r3, [pc, #176]	@ (80003f4 <App_Main+0x1c4>)
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2305      	movs	r3, #5
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	2300      	movs	r3, #0
 800034c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000350:	4929      	ldr	r1, [pc, #164]	@ (80003f8 <App_Main+0x1c8>)
 8000352:	482a      	ldr	r0, [pc, #168]	@ (80003fc <App_Main+0x1cc>)
 8000354:	f004 ff8b 	bl	800526e <xTaskCreate>
    xTaskCreate(Task_TFT_Display, "Task_TFT_Display", 256, NULL, 4, &Task_TFT_Display_Handle);
 8000358:	4b29      	ldr	r3, [pc, #164]	@ (8000400 <App_Main+0x1d0>)
 800035a:	9301      	str	r3, [sp, #4]
 800035c:	2304      	movs	r3, #4
 800035e:	9300      	str	r3, [sp, #0]
 8000360:	2300      	movs	r3, #0
 8000362:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000366:	4927      	ldr	r1, [pc, #156]	@ (8000404 <App_Main+0x1d4>)
 8000368:	4827      	ldr	r0, [pc, #156]	@ (8000408 <App_Main+0x1d8>)
 800036a:	f004 ff80 	bl	800526e <xTaskCreate>
    xTaskCreate(Task_Relay_Humid_Fan, "Task_Relay_Humid_Fan", 256, NULL,3, &Task_Relay_Humid_Fan_Handle);
 800036e:	4b27      	ldr	r3, [pc, #156]	@ (800040c <App_Main+0x1dc>)
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	2303      	movs	r3, #3
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	2300      	movs	r3, #0
 8000378:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800037c:	4924      	ldr	r1, [pc, #144]	@ (8000410 <App_Main+0x1e0>)
 800037e:	4825      	ldr	r0, [pc, #148]	@ (8000414 <App_Main+0x1e4>)
 8000380:	f004 ff75 	bl	800526e <xTaskCreate>
    xTaskCreate(Task_DHT_Get_Data, "Task_DHT_Get_Data", 256, NULL, 2, &Task_DHT_Get_Data_Handle);
 8000384:	4b24      	ldr	r3, [pc, #144]	@ (8000418 <App_Main+0x1e8>)
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	2302      	movs	r3, #2
 800038a:	9300      	str	r3, [sp, #0]
 800038c:	2300      	movs	r3, #0
 800038e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000392:	4922      	ldr	r1, [pc, #136]	@ (800041c <App_Main+0x1ec>)
 8000394:	4822      	ldr	r0, [pc, #136]	@ (8000420 <App_Main+0x1f0>)
 8000396:	f004 ff6a 	bl	800526e <xTaskCreate>

    vTaskStartScheduler();
 800039a:	f005 f8f5 	bl	8005588 <vTaskStartScheduler>

    while (1)
 800039e:	bf00      	nop
 80003a0:	e7fd      	b.n	800039e <App_Main+0x16e>
 80003a2:	bf00      	nop
 80003a4:	20000180 	.word	0x20000180
 80003a8:	200001c8 	.word	0x200001c8
 80003ac:	20000210 	.word	0x20000210
 80003b0:	40010c00 	.word	0x40010c00
 80003b4:	0800ac3c 	.word	0x0800ac3c
 80003b8:	08009a3c 	.word	0x08009a3c
 80003bc:	0800be3c 	.word	0x0800be3c
 80003c0:	0800d03c 	.word	0x0800d03c
 80003c4:	200000b0 	.word	0x200000b0
 80003c8:	200000b4 	.word	0x200000b4
 80003cc:	200000b8 	.word	0x200000b8
 80003d0:	200000bc 	.word	0x200000bc
 80003d4:	200000c0 	.word	0x200000c0
 80003d8:	200000c4 	.word	0x200000c4
 80003dc:	200000c8 	.word	0x200000c8
 80003e0:	080087b4 	.word	0x080087b4
 80003e4:	08000425 	.word	0x08000425
 80003e8:	200000cc 	.word	0x200000cc
 80003ec:	080087c8 	.word	0x080087c8
 80003f0:	08000869 	.word	0x08000869
 80003f4:	200000d0 	.word	0x200000d0
 80003f8:	080087d8 	.word	0x080087d8
 80003fc:	080009b5 	.word	0x080009b5
 8000400:	200000d4 	.word	0x200000d4
 8000404:	080087e8 	.word	0x080087e8
 8000408:	08000bad 	.word	0x08000bad
 800040c:	200000d8 	.word	0x200000d8
 8000410:	080087fc 	.word	0x080087fc
 8000414:	08000d49 	.word	0x08000d49
 8000418:	200000dc 	.word	0x200000dc
 800041c:	08008814 	.word	0x08008814
 8000420:	080010cd 	.word	0x080010cd

08000424 <Task_Relay_Light>:
        ;
    }
}

static void Task_Relay_Light(void *pvParameters)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
    while (1)
    {
        ulTaskNotifyTake(pdFALSE,portMAX_DELAY);
 800042c:	f04f 32ff 	mov.w	r2, #4294967295
 8000430:	2100      	movs	r1, #0
 8000432:	2000      	movs	r0, #0
 8000434:	f005 fdac 	bl	8005f90 <ulTaskGenericNotifyTake>

        UART_TX_state_t    UART_TX_state_1_give     = UART_TX_IDLE;
 8000438:	2310      	movs	r3, #16
 800043a:	73fb      	strb	r3, [r7, #15]
        UART_TX_state_t    UART_TX_state_2_give     = UART_TX_IDLE;
 800043c:	2310      	movs	r3, #16
 800043e:	73bb      	strb	r3, [r7, #14]
        UART_TX_state_t    UART_TX_state_auto_give  = UART_TX_IDLE;
 8000440:	2310      	movs	r3, #16
 8000442:	737b      	strb	r3, [r7, #13]

        relay_light_data_t relay_light_data_take = RELAY_LIGHT_DATA_NULL;
 8000444:	230b      	movs	r3, #11
 8000446:	733b      	strb	r3, [r7, #12]
        xQueueReceive(queue_relay_light_data, &relay_light_data_take, 0);
 8000448:	4ba4      	ldr	r3, [pc, #656]	@ (80006dc <Task_Relay_Light+0x2b8>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f107 010c 	add.w	r1, r7, #12
 8000450:	2200      	movs	r2, #0
 8000452:	4618      	mov	r0, r3
 8000454:	f004 fc78 	bl	8004d48 <xQueueReceive>

        switch (relay_light_auto_state)
 8000458:	4ba1      	ldr	r3, [pc, #644]	@ (80006e0 <Task_Relay_Light+0x2bc>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2b04      	cmp	r3, #4
 800045e:	d07d      	beq.n	800055c <Task_Relay_Light+0x138>
 8000460:	2b04      	cmp	r3, #4
 8000462:	f300 8082 	bgt.w	800056a <Task_Relay_Light+0x146>
 8000466:	2b00      	cmp	r3, #0
 8000468:	d002      	beq.n	8000470 <Task_Relay_Light+0x4c>
 800046a:	2b01      	cmp	r3, #1
 800046c:	d039      	beq.n	80004e2 <Task_Relay_Light+0xbe>
            {
                relay_light_auto_state = RELAY_LED_OFF;
            }
            break;
        default:
            break;
 800046e:	e07c      	b.n	800056a <Task_Relay_Light+0x146>
            if (relay_light_data_take == PIR_ON)
 8000470:	7b3b      	ldrb	r3, [r7, #12]
 8000472:	2b06      	cmp	r3, #6
 8000474:	d11e      	bne.n	80004b4 <Task_Relay_Light+0x90>
                if (lm393_get_data() == 1)
 8000476:	f006 fd4d 	bl	8006f14 <lm393_get_data>
 800047a:	4603      	mov	r3, r0
 800047c:	2b01      	cmp	r3, #1
 800047e:	d076      	beq.n	800056e <Task_Relay_Light+0x14a>
                relay_light_auto_state = RELAY_LED_ON_TIMER;
 8000480:	4b97      	ldr	r3, [pc, #604]	@ (80006e0 <Task_Relay_Light+0x2bc>)
 8000482:	2201      	movs	r2, #1
 8000484:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_1_PORT, RELAY_1_PIN, GPIO_PIN_RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	2110      	movs	r1, #16
 800048a:	4896      	ldr	r0, [pc, #600]	@ (80006e4 <Task_Relay_Light+0x2c0>)
 800048c:	f002 f815 	bl	80024ba <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(RELAY_2_PORT, RELAY_2_PIN, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2120      	movs	r1, #32
 8000494:	4893      	ldr	r0, [pc, #588]	@ (80006e4 <Task_Relay_Light+0x2c0>)
 8000496:	f002 f810 	bl	80024ba <HAL_GPIO_WritePin>
                UART_TX_state_1_give = UART_TX_RELAY_1_ON;
 800049a:	2300      	movs	r3, #0
 800049c:	73fb      	strb	r3, [r7, #15]
                UART_TX_state_2_give = UART_TX_RELAY_2_ON;
 800049e:	2302      	movs	r3, #2
 80004a0:	73bb      	strb	r3, [r7, #14]
                __HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 80004a2:	4b91      	ldr	r3, [pc, #580]	@ (80006e8 <Task_Relay_Light+0x2c4>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f06f 0201 	mvn.w	r2, #1
 80004aa:	611a      	str	r2, [r3, #16]
                HAL_TIM_Base_Start_IT(&htim1);
 80004ac:	488e      	ldr	r0, [pc, #568]	@ (80006e8 <Task_Relay_Light+0x2c4>)
 80004ae:	f003 f81b 	bl	80034e8 <HAL_TIM_Base_Start_IT>
            break;
 80004b2:	e05e      	b.n	8000572 <Task_Relay_Light+0x14e>
            else if ((relay_light_data_take == RELAY_LIGHT_BUTTON_5_HAND) || 
 80004b4:	7b3b      	ldrb	r3, [r7, #12]
 80004b6:	2b05      	cmp	r3, #5
 80004b8:	d005      	beq.n	80004c6 <Task_Relay_Light+0xa2>
                    (relay_light_data_take == BUTTON_1_PRESSED) || 
 80004ba:	7b3b      	ldrb	r3, [r7, #12]
            else if ((relay_light_data_take == RELAY_LIGHT_BUTTON_5_HAND) || 
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d002      	beq.n	80004c6 <Task_Relay_Light+0xa2>
                    (relay_light_data_take == BUTTON_2_PRESSED))
 80004c0:	7b3b      	ldrb	r3, [r7, #12]
                    (relay_light_data_take == BUTTON_1_PRESSED) || 
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d155      	bne.n	8000572 <Task_Relay_Light+0x14e>
                relay_light_auto_state = RELAY_LED_HAND;
 80004c6:	4b86      	ldr	r3, [pc, #536]	@ (80006e0 <Task_Relay_Light+0x2bc>)
 80004c8:	2204      	movs	r2, #4
 80004ca:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_1_PORT, RELAY_1_PIN, GPIO_PIN_SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2110      	movs	r1, #16
 80004d0:	4884      	ldr	r0, [pc, #528]	@ (80006e4 <Task_Relay_Light+0x2c0>)
 80004d2:	f001 fff2 	bl	80024ba <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(RELAY_2_PORT, RELAY_2_PIN, GPIO_PIN_SET);
 80004d6:	2201      	movs	r2, #1
 80004d8:	2120      	movs	r1, #32
 80004da:	4882      	ldr	r0, [pc, #520]	@ (80006e4 <Task_Relay_Light+0x2c0>)
 80004dc:	f001 ffed 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 80004e0:	e047      	b.n	8000572 <Task_Relay_Light+0x14e>
            if (relay_light_data_take == TIMER_GO_OFF && pir_am312_get_data() == 0)
 80004e2:	7b3b      	ldrb	r3, [r7, #12]
 80004e4:	2b0a      	cmp	r3, #10
 80004e6:	d116      	bne.n	8000516 <Task_Relay_Light+0xf2>
 80004e8:	f006 fd3c 	bl	8006f64 <pir_am312_get_data>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d111      	bne.n	8000516 <Task_Relay_Light+0xf2>
                relay_light_auto_state = RELAY_LED_OFF;
 80004f2:	4b7b      	ldr	r3, [pc, #492]	@ (80006e0 <Task_Relay_Light+0x2bc>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_1_PORT, RELAY_1_PIN, GPIO_PIN_SET);
 80004f8:	2201      	movs	r2, #1
 80004fa:	2110      	movs	r1, #16
 80004fc:	4879      	ldr	r0, [pc, #484]	@ (80006e4 <Task_Relay_Light+0x2c0>)
 80004fe:	f001 ffdc 	bl	80024ba <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(RELAY_2_PORT, RELAY_2_PIN, GPIO_PIN_SET);
 8000502:	2201      	movs	r2, #1
 8000504:	2120      	movs	r1, #32
 8000506:	4877      	ldr	r0, [pc, #476]	@ (80006e4 <Task_Relay_Light+0x2c0>)
 8000508:	f001 ffd7 	bl	80024ba <HAL_GPIO_WritePin>
                UART_TX_state_1_give = UART_TX_RELAY_1_OFF;
 800050c:	2301      	movs	r3, #1
 800050e:	73fb      	strb	r3, [r7, #15]
                UART_TX_state_2_give = UART_TX_RELAY_2_OFF;
 8000510:	2303      	movs	r3, #3
 8000512:	73bb      	strb	r3, [r7, #14]
            break;
 8000514:	e02f      	b.n	8000576 <Task_Relay_Light+0x152>
            else if (relay_light_data_take == TIMER_GO_OFF)
 8000516:	7b3b      	ldrb	r3, [r7, #12]
 8000518:	2b0a      	cmp	r3, #10
 800051a:	d108      	bne.n	800052e <Task_Relay_Light+0x10a>
                __HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 800051c:	4b72      	ldr	r3, [pc, #456]	@ (80006e8 <Task_Relay_Light+0x2c4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f06f 0201 	mvn.w	r2, #1
 8000524:	611a      	str	r2, [r3, #16]
                HAL_TIM_Base_Start_IT(&htim1);
 8000526:	4870      	ldr	r0, [pc, #448]	@ (80006e8 <Task_Relay_Light+0x2c4>)
 8000528:	f002 ffde 	bl	80034e8 <HAL_TIM_Base_Start_IT>
            break;
 800052c:	e023      	b.n	8000576 <Task_Relay_Light+0x152>
            else if ((relay_light_data_take == RELAY_LIGHT_BUTTON_5_HAND) || 
 800052e:	7b3b      	ldrb	r3, [r7, #12]
 8000530:	2b05      	cmp	r3, #5
 8000532:	d005      	beq.n	8000540 <Task_Relay_Light+0x11c>
                    (relay_light_data_take == BUTTON_1_PRESSED) || 
 8000534:	7b3b      	ldrb	r3, [r7, #12]
            else if ((relay_light_data_take == RELAY_LIGHT_BUTTON_5_HAND) || 
 8000536:	2b00      	cmp	r3, #0
 8000538:	d002      	beq.n	8000540 <Task_Relay_Light+0x11c>
                    (relay_light_data_take == BUTTON_2_PRESSED))
 800053a:	7b3b      	ldrb	r3, [r7, #12]
                    (relay_light_data_take == BUTTON_1_PRESSED) || 
 800053c:	2b01      	cmp	r3, #1
 800053e:	d11a      	bne.n	8000576 <Task_Relay_Light+0x152>
                relay_light_auto_state = RELAY_LED_HAND;
 8000540:	4b67      	ldr	r3, [pc, #412]	@ (80006e0 <Task_Relay_Light+0x2bc>)
 8000542:	2204      	movs	r2, #4
 8000544:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_1_PORT, RELAY_1_PIN, GPIO_PIN_SET);
 8000546:	2201      	movs	r2, #1
 8000548:	2110      	movs	r1, #16
 800054a:	4866      	ldr	r0, [pc, #408]	@ (80006e4 <Task_Relay_Light+0x2c0>)
 800054c:	f001 ffb5 	bl	80024ba <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(RELAY_2_PORT, RELAY_2_PIN, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2120      	movs	r1, #32
 8000554:	4863      	ldr	r0, [pc, #396]	@ (80006e4 <Task_Relay_Light+0x2c0>)
 8000556:	f001 ffb0 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 800055a:	e00c      	b.n	8000576 <Task_Relay_Light+0x152>
            if (relay_light_data_take == RELAY_LIGHT_BUTTON_5_AUTO)
 800055c:	7b3b      	ldrb	r3, [r7, #12]
 800055e:	2b04      	cmp	r3, #4
 8000560:	d10b      	bne.n	800057a <Task_Relay_Light+0x156>
                relay_light_auto_state = RELAY_LED_OFF;
 8000562:	4b5f      	ldr	r3, [pc, #380]	@ (80006e0 <Task_Relay_Light+0x2bc>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
            break;
 8000568:	e007      	b.n	800057a <Task_Relay_Light+0x156>
            break;
 800056a:	bf00      	nop
 800056c:	e006      	b.n	800057c <Task_Relay_Light+0x158>
                    break;
 800056e:	bf00      	nop
 8000570:	e004      	b.n	800057c <Task_Relay_Light+0x158>
            break;
 8000572:	bf00      	nop
 8000574:	e002      	b.n	800057c <Task_Relay_Light+0x158>
            break;
 8000576:	bf00      	nop
 8000578:	e000      	b.n	800057c <Task_Relay_Light+0x158>
            break;
 800057a:	bf00      	nop
        }

        switch (relay_light_1_state)
 800057c:	4b5b      	ldr	r3, [pc, #364]	@ (80006ec <Task_Relay_Light+0x2c8>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b03      	cmp	r3, #3
 8000582:	d063      	beq.n	800064c <Task_Relay_Light+0x228>
 8000584:	2b03      	cmp	r3, #3
 8000586:	f300 8087 	bgt.w	8000698 <Task_Relay_Light+0x274>
 800058a:	2b00      	cmp	r3, #0
 800058c:	d002      	beq.n	8000594 <Task_Relay_Light+0x170>
 800058e:	2b02      	cmp	r3, #2
 8000590:	d02e      	beq.n	80005f0 <Task_Relay_Light+0x1cc>
                relay_light_1_state = RELAY_LED_ON_BUTTON;
                HAL_GPIO_WritePin(RELAY_1_PORT, RELAY_1_PIN, GPIO_PIN_RESET);
            }
            break;
        default:
            break;
 8000592:	e081      	b.n	8000698 <Task_Relay_Light+0x274>
            if ((relay_light_data_take == BUTTON_1_PRESSED))
 8000594:	7b3b      	ldrb	r3, [r7, #12]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d10a      	bne.n	80005b0 <Task_Relay_Light+0x18c>
                relay_light_1_state = RELAY_LED_ON_BUTTON;
 800059a:	4b54      	ldr	r3, [pc, #336]	@ (80006ec <Task_Relay_Light+0x2c8>)
 800059c:	2202      	movs	r2, #2
 800059e:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_1_PORT, RELAY_1_PIN, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2110      	movs	r1, #16
 80005a4:	484f      	ldr	r0, [pc, #316]	@ (80006e4 <Task_Relay_Light+0x2c0>)
 80005a6:	f001 ff88 	bl	80024ba <HAL_GPIO_WritePin>
                UART_TX_state_1_give = UART_TX_RELAY_1_ON;
 80005aa:	2300      	movs	r3, #0
 80005ac:	73fb      	strb	r3, [r7, #15]
            break;
 80005ae:	e075      	b.n	800069c <Task_Relay_Light+0x278>
            else if ((relay_light_data_take == WEB_BUTTON_1_PRESSED))
 80005b0:	7b3b      	ldrb	r3, [r7, #12]
 80005b2:	2b02      	cmp	r3, #2
 80005b4:	d108      	bne.n	80005c8 <Task_Relay_Light+0x1a4>
                relay_light_1_state = RELAY_LED_ON_BUTTON;
 80005b6:	4b4d      	ldr	r3, [pc, #308]	@ (80006ec <Task_Relay_Light+0x2c8>)
 80005b8:	2202      	movs	r2, #2
 80005ba:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_1_PORT, RELAY_1_PIN, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2110      	movs	r1, #16
 80005c0:	4848      	ldr	r0, [pc, #288]	@ (80006e4 <Task_Relay_Light+0x2c0>)
 80005c2:	f001 ff7a 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 80005c6:	e069      	b.n	800069c <Task_Relay_Light+0x278>
            else if (relay_light_data_take == RELAY_LIGHT_BUTTON_5_AUTO)
 80005c8:	7b3b      	ldrb	r3, [r7, #12]
 80005ca:	2b04      	cmp	r3, #4
 80005cc:	d166      	bne.n	800069c <Task_Relay_Light+0x278>
                relay_light_1_state = RELAY_LED_AUTO;
 80005ce:	4b47      	ldr	r3, [pc, #284]	@ (80006ec <Task_Relay_Light+0x2c8>)
 80005d0:	2203      	movs	r2, #3
 80005d2:	701a      	strb	r2, [r3, #0]
                relay_light_2_state = RELAY_LED_AUTO;
 80005d4:	4b46      	ldr	r3, [pc, #280]	@ (80006f0 <Task_Relay_Light+0x2cc>)
 80005d6:	2203      	movs	r2, #3
 80005d8:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_1_PORT, RELAY_1_PIN, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	2110      	movs	r1, #16
 80005de:	4841      	ldr	r0, [pc, #260]	@ (80006e4 <Task_Relay_Light+0x2c0>)
 80005e0:	f001 ff6b 	bl	80024ba <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(RELAY_2_PORT, RELAY_2_PIN, GPIO_PIN_SET);
 80005e4:	2201      	movs	r2, #1
 80005e6:	2120      	movs	r1, #32
 80005e8:	483e      	ldr	r0, [pc, #248]	@ (80006e4 <Task_Relay_Light+0x2c0>)
 80005ea:	f001 ff66 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 80005ee:	e055      	b.n	800069c <Task_Relay_Light+0x278>
            if ((relay_light_data_take == BUTTON_1_PRESSED))
 80005f0:	7b3b      	ldrb	r3, [r7, #12]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d10a      	bne.n	800060c <Task_Relay_Light+0x1e8>
                relay_light_1_state = RELAY_LED_OFF;
 80005f6:	4b3d      	ldr	r3, [pc, #244]	@ (80006ec <Task_Relay_Light+0x2c8>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_1_PORT, RELAY_1_PIN, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2110      	movs	r1, #16
 8000600:	4838      	ldr	r0, [pc, #224]	@ (80006e4 <Task_Relay_Light+0x2c0>)
 8000602:	f001 ff5a 	bl	80024ba <HAL_GPIO_WritePin>
                UART_TX_state_1_give = UART_TX_RELAY_1_OFF;
 8000606:	2301      	movs	r3, #1
 8000608:	73fb      	strb	r3, [r7, #15]
            break;
 800060a:	e049      	b.n	80006a0 <Task_Relay_Light+0x27c>
            else if ((relay_light_data_take == WEB_BUTTON_1_PRESSED))
 800060c:	7b3b      	ldrb	r3, [r7, #12]
 800060e:	2b02      	cmp	r3, #2
 8000610:	d108      	bne.n	8000624 <Task_Relay_Light+0x200>
                relay_light_1_state = RELAY_LED_OFF;
 8000612:	4b36      	ldr	r3, [pc, #216]	@ (80006ec <Task_Relay_Light+0x2c8>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_1_PORT, RELAY_1_PIN, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2110      	movs	r1, #16
 800061c:	4831      	ldr	r0, [pc, #196]	@ (80006e4 <Task_Relay_Light+0x2c0>)
 800061e:	f001 ff4c 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 8000622:	e03d      	b.n	80006a0 <Task_Relay_Light+0x27c>
            else if (relay_light_data_take == RELAY_LIGHT_BUTTON_5_AUTO)
 8000624:	7b3b      	ldrb	r3, [r7, #12]
 8000626:	2b04      	cmp	r3, #4
 8000628:	d13a      	bne.n	80006a0 <Task_Relay_Light+0x27c>
                relay_light_1_state = RELAY_LED_AUTO;
 800062a:	4b30      	ldr	r3, [pc, #192]	@ (80006ec <Task_Relay_Light+0x2c8>)
 800062c:	2203      	movs	r2, #3
 800062e:	701a      	strb	r2, [r3, #0]
                relay_light_2_state = RELAY_LED_AUTO;
 8000630:	4b2f      	ldr	r3, [pc, #188]	@ (80006f0 <Task_Relay_Light+0x2cc>)
 8000632:	2203      	movs	r2, #3
 8000634:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_1_PORT, RELAY_1_PIN, GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	2110      	movs	r1, #16
 800063a:	482a      	ldr	r0, [pc, #168]	@ (80006e4 <Task_Relay_Light+0x2c0>)
 800063c:	f001 ff3d 	bl	80024ba <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(RELAY_2_PORT, RELAY_2_PIN, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	2120      	movs	r1, #32
 8000644:	4827      	ldr	r0, [pc, #156]	@ (80006e4 <Task_Relay_Light+0x2c0>)
 8000646:	f001 ff38 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 800064a:	e029      	b.n	80006a0 <Task_Relay_Light+0x27c>
            if (relay_light_data_take == RELAY_LIGHT_BUTTON_5_HAND)
 800064c:	7b3b      	ldrb	r3, [r7, #12]
 800064e:	2b05      	cmp	r3, #5
 8000650:	d106      	bne.n	8000660 <Task_Relay_Light+0x23c>
                relay_light_1_state = RELAY_LED_OFF;
 8000652:	4b26      	ldr	r3, [pc, #152]	@ (80006ec <Task_Relay_Light+0x2c8>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
                relay_light_2_state = RELAY_LED_OFF;
 8000658:	4b25      	ldr	r3, [pc, #148]	@ (80006f0 <Task_Relay_Light+0x2cc>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]
            break;
 800065e:	e021      	b.n	80006a4 <Task_Relay_Light+0x280>
            else if (relay_light_data_take == BUTTON_1_PRESSED)
 8000660:	7b3b      	ldrb	r3, [r7, #12]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d10c      	bne.n	8000680 <Task_Relay_Light+0x25c>
                relay_light_1_state = RELAY_LED_ON_BUTTON;
 8000666:	4b21      	ldr	r3, [pc, #132]	@ (80006ec <Task_Relay_Light+0x2c8>)
 8000668:	2202      	movs	r2, #2
 800066a:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_1_PORT, RELAY_1_PIN, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	2110      	movs	r1, #16
 8000670:	481c      	ldr	r0, [pc, #112]	@ (80006e4 <Task_Relay_Light+0x2c0>)
 8000672:	f001 ff22 	bl	80024ba <HAL_GPIO_WritePin>
                UART_TX_state_1_give = UART_TX_RELAY_1_ON;
 8000676:	2300      	movs	r3, #0
 8000678:	73fb      	strb	r3, [r7, #15]
                UART_TX_state_auto_give = UART_TX_AUTO_OFF;
 800067a:	230f      	movs	r3, #15
 800067c:	737b      	strb	r3, [r7, #13]
            break;
 800067e:	e011      	b.n	80006a4 <Task_Relay_Light+0x280>
            else if (relay_light_data_take == WEB_BUTTON_1_PRESSED)
 8000680:	7b3b      	ldrb	r3, [r7, #12]
 8000682:	2b02      	cmp	r3, #2
 8000684:	d10e      	bne.n	80006a4 <Task_Relay_Light+0x280>
                relay_light_1_state = RELAY_LED_ON_BUTTON;
 8000686:	4b19      	ldr	r3, [pc, #100]	@ (80006ec <Task_Relay_Light+0x2c8>)
 8000688:	2202      	movs	r2, #2
 800068a:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_1_PORT, RELAY_1_PIN, GPIO_PIN_RESET);
 800068c:	2200      	movs	r2, #0
 800068e:	2110      	movs	r1, #16
 8000690:	4814      	ldr	r0, [pc, #80]	@ (80006e4 <Task_Relay_Light+0x2c0>)
 8000692:	f001 ff12 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 8000696:	e005      	b.n	80006a4 <Task_Relay_Light+0x280>
            break;
 8000698:	bf00      	nop
 800069a:	e004      	b.n	80006a6 <Task_Relay_Light+0x282>
            break;
 800069c:	bf00      	nop
 800069e:	e002      	b.n	80006a6 <Task_Relay_Light+0x282>
            break;
 80006a0:	bf00      	nop
 80006a2:	e000      	b.n	80006a6 <Task_Relay_Light+0x282>
            break;
 80006a4:	bf00      	nop
        }

        switch (relay_light_2_state)
 80006a6:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <Task_Relay_Light+0x2cc>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d070      	beq.n	8000790 <Task_Relay_Light+0x36c>
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	f300 8094 	bgt.w	80007dc <Task_Relay_Light+0x3b8>
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d002      	beq.n	80006be <Task_Relay_Light+0x29a>
 80006b8:	2b02      	cmp	r3, #2
 80006ba:	d03b      	beq.n	8000734 <Task_Relay_Light+0x310>
                relay_light_2_state = RELAY_LED_ON_BUTTON;
                HAL_GPIO_WritePin(RELAY_2_PORT, RELAY_2_PIN, GPIO_PIN_RESET);
            }
            break;
        default:
            break;
 80006bc:	e08e      	b.n	80007dc <Task_Relay_Light+0x3b8>
            if ((relay_light_data_take == BUTTON_2_PRESSED))
 80006be:	7b3b      	ldrb	r3, [r7, #12]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d117      	bne.n	80006f4 <Task_Relay_Light+0x2d0>
                relay_light_2_state = RELAY_LED_ON_BUTTON;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <Task_Relay_Light+0x2cc>)
 80006c6:	2202      	movs	r2, #2
 80006c8:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_2_PORT, RELAY_2_PIN, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2120      	movs	r1, #32
 80006ce:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <Task_Relay_Light+0x2c0>)
 80006d0:	f001 fef3 	bl	80024ba <HAL_GPIO_WritePin>
                UART_TX_state_2_give = UART_TX_RELAY_2_ON;
 80006d4:	2302      	movs	r3, #2
 80006d6:	73bb      	strb	r3, [r7, #14]
            break;
 80006d8:	e082      	b.n	80007e0 <Task_Relay_Light+0x3bc>
 80006da:	bf00      	nop
 80006dc:	200000b0 	.word	0x200000b0
 80006e0:	200000ac 	.word	0x200000ac
 80006e4:	40010800 	.word	0x40010800
 80006e8:	20000138 	.word	0x20000138
 80006ec:	20000000 	.word	0x20000000
 80006f0:	20000001 	.word	0x20000001
            else if ((relay_light_data_take == WEB_BUTTON_2_PRESSED))
 80006f4:	7b3b      	ldrb	r3, [r7, #12]
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	d108      	bne.n	800070c <Task_Relay_Light+0x2e8>
                relay_light_2_state = RELAY_LED_ON_BUTTON;
 80006fa:	4b56      	ldr	r3, [pc, #344]	@ (8000854 <Task_Relay_Light+0x430>)
 80006fc:	2202      	movs	r2, #2
 80006fe:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_2_PORT, RELAY_2_PIN, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	2120      	movs	r1, #32
 8000704:	4854      	ldr	r0, [pc, #336]	@ (8000858 <Task_Relay_Light+0x434>)
 8000706:	f001 fed8 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 800070a:	e069      	b.n	80007e0 <Task_Relay_Light+0x3bc>
            else if (relay_light_data_take == RELAY_LIGHT_BUTTON_5_AUTO)
 800070c:	7b3b      	ldrb	r3, [r7, #12]
 800070e:	2b04      	cmp	r3, #4
 8000710:	d166      	bne.n	80007e0 <Task_Relay_Light+0x3bc>
                relay_light_1_state = RELAY_LED_AUTO;
 8000712:	4b52      	ldr	r3, [pc, #328]	@ (800085c <Task_Relay_Light+0x438>)
 8000714:	2203      	movs	r2, #3
 8000716:	701a      	strb	r2, [r3, #0]
                relay_light_2_state = RELAY_LED_AUTO;
 8000718:	4b4e      	ldr	r3, [pc, #312]	@ (8000854 <Task_Relay_Light+0x430>)
 800071a:	2203      	movs	r2, #3
 800071c:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_1_PORT, RELAY_1_PIN, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	2110      	movs	r1, #16
 8000722:	484d      	ldr	r0, [pc, #308]	@ (8000858 <Task_Relay_Light+0x434>)
 8000724:	f001 fec9 	bl	80024ba <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(RELAY_2_PORT, RELAY_2_PIN, GPIO_PIN_SET);
 8000728:	2201      	movs	r2, #1
 800072a:	2120      	movs	r1, #32
 800072c:	484a      	ldr	r0, [pc, #296]	@ (8000858 <Task_Relay_Light+0x434>)
 800072e:	f001 fec4 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 8000732:	e055      	b.n	80007e0 <Task_Relay_Light+0x3bc>
            if ((relay_light_data_take == BUTTON_2_PRESSED))
 8000734:	7b3b      	ldrb	r3, [r7, #12]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d10a      	bne.n	8000750 <Task_Relay_Light+0x32c>
                relay_light_2_state = RELAY_LED_OFF;
 800073a:	4b46      	ldr	r3, [pc, #280]	@ (8000854 <Task_Relay_Light+0x430>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_2_PORT, RELAY_2_PIN, GPIO_PIN_SET);
 8000740:	2201      	movs	r2, #1
 8000742:	2120      	movs	r1, #32
 8000744:	4844      	ldr	r0, [pc, #272]	@ (8000858 <Task_Relay_Light+0x434>)
 8000746:	f001 feb8 	bl	80024ba <HAL_GPIO_WritePin>
                UART_TX_state_2_give = UART_TX_RELAY_2_OFF;
 800074a:	2303      	movs	r3, #3
 800074c:	73bb      	strb	r3, [r7, #14]
            break;
 800074e:	e049      	b.n	80007e4 <Task_Relay_Light+0x3c0>
            else if ((relay_light_data_take == WEB_BUTTON_2_PRESSED))
 8000750:	7b3b      	ldrb	r3, [r7, #12]
 8000752:	2b03      	cmp	r3, #3
 8000754:	d108      	bne.n	8000768 <Task_Relay_Light+0x344>
                relay_light_2_state = RELAY_LED_OFF;
 8000756:	4b3f      	ldr	r3, [pc, #252]	@ (8000854 <Task_Relay_Light+0x430>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_2_PORT, RELAY_2_PIN, GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2120      	movs	r1, #32
 8000760:	483d      	ldr	r0, [pc, #244]	@ (8000858 <Task_Relay_Light+0x434>)
 8000762:	f001 feaa 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 8000766:	e03d      	b.n	80007e4 <Task_Relay_Light+0x3c0>
            else if (relay_light_data_take == RELAY_LIGHT_BUTTON_5_AUTO)
 8000768:	7b3b      	ldrb	r3, [r7, #12]
 800076a:	2b04      	cmp	r3, #4
 800076c:	d13a      	bne.n	80007e4 <Task_Relay_Light+0x3c0>
                relay_light_1_state = RELAY_LED_AUTO;
 800076e:	4b3b      	ldr	r3, [pc, #236]	@ (800085c <Task_Relay_Light+0x438>)
 8000770:	2203      	movs	r2, #3
 8000772:	701a      	strb	r2, [r3, #0]
                relay_light_2_state = RELAY_LED_AUTO;
 8000774:	4b37      	ldr	r3, [pc, #220]	@ (8000854 <Task_Relay_Light+0x430>)
 8000776:	2203      	movs	r2, #3
 8000778:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_1_PORT, RELAY_1_PIN, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	2110      	movs	r1, #16
 800077e:	4836      	ldr	r0, [pc, #216]	@ (8000858 <Task_Relay_Light+0x434>)
 8000780:	f001 fe9b 	bl	80024ba <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(RELAY_2_PORT, RELAY_2_PIN, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2120      	movs	r1, #32
 8000788:	4833      	ldr	r0, [pc, #204]	@ (8000858 <Task_Relay_Light+0x434>)
 800078a:	f001 fe96 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 800078e:	e029      	b.n	80007e4 <Task_Relay_Light+0x3c0>
            if (relay_light_data_take == RELAY_LIGHT_BUTTON_5_HAND)
 8000790:	7b3b      	ldrb	r3, [r7, #12]
 8000792:	2b05      	cmp	r3, #5
 8000794:	d106      	bne.n	80007a4 <Task_Relay_Light+0x380>
                relay_light_1_state = RELAY_LED_OFF;
 8000796:	4b31      	ldr	r3, [pc, #196]	@ (800085c <Task_Relay_Light+0x438>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
                relay_light_2_state = RELAY_LED_OFF;
 800079c:	4b2d      	ldr	r3, [pc, #180]	@ (8000854 <Task_Relay_Light+0x430>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
            break;
 80007a2:	e021      	b.n	80007e8 <Task_Relay_Light+0x3c4>
            else if ((relay_light_data_take == BUTTON_2_PRESSED))
 80007a4:	7b3b      	ldrb	r3, [r7, #12]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d10c      	bne.n	80007c4 <Task_Relay_Light+0x3a0>
                relay_light_2_state = RELAY_LED_ON_BUTTON;
 80007aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000854 <Task_Relay_Light+0x430>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_2_PORT, RELAY_2_PIN, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2120      	movs	r1, #32
 80007b4:	4828      	ldr	r0, [pc, #160]	@ (8000858 <Task_Relay_Light+0x434>)
 80007b6:	f001 fe80 	bl	80024ba <HAL_GPIO_WritePin>
                UART_TX_state_2_give = UART_TX_RELAY_2_ON;
 80007ba:	2302      	movs	r3, #2
 80007bc:	73bb      	strb	r3, [r7, #14]
                UART_TX_state_auto_give = UART_TX_AUTO_OFF;
 80007be:	230f      	movs	r3, #15
 80007c0:	737b      	strb	r3, [r7, #13]
            break;
 80007c2:	e011      	b.n	80007e8 <Task_Relay_Light+0x3c4>
            else if ((relay_light_data_take == WEB_BUTTON_2_PRESSED))
 80007c4:	7b3b      	ldrb	r3, [r7, #12]
 80007c6:	2b03      	cmp	r3, #3
 80007c8:	d10e      	bne.n	80007e8 <Task_Relay_Light+0x3c4>
                relay_light_2_state = RELAY_LED_ON_BUTTON;
 80007ca:	4b22      	ldr	r3, [pc, #136]	@ (8000854 <Task_Relay_Light+0x430>)
 80007cc:	2202      	movs	r2, #2
 80007ce:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_2_PORT, RELAY_2_PIN, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2120      	movs	r1, #32
 80007d4:	4820      	ldr	r0, [pc, #128]	@ (8000858 <Task_Relay_Light+0x434>)
 80007d6:	f001 fe70 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 80007da:	e005      	b.n	80007e8 <Task_Relay_Light+0x3c4>
            break;
 80007dc:	bf00      	nop
 80007de:	e004      	b.n	80007ea <Task_Relay_Light+0x3c6>
            break;
 80007e0:	bf00      	nop
 80007e2:	e002      	b.n	80007ea <Task_Relay_Light+0x3c6>
            break;
 80007e4:	bf00      	nop
 80007e6:	e000      	b.n	80007ea <Task_Relay_Light+0x3c6>
            break;
 80007e8:	bf00      	nop
        }

        xQueueSend(queue_UART_TX_state, &UART_TX_state_1_give, 0);
 80007ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000860 <Task_Relay_Light+0x43c>)
 80007ec:	6818      	ldr	r0, [r3, #0]
 80007ee:	f107 010f 	add.w	r1, r7, #15
 80007f2:	2300      	movs	r3, #0
 80007f4:	2200      	movs	r2, #0
 80007f6:	f004 f997 	bl	8004b28 <xQueueGenericSend>
        xQueueSend(queue_UART_TX_state, &UART_TX_state_2_give, 0);
 80007fa:	4b19      	ldr	r3, [pc, #100]	@ (8000860 <Task_Relay_Light+0x43c>)
 80007fc:	6818      	ldr	r0, [r3, #0]
 80007fe:	f107 010e 	add.w	r1, r7, #14
 8000802:	2300      	movs	r3, #0
 8000804:	2200      	movs	r2, #0
 8000806:	f004 f98f 	bl	8004b28 <xQueueGenericSend>
        xQueueSend(queue_UART_TX_state, &UART_TX_state_auto_give, 0);
 800080a:	4b15      	ldr	r3, [pc, #84]	@ (8000860 <Task_Relay_Light+0x43c>)
 800080c:	6818      	ldr	r0, [r3, #0]
 800080e:	f107 010d 	add.w	r1, r7, #13
 8000812:	2300      	movs	r3, #0
 8000814:	2200      	movs	r2, #0
 8000816:	f004 f987 	bl	8004b28 <xQueueGenericSend>
        xTaskNotifyGive(Task_UART_TX_Handle);
 800081a:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <Task_Relay_Light+0x440>)
 800081c:	6818      	ldr	r0, [r3, #0]
 800081e:	2300      	movs	r3, #0
 8000820:	9300      	str	r3, [sp, #0]
 8000822:	2302      	movs	r3, #2
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	f005 fc1e 	bl	8006068 <xTaskGenericNotify>
        xTaskNotifyGive(Task_UART_TX_Handle);
 800082c:	4b0d      	ldr	r3, [pc, #52]	@ (8000864 <Task_Relay_Light+0x440>)
 800082e:	6818      	ldr	r0, [r3, #0]
 8000830:	2300      	movs	r3, #0
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	2302      	movs	r3, #2
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	f005 fc15 	bl	8006068 <xTaskGenericNotify>
        xTaskNotifyGive(Task_UART_TX_Handle);
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <Task_Relay_Light+0x440>)
 8000840:	6818      	ldr	r0, [r3, #0]
 8000842:	2300      	movs	r3, #0
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2302      	movs	r3, #2
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	f005 fc0c 	bl	8006068 <xTaskGenericNotify>
    {
 8000850:	e5ec      	b.n	800042c <Task_Relay_Light+0x8>
 8000852:	bf00      	nop
 8000854:	20000001 	.word	0x20000001
 8000858:	40010800 	.word	0x40010800
 800085c:	20000000 	.word	0x20000000
 8000860:	200000c0 	.word	0x200000c0
 8000864:	200000d0 	.word	0x200000d0

08000868 <Task_UART_RX>:
    }
}

static void Task_UART_RX(void *pvParameters)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af02      	add	r7, sp, #8
 800086e:	6078      	str	r0, [r7, #4]
    while (1)
    {
        ulTaskNotifyTake(pdFALSE,portMAX_DELAY);
 8000870:	f04f 32ff 	mov.w	r2, #4294967295
 8000874:	2100      	movs	r1, #0
 8000876:	2000      	movs	r0, #0
 8000878:	f005 fb8a 	bl	8005f90 <ulTaskGenericNotifyTake>

        relay_light_data_t          relay_light_UART_RX_give = RELAY_LIGHT_DATA_NULL;
 800087c:	230b      	movs	r3, #11
 800087e:	73fb      	strb	r3, [r7, #15]
        relay_humid_fan_data_t      relay_humid_fan_data_UART_RX_give = RELAY_HUMID_FAN_BUTTON_NULL;
 8000880:	2306      	movs	r3, #6
 8000882:	73bb      	strb	r3, [r7, #14]
        UART_frame_t                UART_RX_data_take;

        xQueueReceive(queue_UART_RX_data, &UART_RX_data_take, 0);
 8000884:	4b29      	ldr	r3, [pc, #164]	@ (800092c <Task_UART_RX+0xc4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f107 010d 	add.w	r1, r7, #13
 800088c:	2200      	movs	r2, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f004 fa5a 	bl	8004d48 <xQueueReceive>

        switch (UART_RX_data_take)
 8000894:	7b7b      	ldrb	r3, [r7, #13]
 8000896:	2b05      	cmp	r3, #5
 8000898:	d824      	bhi.n	80008e4 <Task_UART_RX+0x7c>
 800089a:	a201      	add	r2, pc, #4	@ (adr r2, 80008a0 <Task_UART_RX+0x38>)
 800089c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a0:	080008b9 	.word	0x080008b9
 80008a4:	080008bf 	.word	0x080008bf
 80008a8:	080008c5 	.word	0x080008c5
 80008ac:	080008cb 	.word	0x080008cb
 80008b0:	080008d1 	.word	0x080008d1
 80008b4:	080008db 	.word	0x080008db
        {
        case UART_BUTTON_1:
            relay_light_UART_RX_give = WEB_BUTTON_1_PRESSED;
 80008b8:	2302      	movs	r3, #2
 80008ba:	73fb      	strb	r3, [r7, #15]
            break;
 80008bc:	e013      	b.n	80008e6 <Task_UART_RX+0x7e>
        case UART_BUTTON_2:
            relay_light_UART_RX_give = WEB_BUTTON_2_PRESSED;
 80008be:	2303      	movs	r3, #3
 80008c0:	73fb      	strb	r3, [r7, #15]
            break;
 80008c2:	e010      	b.n	80008e6 <Task_UART_RX+0x7e>
        case UART_BUTTON_3:
            relay_humid_fan_data_UART_RX_give = WEB_BUTTON_3_PRESSED;
 80008c4:	2302      	movs	r3, #2
 80008c6:	73bb      	strb	r3, [r7, #14]
            break;
 80008c8:	e00d      	b.n	80008e6 <Task_UART_RX+0x7e>
        case UART_BUTTON_4:
            relay_humid_fan_data_UART_RX_give = WEB_BUTTON_4_PRESSED;
 80008ca:	2303      	movs	r3, #3
 80008cc:	73bb      	strb	r3, [r7, #14]
            break;
 80008ce:	e00a      	b.n	80008e6 <Task_UART_RX+0x7e>
        case UART_BUTTON_5_AUTO:
            relay_light_UART_RX_give = RELAY_LIGHT_BUTTON_5_AUTO;
 80008d0:	2304      	movs	r3, #4
 80008d2:	73fb      	strb	r3, [r7, #15]
            relay_humid_fan_data_UART_RX_give = RELAY_HUMID_FAN_5_AUTO;
 80008d4:	2304      	movs	r3, #4
 80008d6:	73bb      	strb	r3, [r7, #14]
            break;
 80008d8:	e005      	b.n	80008e6 <Task_UART_RX+0x7e>
        case UART_BUTTON_5_HAND:
            relay_light_UART_RX_give = RELAY_LIGHT_BUTTON_5_HAND;
 80008da:	2305      	movs	r3, #5
 80008dc:	73fb      	strb	r3, [r7, #15]
            relay_humid_fan_data_UART_RX_give = RELAY_HUMID_FAN_5_HAND;
 80008de:	2305      	movs	r3, #5
 80008e0:	73bb      	strb	r3, [r7, #14]
            break;
 80008e2:	e000      	b.n	80008e6 <Task_UART_RX+0x7e>
        default:
            break;
 80008e4:	bf00      	nop
        }

        xQueueSend(queue_relay_light_data, &relay_light_UART_RX_give, 0);
 80008e6:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <Task_UART_RX+0xc8>)
 80008e8:	6818      	ldr	r0, [r3, #0]
 80008ea:	f107 010f 	add.w	r1, r7, #15
 80008ee:	2300      	movs	r3, #0
 80008f0:	2200      	movs	r2, #0
 80008f2:	f004 f919 	bl	8004b28 <xQueueGenericSend>
        xQueueSend(queue_relay_humid_fan_data, &relay_humid_fan_data_UART_RX_give, 0);
 80008f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <Task_UART_RX+0xcc>)
 80008f8:	6818      	ldr	r0, [r3, #0]
 80008fa:	f107 010e 	add.w	r1, r7, #14
 80008fe:	2300      	movs	r3, #0
 8000900:	2200      	movs	r2, #0
 8000902:	f004 f911 	bl	8004b28 <xQueueGenericSend>
        xTaskNotifyGive(Task_Relay_Light_Handle);
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <Task_UART_RX+0xd0>)
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	2300      	movs	r3, #0
 800090c:	9300      	str	r3, [sp, #0]
 800090e:	2302      	movs	r3, #2
 8000910:	2200      	movs	r2, #0
 8000912:	2100      	movs	r1, #0
 8000914:	f005 fba8 	bl	8006068 <xTaskGenericNotify>
        xTaskNotifyGive(Task_Relay_Humid_Fan_Handle);
 8000918:	4b08      	ldr	r3, [pc, #32]	@ (800093c <Task_UART_RX+0xd4>)
 800091a:	6818      	ldr	r0, [r3, #0]
 800091c:	2300      	movs	r3, #0
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	2302      	movs	r3, #2
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	f005 fb9f 	bl	8006068 <xTaskGenericNotify>
    {
 800092a:	e7a1      	b.n	8000870 <Task_UART_RX+0x8>
 800092c:	200000b4 	.word	0x200000b4
 8000930:	200000b0 	.word	0x200000b0
 8000934:	200000bc 	.word	0x200000bc
 8000938:	200000c8 	.word	0x200000c8
 800093c:	200000d8 	.word	0x200000d8

08000940 <UART_Frame_TX>:
    }
}

static void UART_Frame_TX(UART_frame_t frame_data, uint8_t TX_data[], uint8_t TX_count)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	71fb      	strb	r3, [r7, #7]
 800094c:	4613      	mov	r3, r2
 800094e:	71bb      	strb	r3, [r7, #6]
    UART_printf("%c", frame_data);
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4619      	mov	r1, r3
 8000954:	4814      	ldr	r0, [pc, #80]	@ (80009a8 <UART_Frame_TX+0x68>)
 8000956:	f007 fc23 	bl	80081a0 <UART_printf>

    if(frame_data == UART_DHT_HUMID || frame_data == UART_DHT_TEMP)
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b06      	cmp	r3, #6
 800095e:	d002      	beq.n	8000966 <UART_Frame_TX+0x26>
 8000960:	79fb      	ldrb	r3, [r7, #7]
 8000962:	2b07      	cmp	r3, #7
 8000964:	d111      	bne.n	800098a <UART_Frame_TX+0x4a>
    {
        UART_printf("%d", TX_data[0]);
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	4619      	mov	r1, r3
 800096c:	480f      	ldr	r0, [pc, #60]	@ (80009ac <UART_Frame_TX+0x6c>)
 800096e:	f007 fc17 	bl	80081a0 <UART_printf>
        UART_write(".", 1);
 8000972:	2101      	movs	r1, #1
 8000974:	480e      	ldr	r0, [pc, #56]	@ (80009b0 <UART_Frame_TX+0x70>)
 8000976:	f007 fbbb 	bl	80080f0 <UART_write>
        UART_printf("%d", TX_data[1]);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	4619      	mov	r1, r3
 8000982:	480a      	ldr	r0, [pc, #40]	@ (80009ac <UART_Frame_TX+0x6c>)
 8000984:	f007 fc0c 	bl	80081a0 <UART_printf>
 8000988:	e005      	b.n	8000996 <UART_Frame_TX+0x56>
    }
    else
        UART_printf("%d", TX_data[0]);
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	4619      	mov	r1, r3
 8000990:	4806      	ldr	r0, [pc, #24]	@ (80009ac <UART_Frame_TX+0x6c>)
 8000992:	f007 fc05 	bl	80081a0 <UART_printf>

    UART_printf("%c", UART_STOP_FRAME);
 8000996:	210a      	movs	r1, #10
 8000998:	4803      	ldr	r0, [pc, #12]	@ (80009a8 <UART_Frame_TX+0x68>)
 800099a:	f007 fc01 	bl	80081a0 <UART_printf>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	08008828 	.word	0x08008828
 80009ac:	0800882c 	.word	0x0800882c
 80009b0:	08008830 	.word	0x08008830

080009b4 <Task_UART_TX>:

static void Task_UART_TX(void *pvParameters)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
    while (1)
    {
        ulTaskNotifyTake(pdFALSE, portMAX_DELAY);
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295
 80009c0:	2100      	movs	r1, #0
 80009c2:	2000      	movs	r0, #0
 80009c4:	f005 fae4 	bl	8005f90 <ulTaskGenericNotifyTake>

        DHT_data_t          UART_TX_DHT_data_take = {0};
 80009c8:	4a75      	ldr	r2, [pc, #468]	@ (8000ba0 <Task_UART_TX+0x1ec>)
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009d2:	6018      	str	r0, [r3, #0]
 80009d4:	3304      	adds	r3, #4
 80009d6:	7019      	strb	r1, [r3, #0]
        UART_TX_state_t     UART_TX_state_take = UART_TX_IDLE;
 80009d8:	2310      	movs	r3, #16
 80009da:	73fb      	strb	r3, [r7, #15]

        uint8_t relay_1_data, relay_2_data, relay_3_data, relay_4_data, PIR_data, LM_data;

        xQueueReceive(queue_UART_TX_state, &UART_TX_state_take, 0);
 80009dc:	4b71      	ldr	r3, [pc, #452]	@ (8000ba4 <Task_UART_TX+0x1f0>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f107 010f 	add.w	r1, r7, #15
 80009e4:	2200      	movs	r2, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f004 f9ae 	bl	8004d48 <xQueueReceive>
        xQueuePeek(queue_DHT_data, &UART_TX_DHT_data_take, 0);
 80009ec:	4b6e      	ldr	r3, [pc, #440]	@ (8000ba8 <Task_UART_TX+0x1f4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f107 0110 	add.w	r1, r7, #16
 80009f4:	2200      	movs	r2, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f004 fa48 	bl	8004e8c <xQueuePeek>

        switch (UART_TX_state_take)
 80009fc:	7bfb      	ldrb	r3, [r7, #15]
 80009fe:	2b10      	cmp	r3, #16
 8000a00:	f200 80cb 	bhi.w	8000b9a <Task_UART_TX+0x1e6>
 8000a04:	a201      	add	r2, pc, #4	@ (adr r2, 8000a0c <Task_UART_TX+0x58>)
 8000a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a0a:	bf00      	nop
 8000a0c:	08000a51 	.word	0x08000a51
 8000a10:	08000a69 	.word	0x08000a69
 8000a14:	08000a81 	.word	0x08000a81
 8000a18:	08000a99 	.word	0x08000a99
 8000a1c:	08000ab1 	.word	0x08000ab1
 8000a20:	08000ac9 	.word	0x08000ac9
 8000a24:	08000ae1 	.word	0x08000ae1
 8000a28:	08000af9 	.word	0x08000af9
 8000a2c:	08000b9b 	.word	0x08000b9b
 8000a30:	08000b9b 	.word	0x08000b9b
 8000a34:	08000b11 	.word	0x08000b11
 8000a38:	08000b3b 	.word	0x08000b3b
 8000a3c:	08000b53 	.word	0x08000b53
 8000a40:	08000b6b 	.word	0x08000b6b
 8000a44:	08000b83 	.word	0x08000b83
 8000a48:	08000b9b 	.word	0x08000b9b
 8000a4c:	08000b9b 	.word	0x08000b9b
        {
        case UART_TX_IDLE:
            break;
        case UART_TX_RELAY_1_ON:
            relay_1_data = 1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	73bb      	strb	r3, [r7, #14]
            UART_Frame_TX(UART_BUTTON_1, &relay_1_data, 1);
 8000a54:	f107 030e 	add.w	r3, r7, #14
 8000a58:	2201      	movs	r2, #1
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff ff6f 	bl	8000940 <UART_Frame_TX>
            UART_TX_state_take = UART_TX_IDLE;
 8000a62:	2310      	movs	r3, #16
 8000a64:	73fb      	strb	r3, [r7, #15]
            break;
 8000a66:	e099      	b.n	8000b9c <Task_UART_TX+0x1e8>
        case UART_TX_RELAY_1_OFF:
            relay_1_data = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	73bb      	strb	r3, [r7, #14]
            UART_Frame_TX(UART_BUTTON_1, &relay_1_data, 1);
 8000a6c:	f107 030e 	add.w	r3, r7, #14
 8000a70:	2201      	movs	r2, #1
 8000a72:	4619      	mov	r1, r3
 8000a74:	2000      	movs	r0, #0
 8000a76:	f7ff ff63 	bl	8000940 <UART_Frame_TX>
            UART_TX_state_take = UART_TX_IDLE;
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	73fb      	strb	r3, [r7, #15]
            break;
 8000a7e:	e08d      	b.n	8000b9c <Task_UART_TX+0x1e8>
        case UART_TX_RELAY_2_ON:
            relay_2_data = 1;
 8000a80:	2301      	movs	r3, #1
 8000a82:	737b      	strb	r3, [r7, #13]
            UART_Frame_TX(UART_BUTTON_2, &relay_2_data, 1);
 8000a84:	f107 030d 	add.w	r3, r7, #13
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	f7ff ff57 	bl	8000940 <UART_Frame_TX>
            UART_TX_state_take = UART_TX_IDLE;
 8000a92:	2310      	movs	r3, #16
 8000a94:	73fb      	strb	r3, [r7, #15]
            break;
 8000a96:	e081      	b.n	8000b9c <Task_UART_TX+0x1e8>
        case UART_TX_RELAY_2_OFF:
            relay_2_data = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	737b      	strb	r3, [r7, #13]
            UART_Frame_TX(UART_BUTTON_2, &relay_2_data, 1);
 8000a9c:	f107 030d 	add.w	r3, r7, #13
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f7ff ff4b 	bl	8000940 <UART_Frame_TX>
            UART_TX_state_take = UART_TX_IDLE;
 8000aaa:	2310      	movs	r3, #16
 8000aac:	73fb      	strb	r3, [r7, #15]
            break;
 8000aae:	e075      	b.n	8000b9c <Task_UART_TX+0x1e8>
        case UART_TX_RELAY_3_ON:
            relay_3_data = 1;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	733b      	strb	r3, [r7, #12]
            UART_Frame_TX(UART_BUTTON_3, &relay_3_data, 1);
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4619      	mov	r1, r3
 8000abc:	2002      	movs	r0, #2
 8000abe:	f7ff ff3f 	bl	8000940 <UART_Frame_TX>
            UART_TX_state_take = UART_TX_IDLE;
 8000ac2:	2310      	movs	r3, #16
 8000ac4:	73fb      	strb	r3, [r7, #15]
            break;
 8000ac6:	e069      	b.n	8000b9c <Task_UART_TX+0x1e8>
        case UART_TX_RELAY_3_OFF:
            relay_3_data = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	733b      	strb	r3, [r7, #12]
            UART_Frame_TX(UART_BUTTON_3, &relay_3_data, 1);
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	2002      	movs	r0, #2
 8000ad6:	f7ff ff33 	bl	8000940 <UART_Frame_TX>
            UART_TX_state_take = UART_TX_IDLE;
 8000ada:	2310      	movs	r3, #16
 8000adc:	73fb      	strb	r3, [r7, #15]
            break;
 8000ade:	e05d      	b.n	8000b9c <Task_UART_TX+0x1e8>
        case UART_TX_RELAY_4_ON:
            relay_4_data = 1;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	72fb      	strb	r3, [r7, #11]
            UART_Frame_TX(UART_BUTTON_4, &relay_4_data, 1);
 8000ae4:	f107 030b 	add.w	r3, r7, #11
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4619      	mov	r1, r3
 8000aec:	2003      	movs	r0, #3
 8000aee:	f7ff ff27 	bl	8000940 <UART_Frame_TX>
            UART_TX_state_take = UART_TX_IDLE;
 8000af2:	2310      	movs	r3, #16
 8000af4:	73fb      	strb	r3, [r7, #15]
            break;
 8000af6:	e051      	b.n	8000b9c <Task_UART_TX+0x1e8>
        case UART_TX_RELAY_4_OFF:
            relay_4_data = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	72fb      	strb	r3, [r7, #11]
            UART_Frame_TX(UART_BUTTON_4, &relay_4_data, 1);
 8000afc:	f107 030b 	add.w	r3, r7, #11
 8000b00:	2201      	movs	r2, #1
 8000b02:	4619      	mov	r1, r3
 8000b04:	2003      	movs	r0, #3
 8000b06:	f7ff ff1b 	bl	8000940 <UART_Frame_TX>
            UART_TX_state_take = UART_TX_IDLE;
 8000b0a:	2310      	movs	r3, #16
 8000b0c:	73fb      	strb	r3, [r7, #15]
            break;
 8000b0e:	e045      	b.n	8000b9c <Task_UART_TX+0x1e8>
        case UART_TX_DHT:
            UART_Frame_TX(UART_DHT_HUMID, &UART_TX_DHT_data_take.DHT_data[0], 2);
 8000b10:	f107 0310 	add.w	r3, r7, #16
 8000b14:	2202      	movs	r2, #2
 8000b16:	4619      	mov	r1, r3
 8000b18:	2006      	movs	r0, #6
 8000b1a:	f7ff ff11 	bl	8000940 <UART_Frame_TX>
            vTaskDelay(60);
 8000b1e:	203c      	movs	r0, #60	@ 0x3c
 8000b20:	f004 fcc4 	bl	80054ac <vTaskDelay>
            UART_Frame_TX(UART_DHT_TEMP, &UART_TX_DHT_data_take.DHT_data[2], 2);
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	3302      	adds	r3, #2
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	2007      	movs	r0, #7
 8000b30:	f7ff ff06 	bl	8000940 <UART_Frame_TX>
            UART_TX_state_take = UART_TX_IDLE;
 8000b34:	2310      	movs	r3, #16
 8000b36:	73fb      	strb	r3, [r7, #15]
            break;
 8000b38:	e030      	b.n	8000b9c <Task_UART_TX+0x1e8>
        case UART_TX_PIR_ON:
            PIR_data = 1;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	72bb      	strb	r3, [r7, #10]
            UART_Frame_TX(UART_PIR, &PIR_data, 1);
 8000b3e:	f107 030a 	add.w	r3, r7, #10
 8000b42:	2201      	movs	r2, #1
 8000b44:	4619      	mov	r1, r3
 8000b46:	2008      	movs	r0, #8
 8000b48:	f7ff fefa 	bl	8000940 <UART_Frame_TX>
            UART_TX_state_take = UART_TX_IDLE;
 8000b4c:	2310      	movs	r3, #16
 8000b4e:	73fb      	strb	r3, [r7, #15]
            break;
 8000b50:	e024      	b.n	8000b9c <Task_UART_TX+0x1e8>
        case UART_TX_PIR_OFF:
            PIR_data = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	72bb      	strb	r3, [r7, #10]
            UART_Frame_TX(UART_PIR, &PIR_data, 1);
 8000b56:	f107 030a 	add.w	r3, r7, #10
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	2008      	movs	r0, #8
 8000b60:	f7ff feee 	bl	8000940 <UART_Frame_TX>
            UART_TX_state_take = UART_TX_IDLE;
 8000b64:	2310      	movs	r3, #16
 8000b66:	73fb      	strb	r3, [r7, #15]
            break;
 8000b68:	e018      	b.n	8000b9c <Task_UART_TX+0x1e8>
        case UART_TX_LM_ON:
            LM_data = 1;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	727b      	strb	r3, [r7, #9]
            UART_Frame_TX(UART_PIR, &LM_data, 1);
 8000b6e:	f107 0309 	add.w	r3, r7, #9
 8000b72:	2201      	movs	r2, #1
 8000b74:	4619      	mov	r1, r3
 8000b76:	2008      	movs	r0, #8
 8000b78:	f7ff fee2 	bl	8000940 <UART_Frame_TX>
            UART_TX_state_take = UART_TX_IDLE;
 8000b7c:	2310      	movs	r3, #16
 8000b7e:	73fb      	strb	r3, [r7, #15]
            break;
 8000b80:	e00c      	b.n	8000b9c <Task_UART_TX+0x1e8>
        case UART_TX_LM_OFF:
            LM_data = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	727b      	strb	r3, [r7, #9]
            UART_Frame_TX(UART_PIR, &LM_data, 1);
 8000b86:	f107 0309 	add.w	r3, r7, #9
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	2008      	movs	r0, #8
 8000b90:	f7ff fed6 	bl	8000940 <UART_Frame_TX>
            UART_TX_state_take = UART_TX_IDLE;
 8000b94:	2310      	movs	r3, #16
 8000b96:	73fb      	strb	r3, [r7, #15]
            break;
 8000b98:	e000      	b.n	8000b9c <Task_UART_TX+0x1e8>
        default:
            break;
 8000b9a:	bf00      	nop
    {
 8000b9c:	e70e      	b.n	80009bc <Task_UART_TX+0x8>
 8000b9e:	bf00      	nop
 8000ba0:	08008834 	.word	0x08008834
 8000ba4:	200000c0 	.word	0x200000c0
 8000ba8:	200000b8 	.word	0x200000b8

08000bac <Task_TFT_Display>:
        }
    }
}

static void Task_TFT_Display( void *pvParameters )
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af02      	add	r7, sp, #8
 8000bb2:	6078      	str	r0, [r7, #4]
    DHT_data_t      TFT_DHT_data_take = {0};
 8000bb4:	4a5b      	ldr	r2, [pc, #364]	@ (8000d24 <Task_TFT_Display+0x178>)
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bbe:	6018      	str	r0, [r3, #0]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	7019      	strb	r1, [r3, #0]
    TFT_state_t     TFT_state_take = TFT_IDLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]

    while (1)
    {
        ulTaskNotifyTake(pdFALSE,portMAX_DELAY);
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f005 f9de 	bl	8005f90 <ulTaskGenericNotifyTake>
        
        xQueuePeek(queue_DHT_data, &TFT_DHT_data_take, 0);
 8000bd4:	4b54      	ldr	r3, [pc, #336]	@ (8000d28 <Task_TFT_Display+0x17c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f107 0110 	add.w	r1, r7, #16
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f004 f954 	bl	8004e8c <xQueuePeek>
        xQueueReceive(queue_TFT_state, &TFT_state_take, 0);
 8000be4:	4b51      	ldr	r3, [pc, #324]	@ (8000d2c <Task_TFT_Display+0x180>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f107 010f 	add.w	r1, r7, #15
 8000bec:	2200      	movs	r2, #0
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f004 f8aa 	bl	8004d48 <xQueueReceive>

        switch (TFT_state_take)
 8000bf4:	7bfb      	ldrb	r3, [r7, #15]
 8000bf6:	2b05      	cmp	r3, #5
 8000bf8:	f200 8091 	bhi.w	8000d1e <Task_TFT_Display+0x172>
 8000bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8000c04 <Task_TFT_Display+0x58>)
 8000bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c02:	bf00      	nop
 8000c04:	08000d1f 	.word	0x08000d1f
 8000c08:	08000c1d 	.word	0x08000c1d
 8000c0c:	08000c63 	.word	0x08000c63
 8000c10:	08000c93 	.word	0x08000c93
 8000c14:	08000cc3 	.word	0x08000cc3
 8000c18:	08000cf1 	.word	0x08000cf1
        {
        case TFT_IDLE:
            break;
        case TFT_DHT:
            ILI9341_ConfigPrint(FONT4, 100, 70, BLACK, WHITE);
 8000c1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	2300      	movs	r3, #0
 8000c24:	2246      	movs	r2, #70	@ 0x46
 8000c26:	2164      	movs	r1, #100	@ 0x64
 8000c28:	4841      	ldr	r0, [pc, #260]	@ (8000d30 <Task_TFT_Display+0x184>)
 8000c2a:	f006 f9ab 	bl	8006f84 <ILI9341_ConfigPrint>
            ILI9341_Print("%d.%d", TFT_DHT_data_take.DHT_data[0], TFT_DHT_data_take.DHT_data[1]);
 8000c2e:	7c3b      	ldrb	r3, [r7, #16]
 8000c30:	4619      	mov	r1, r3
 8000c32:	7c7b      	ldrb	r3, [r7, #17]
 8000c34:	461a      	mov	r2, r3
 8000c36:	483f      	ldr	r0, [pc, #252]	@ (8000d34 <Task_TFT_Display+0x188>)
 8000c38:	f006 fa9e 	bl	8007178 <ILI9341_Print>
            
            ILI9341_ConfigPrint(FONT4, 250, 70, BLACK, WHITE);
 8000c3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	2300      	movs	r3, #0
 8000c44:	2246      	movs	r2, #70	@ 0x46
 8000c46:	21fa      	movs	r1, #250	@ 0xfa
 8000c48:	4839      	ldr	r0, [pc, #228]	@ (8000d30 <Task_TFT_Display+0x184>)
 8000c4a:	f006 f99b 	bl	8006f84 <ILI9341_ConfigPrint>
            ILI9341_Print("%d.%d", TFT_DHT_data_take.DHT_data[2], TFT_DHT_data_take.DHT_data[3]);
 8000c4e:	7cbb      	ldrb	r3, [r7, #18]
 8000c50:	4619      	mov	r1, r3
 8000c52:	7cfb      	ldrb	r3, [r7, #19]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4837      	ldr	r0, [pc, #220]	@ (8000d34 <Task_TFT_Display+0x188>)
 8000c58:	f006 fa8e 	bl	8007178 <ILI9341_Print>
            TFT_state_take = TFT_IDLE;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73fb      	strb	r3, [r7, #15]
            break;
 8000c60:	e05e      	b.n	8000d20 <Task_TFT_Display+0x174>
        case TFT_PIR_ON:
            ILI9341_ConfigPrint(FONT4, 0, 38, WHITE, BLACK);
 8000c62:	2300      	movs	r3, #0
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c6a:	2226      	movs	r2, #38	@ 0x26
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4830      	ldr	r0, [pc, #192]	@ (8000d30 <Task_TFT_Display+0x184>)
 8000c70:	f006 f988 	bl	8006f84 <ILI9341_ConfigPrint>
            ILI9341_DrawRectangle(0, 38, 20*15, 20, BLACK);
 8000c74:	2300      	movs	r3, #0
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	2314      	movs	r3, #20
 8000c7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000c7e:	2126      	movs	r1, #38	@ 0x26
 8000c80:	2000      	movs	r0, #0
 8000c82:	f007 f815 	bl	8007cb0 <ILI9341_DrawRectangle>

            ILI9341_Print("Phong co nguoi");
 8000c86:	482c      	ldr	r0, [pc, #176]	@ (8000d38 <Task_TFT_Display+0x18c>)
 8000c88:	f006 fa76 	bl	8007178 <ILI9341_Print>

            TFT_state_take = TFT_IDLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	73fb      	strb	r3, [r7, #15]
            break;
 8000c90:	e046      	b.n	8000d20 <Task_TFT_Display+0x174>
        case TFT_PIR_OFF:
            ILI9341_ConfigPrint(FONT4, 0, 38, WHITE, BLACK);
 8000c92:	2300      	movs	r3, #0
 8000c94:	9300      	str	r3, [sp, #0]
 8000c96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c9a:	2226      	movs	r2, #38	@ 0x26
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4824      	ldr	r0, [pc, #144]	@ (8000d30 <Task_TFT_Display+0x184>)
 8000ca0:	f006 f970 	bl	8006f84 <ILI9341_ConfigPrint>
            ILI9341_DrawRectangle(0, 38, 20*15, 20, BLACK);
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	2314      	movs	r3, #20
 8000caa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000cae:	2126      	movs	r1, #38	@ 0x26
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f006 fffd 	bl	8007cb0 <ILI9341_DrawRectangle>

            ILI9341_Print("Phong khong co nguoi");
 8000cb6:	4821      	ldr	r0, [pc, #132]	@ (8000d3c <Task_TFT_Display+0x190>)
 8000cb8:	f006 fa5e 	bl	8007178 <ILI9341_Print>
            
            TFT_state_take = TFT_IDLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	73fb      	strb	r3, [r7, #15]
            break;
 8000cc0:	e02e      	b.n	8000d20 <Task_TFT_Display+0x174>
        case TFT_LM393_ON:
            ILI9341_ConfigPrint(FONT4, 0, 57, WHITE, BLACK);
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cca:	2239      	movs	r2, #57	@ 0x39
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4818      	ldr	r0, [pc, #96]	@ (8000d30 <Task_TFT_Display+0x184>)
 8000cd0:	f006 f958 	bl	8006f84 <ILI9341_ConfigPrint>
            ILI9341_DrawRectangle(0, 57, 10*15, 20, BLACK);
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	2314      	movs	r3, #20
 8000cda:	2296      	movs	r2, #150	@ 0x96
 8000cdc:	2139      	movs	r1, #57	@ 0x39
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f006 ffe6 	bl	8007cb0 <ILI9341_DrawRectangle>

            ILI9341_Print("Phong sang");
 8000ce4:	4816      	ldr	r0, [pc, #88]	@ (8000d40 <Task_TFT_Display+0x194>)
 8000ce6:	f006 fa47 	bl	8007178 <ILI9341_Print>

            TFT_state_take = TFT_IDLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	73fb      	strb	r3, [r7, #15]
            break;
 8000cee:	e017      	b.n	8000d20 <Task_TFT_Display+0x174>
        case TFT_LM393_OFF:
            ILI9341_ConfigPrint(FONT4, 0, 57, WHITE, BLACK);
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	9300      	str	r3, [sp, #0]
 8000cf4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cf8:	2239      	movs	r2, #57	@ 0x39
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	480c      	ldr	r0, [pc, #48]	@ (8000d30 <Task_TFT_Display+0x184>)
 8000cfe:	f006 f941 	bl	8006f84 <ILI9341_ConfigPrint>
            ILI9341_DrawRectangle(0, 57, 10*15, 20, BLACK);
 8000d02:	2300      	movs	r3, #0
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2314      	movs	r3, #20
 8000d08:	2296      	movs	r2, #150	@ 0x96
 8000d0a:	2139      	movs	r1, #57	@ 0x39
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f006 ffcf 	bl	8007cb0 <ILI9341_DrawRectangle>

            ILI9341_Print("Phong toi");
 8000d12:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <Task_TFT_Display+0x198>)
 8000d14:	f006 fa30 	bl	8007178 <ILI9341_Print>

            TFT_state_take = TFT_IDLE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	73fb      	strb	r3, [r7, #15]
            break;
 8000d1c:	e000      	b.n	8000d20 <Task_TFT_Display+0x174>
        default:
            break;
 8000d1e:	bf00      	nop
        ulTaskNotifyTake(pdFALSE,portMAX_DELAY);
 8000d20:	e752      	b.n	8000bc8 <Task_TFT_Display+0x1c>
 8000d22:	bf00      	nop
 8000d24:	08008834 	.word	0x08008834
 8000d28:	200000b8 	.word	0x200000b8
 8000d2c:	200000c4 	.word	0x200000c4
 8000d30:	080088f8 	.word	0x080088f8
 8000d34:	0800883c 	.word	0x0800883c
 8000d38:	08008844 	.word	0x08008844
 8000d3c:	08008854 	.word	0x08008854
 8000d40:	0800886c 	.word	0x0800886c
 8000d44:	08008878 	.word	0x08008878

08000d48 <Task_Relay_Humid_Fan>:
        }
    }
}

static void Task_Relay_Humid_Fan(void *pvParameters)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af02      	add	r7, sp, #8
 8000d4e:	6078      	str	r0, [r7, #4]
    while (1)
    {
        ulTaskNotifyTake(pdFALSE,portMAX_DELAY);
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	2100      	movs	r1, #0
 8000d56:	2000      	movs	r0, #0
 8000d58:	f005 f91a 	bl	8005f90 <ulTaskGenericNotifyTake>

        UART_TX_state_t    UART_TX_state_3_give     = UART_TX_IDLE;
 8000d5c:	2310      	movs	r3, #16
 8000d5e:	75fb      	strb	r3, [r7, #23]
        UART_TX_state_t    UART_TX_state_4_give     = UART_TX_IDLE;
 8000d60:	2310      	movs	r3, #16
 8000d62:	75bb      	strb	r3, [r7, #22]
        UART_TX_state_t    UART_TX_state_auto_give  = UART_TX_IDLE;
 8000d64:	2310      	movs	r3, #16
 8000d66:	757b      	strb	r3, [r7, #21]

        DHT_data_t relay_humid_fan_DHT_data_take = {0};
 8000d68:	4ab1      	ldr	r2, [pc, #708]	@ (8001030 <Task_Relay_Humid_Fan+0x2e8>)
 8000d6a:	f107 0310 	add.w	r3, r7, #16
 8000d6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d72:	6018      	str	r0, [r3, #0]
 8000d74:	3304      	adds	r3, #4
 8000d76:	7019      	strb	r1, [r3, #0]
        xQueueReceive(queue_DHT_data, &relay_humid_fan_DHT_data_take, 0);
 8000d78:	4bae      	ldr	r3, [pc, #696]	@ (8001034 <Task_Relay_Humid_Fan+0x2ec>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f107 0110 	add.w	r1, r7, #16
 8000d80:	2200      	movs	r2, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f003 ffe0 	bl	8004d48 <xQueueReceive>

        relay_humid_fan_data_t relay_hummid_fan_button_data_take = RELAY_HUMID_FAN_BUTTON_NULL;
 8000d88:	2306      	movs	r3, #6
 8000d8a:	73fb      	strb	r3, [r7, #15]
        xQueueReceive(queue_relay_humid_fan_data, &relay_hummid_fan_button_data_take, 0);
 8000d8c:	4baa      	ldr	r3, [pc, #680]	@ (8001038 <Task_Relay_Humid_Fan+0x2f0>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f107 010f 	add.w	r1, r7, #15
 8000d94:	2200      	movs	r2, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f003 ffd6 	bl	8004d48 <xQueueReceive>

        switch (relay_humid_state)
 8000d9c:	4ba7      	ldr	r3, [pc, #668]	@ (800103c <Task_Relay_Humid_Fan+0x2f4>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b03      	cmp	r3, #3
 8000da2:	f200 809b 	bhi.w	8000edc <Task_Relay_Humid_Fan+0x194>
 8000da6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dac <Task_Relay_Humid_Fan+0x64>)
 8000da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dac:	08000e91 	.word	0x08000e91
 8000db0:	08000e5d 	.word	0x08000e5d
 8000db4:	08000dbd 	.word	0x08000dbd
 8000db8:	08000e11 	.word	0x08000e11
        {
        case RELAY_HUMID_OFF_AUTO:
            //if (relay_humid_fan_DHT_data_take.DHT_data[0] > 75)
            if (relay_humid_fan_DHT_data_take.DHT_data[0] > 75)
 8000dbc:	7c3b      	ldrb	r3, [r7, #16]
 8000dbe:	2b4b      	cmp	r3, #75	@ 0x4b
 8000dc0:	d90a      	bls.n	8000dd8 <Task_Relay_Humid_Fan+0x90>
            {
                relay_humid_state = RELAY_HUMID_ON_COMPARE;
 8000dc2:	4b9e      	ldr	r3, [pc, #632]	@ (800103c <Task_Relay_Humid_Fan+0x2f4>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_3_PORT, RELAY_3_PIN, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2140      	movs	r1, #64	@ 0x40
 8000dcc:	489c      	ldr	r0, [pc, #624]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 8000dce:	f001 fb74 	bl	80024ba <HAL_GPIO_WritePin>
                UART_TX_state_3_give = UART_TX_RELAY_3_ON;
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	75fb      	strb	r3, [r7, #23]
            else if (relay_hummid_fan_button_data_take == RELAY_HUMID_FAN_5_HAND)
            {
                relay_humid_state = RELAY_HUMID_OFF_HAND;
                HAL_GPIO_WritePin(RELAY_3_PORT, RELAY_3_PIN, GPIO_PIN_SET);
            }
            break;
 8000dd6:	e083      	b.n	8000ee0 <Task_Relay_Humid_Fan+0x198>
            else if (relay_hummid_fan_button_data_take == BUTTON_3_PRESSED)
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d10c      	bne.n	8000df8 <Task_Relay_Humid_Fan+0xb0>
                relay_humid_state = RELAY_HUMID_ON_BUTTON;
 8000dde:	4b97      	ldr	r3, [pc, #604]	@ (800103c <Task_Relay_Humid_Fan+0x2f4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_3_PORT, RELAY_3_PIN, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2140      	movs	r1, #64	@ 0x40
 8000de8:	4895      	ldr	r0, [pc, #596]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 8000dea:	f001 fb66 	bl	80024ba <HAL_GPIO_WritePin>
                UART_TX_state_3_give = UART_TX_RELAY_3_ON;
 8000dee:	2304      	movs	r3, #4
 8000df0:	75fb      	strb	r3, [r7, #23]
                UART_TX_state_auto_give = UART_TX_AUTO_OFF;
 8000df2:	230f      	movs	r3, #15
 8000df4:	757b      	strb	r3, [r7, #21]
            break;
 8000df6:	e073      	b.n	8000ee0 <Task_Relay_Humid_Fan+0x198>
            else if (relay_hummid_fan_button_data_take == RELAY_HUMID_FAN_5_HAND)
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	2b05      	cmp	r3, #5
 8000dfc:	d170      	bne.n	8000ee0 <Task_Relay_Humid_Fan+0x198>
                relay_humid_state = RELAY_HUMID_OFF_HAND;
 8000dfe:	4b8f      	ldr	r3, [pc, #572]	@ (800103c <Task_Relay_Humid_Fan+0x2f4>)
 8000e00:	2203      	movs	r2, #3
 8000e02:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_3_PORT, RELAY_3_PIN, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2140      	movs	r1, #64	@ 0x40
 8000e08:	488d      	ldr	r0, [pc, #564]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 8000e0a:	f001 fb56 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 8000e0e:	e067      	b.n	8000ee0 <Task_Relay_Humid_Fan+0x198>
        case RELAY_HUMID_OFF_HAND:
            if (relay_hummid_fan_button_data_take == BUTTON_3_PRESSED)
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10a      	bne.n	8000e2c <Task_Relay_Humid_Fan+0xe4>
            {
                relay_humid_state = RELAY_HUMID_ON_BUTTON;
 8000e16:	4b89      	ldr	r3, [pc, #548]	@ (800103c <Task_Relay_Humid_Fan+0x2f4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_3_PORT, RELAY_3_PIN, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2140      	movs	r1, #64	@ 0x40
 8000e20:	4887      	ldr	r0, [pc, #540]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 8000e22:	f001 fb4a 	bl	80024ba <HAL_GPIO_WritePin>
                UART_TX_state_3_give = UART_TX_RELAY_3_ON;
 8000e26:	2304      	movs	r3, #4
 8000e28:	75fb      	strb	r3, [r7, #23]
            else if (relay_hummid_fan_button_data_take == RELAY_HUMID_FAN_5_AUTO)
            {
                relay_humid_state = RELAY_HUMID_OFF_AUTO;
                HAL_GPIO_WritePin(RELAY_3_PORT, RELAY_3_PIN, GPIO_PIN_SET);
            }
            break;
 8000e2a:	e05b      	b.n	8000ee4 <Task_Relay_Humid_Fan+0x19c>
            else if (relay_hummid_fan_button_data_take == WEB_BUTTON_3_PRESSED)
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d108      	bne.n	8000e44 <Task_Relay_Humid_Fan+0xfc>
                relay_humid_state = RELAY_HUMID_ON_BUTTON;
 8000e32:	4b82      	ldr	r3, [pc, #520]	@ (800103c <Task_Relay_Humid_Fan+0x2f4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_3_PORT, RELAY_3_PIN, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2140      	movs	r1, #64	@ 0x40
 8000e3c:	4880      	ldr	r0, [pc, #512]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 8000e3e:	f001 fb3c 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 8000e42:	e04f      	b.n	8000ee4 <Task_Relay_Humid_Fan+0x19c>
            else if (relay_hummid_fan_button_data_take == RELAY_HUMID_FAN_5_AUTO)
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	d14c      	bne.n	8000ee4 <Task_Relay_Humid_Fan+0x19c>
                relay_humid_state = RELAY_HUMID_OFF_AUTO;
 8000e4a:	4b7c      	ldr	r3, [pc, #496]	@ (800103c <Task_Relay_Humid_Fan+0x2f4>)
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_3_PORT, RELAY_3_PIN, GPIO_PIN_SET);
 8000e50:	2201      	movs	r2, #1
 8000e52:	2140      	movs	r1, #64	@ 0x40
 8000e54:	487a      	ldr	r0, [pc, #488]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 8000e56:	f001 fb30 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 8000e5a:	e043      	b.n	8000ee4 <Task_Relay_Humid_Fan+0x19c>
        case RELAY_HUMID_ON_COMPARE:
            if (relay_humid_fan_DHT_data_take.DHT_data[0] <= 75)
 8000e5c:	7c3b      	ldrb	r3, [r7, #16]
 8000e5e:	2b4b      	cmp	r3, #75	@ 0x4b
 8000e60:	d80a      	bhi.n	8000e78 <Task_Relay_Humid_Fan+0x130>
            {
                relay_humid_state = RELAY_HUMID_OFF_AUTO;
 8000e62:	4b76      	ldr	r3, [pc, #472]	@ (800103c <Task_Relay_Humid_Fan+0x2f4>)
 8000e64:	2202      	movs	r2, #2
 8000e66:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_3_PORT, RELAY_3_PIN, GPIO_PIN_SET);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	2140      	movs	r1, #64	@ 0x40
 8000e6c:	4874      	ldr	r0, [pc, #464]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 8000e6e:	f001 fb24 	bl	80024ba <HAL_GPIO_WritePin>
                UART_TX_state_3_give = UART_TX_RELAY_3_OFF;
 8000e72:	2305      	movs	r3, #5
 8000e74:	75fb      	strb	r3, [r7, #23]
            else if (relay_hummid_fan_button_data_take == RELAY_HUMID_FAN_5_HAND)
            {
                relay_humid_state = RELAY_HUMID_OFF_HAND;
                HAL_GPIO_WritePin(RELAY_3_PORT, RELAY_3_PIN, GPIO_PIN_SET);
            }
            break;
 8000e76:	e037      	b.n	8000ee8 <Task_Relay_Humid_Fan+0x1a0>
            else if (relay_hummid_fan_button_data_take == RELAY_HUMID_FAN_5_HAND)
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	2b05      	cmp	r3, #5
 8000e7c:	d134      	bne.n	8000ee8 <Task_Relay_Humid_Fan+0x1a0>
                relay_humid_state = RELAY_HUMID_OFF_HAND;
 8000e7e:	4b6f      	ldr	r3, [pc, #444]	@ (800103c <Task_Relay_Humid_Fan+0x2f4>)
 8000e80:	2203      	movs	r2, #3
 8000e82:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_3_PORT, RELAY_3_PIN, GPIO_PIN_SET);
 8000e84:	2201      	movs	r2, #1
 8000e86:	2140      	movs	r1, #64	@ 0x40
 8000e88:	486d      	ldr	r0, [pc, #436]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 8000e8a:	f001 fb16 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 8000e8e:	e02b      	b.n	8000ee8 <Task_Relay_Humid_Fan+0x1a0>
        case RELAY_HUMID_ON_BUTTON:
            if (relay_hummid_fan_button_data_take == BUTTON_3_PRESSED)
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d10a      	bne.n	8000eac <Task_Relay_Humid_Fan+0x164>
            {
                relay_humid_state = RELAY_HUMID_OFF_HAND;
 8000e96:	4b69      	ldr	r3, [pc, #420]	@ (800103c <Task_Relay_Humid_Fan+0x2f4>)
 8000e98:	2203      	movs	r2, #3
 8000e9a:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_3_PORT, RELAY_3_PIN, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	2140      	movs	r1, #64	@ 0x40
 8000ea0:	4867      	ldr	r0, [pc, #412]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 8000ea2:	f001 fb0a 	bl	80024ba <HAL_GPIO_WritePin>
                UART_TX_state_3_give = UART_TX_RELAY_3_OFF;
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	75fb      	strb	r3, [r7, #23]
            else if (relay_hummid_fan_button_data_take == RELAY_HUMID_FAN_5_AUTO)
            {
                relay_humid_state = RELAY_HUMID_OFF_AUTO;
                HAL_GPIO_WritePin(RELAY_3_PORT, RELAY_3_PIN, GPIO_PIN_SET);
            }
            break;
 8000eaa:	e01f      	b.n	8000eec <Task_Relay_Humid_Fan+0x1a4>
            else if (relay_hummid_fan_button_data_take == WEB_BUTTON_3_PRESSED)
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	2b02      	cmp	r3, #2
 8000eb0:	d108      	bne.n	8000ec4 <Task_Relay_Humid_Fan+0x17c>
                relay_humid_state = RELAY_HUMID_OFF_HAND;
 8000eb2:	4b62      	ldr	r3, [pc, #392]	@ (800103c <Task_Relay_Humid_Fan+0x2f4>)
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_3_PORT, RELAY_3_PIN, GPIO_PIN_SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2140      	movs	r1, #64	@ 0x40
 8000ebc:	4860      	ldr	r0, [pc, #384]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 8000ebe:	f001 fafc 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 8000ec2:	e013      	b.n	8000eec <Task_Relay_Humid_Fan+0x1a4>
            else if (relay_hummid_fan_button_data_take == RELAY_HUMID_FAN_5_AUTO)
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	d110      	bne.n	8000eec <Task_Relay_Humid_Fan+0x1a4>
                relay_humid_state = RELAY_HUMID_OFF_AUTO;
 8000eca:	4b5c      	ldr	r3, [pc, #368]	@ (800103c <Task_Relay_Humid_Fan+0x2f4>)
 8000ecc:	2202      	movs	r2, #2
 8000ece:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_3_PORT, RELAY_3_PIN, GPIO_PIN_SET);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	2140      	movs	r1, #64	@ 0x40
 8000ed4:	485a      	ldr	r0, [pc, #360]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 8000ed6:	f001 faf0 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 8000eda:	e007      	b.n	8000eec <Task_Relay_Humid_Fan+0x1a4>
        default:
            break;
 8000edc:	bf00      	nop
 8000ede:	e006      	b.n	8000eee <Task_Relay_Humid_Fan+0x1a6>
            break;
 8000ee0:	bf00      	nop
 8000ee2:	e004      	b.n	8000eee <Task_Relay_Humid_Fan+0x1a6>
            break;
 8000ee4:	bf00      	nop
 8000ee6:	e002      	b.n	8000eee <Task_Relay_Humid_Fan+0x1a6>
            break;
 8000ee8:	bf00      	nop
 8000eea:	e000      	b.n	8000eee <Task_Relay_Humid_Fan+0x1a6>
            break;
 8000eec:	bf00      	nop
        }

        switch (relay_fan_state)
 8000eee:	4b55      	ldr	r3, [pc, #340]	@ (8001044 <Task_Relay_Humid_Fan+0x2fc>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	3b04      	subs	r3, #4
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	f200 80a7 	bhi.w	8001048 <Task_Relay_Humid_Fan+0x300>
 8000efa:	a201      	add	r2, pc, #4	@ (adr r2, 8000f00 <Task_Relay_Humid_Fan+0x1b8>)
 8000efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f00:	08000fe5 	.word	0x08000fe5
 8000f04:	08000fb1 	.word	0x08000fb1
 8000f08:	08000f11 	.word	0x08000f11
 8000f0c:	08000f65 	.word	0x08000f65
        {
        case RELAY_FAN_OFF_AUTO:
            //if (relay_humid_fan_DHT_data_take.DHT_data[2] > 60)
            if (relay_humid_fan_DHT_data_take.DHT_data[2] > 32)
 8000f10:	7cbb      	ldrb	r3, [r7, #18]
 8000f12:	2b20      	cmp	r3, #32
 8000f14:	d90a      	bls.n	8000f2c <Task_Relay_Humid_Fan+0x1e4>
            {
                relay_fan_state = RELAY_FAN_ON_COMPARE;
 8000f16:	4b4b      	ldr	r3, [pc, #300]	@ (8001044 <Task_Relay_Humid_Fan+0x2fc>)
 8000f18:	2205      	movs	r2, #5
 8000f1a:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_4_PORT, RELAY_4_PIN, GPIO_PIN_RESET);
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	2180      	movs	r1, #128	@ 0x80
 8000f20:	4847      	ldr	r0, [pc, #284]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 8000f22:	f001 faca 	bl	80024ba <HAL_GPIO_WritePin>
                UART_TX_state_4_give = UART_TX_RELAY_4_ON;
 8000f26:	2306      	movs	r3, #6
 8000f28:	75bb      	strb	r3, [r7, #22]
            else if (relay_hummid_fan_button_data_take == RELAY_HUMID_FAN_5_HAND)
            {
                relay_fan_state = RELAY_FAN_OFF_HAND;
                HAL_GPIO_WritePin(RELAY_4_PORT, RELAY_4_PIN, GPIO_PIN_SET);
            }
            break;
 8000f2a:	e08f      	b.n	800104c <Task_Relay_Humid_Fan+0x304>
            else if (relay_hummid_fan_button_data_take == BUTTON_4_PRESSED)
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d10c      	bne.n	8000f4c <Task_Relay_Humid_Fan+0x204>
                relay_fan_state = RELAY_FAN_ON_BUTTON;
 8000f32:	4b44      	ldr	r3, [pc, #272]	@ (8001044 <Task_Relay_Humid_Fan+0x2fc>)
 8000f34:	2204      	movs	r2, #4
 8000f36:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_4_PORT, RELAY_4_PIN, GPIO_PIN_RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2180      	movs	r1, #128	@ 0x80
 8000f3c:	4840      	ldr	r0, [pc, #256]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 8000f3e:	f001 fabc 	bl	80024ba <HAL_GPIO_WritePin>
                UART_TX_state_4_give = UART_TX_RELAY_4_ON;
 8000f42:	2306      	movs	r3, #6
 8000f44:	75bb      	strb	r3, [r7, #22]
                UART_TX_state_auto_give = UART_TX_AUTO_OFF;
 8000f46:	230f      	movs	r3, #15
 8000f48:	757b      	strb	r3, [r7, #21]
            break;
 8000f4a:	e07f      	b.n	800104c <Task_Relay_Humid_Fan+0x304>
            else if (relay_hummid_fan_button_data_take == RELAY_HUMID_FAN_5_HAND)
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	2b05      	cmp	r3, #5
 8000f50:	d17c      	bne.n	800104c <Task_Relay_Humid_Fan+0x304>
                relay_fan_state = RELAY_FAN_OFF_HAND;
 8000f52:	4b3c      	ldr	r3, [pc, #240]	@ (8001044 <Task_Relay_Humid_Fan+0x2fc>)
 8000f54:	2207      	movs	r2, #7
 8000f56:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_4_PORT, RELAY_4_PIN, GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2180      	movs	r1, #128	@ 0x80
 8000f5c:	4838      	ldr	r0, [pc, #224]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 8000f5e:	f001 faac 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 8000f62:	e073      	b.n	800104c <Task_Relay_Humid_Fan+0x304>
        case RELAY_FAN_OFF_HAND:
            if (relay_hummid_fan_button_data_take == BUTTON_4_PRESSED)
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d10a      	bne.n	8000f80 <Task_Relay_Humid_Fan+0x238>
            {
                relay_fan_state = RELAY_FAN_ON_BUTTON;
 8000f6a:	4b36      	ldr	r3, [pc, #216]	@ (8001044 <Task_Relay_Humid_Fan+0x2fc>)
 8000f6c:	2204      	movs	r2, #4
 8000f6e:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_4_PORT, RELAY_4_PIN, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2180      	movs	r1, #128	@ 0x80
 8000f74:	4832      	ldr	r0, [pc, #200]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 8000f76:	f001 faa0 	bl	80024ba <HAL_GPIO_WritePin>
                UART_TX_state_4_give = UART_TX_RELAY_4_ON;
 8000f7a:	2306      	movs	r3, #6
 8000f7c:	75bb      	strb	r3, [r7, #22]
            else if (relay_hummid_fan_button_data_take == RELAY_HUMID_FAN_5_AUTO)
            {
                relay_fan_state = RELAY_FAN_OFF_AUTO;
                HAL_GPIO_WritePin(RELAY_4_PORT, RELAY_4_PIN, GPIO_PIN_SET);
            }
            break;
 8000f7e:	e067      	b.n	8001050 <Task_Relay_Humid_Fan+0x308>
            else if (relay_hummid_fan_button_data_take == WEB_BUTTON_4_PRESSED)
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d108      	bne.n	8000f98 <Task_Relay_Humid_Fan+0x250>
                relay_fan_state = RELAY_FAN_ON_BUTTON;
 8000f86:	4b2f      	ldr	r3, [pc, #188]	@ (8001044 <Task_Relay_Humid_Fan+0x2fc>)
 8000f88:	2204      	movs	r2, #4
 8000f8a:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_4_PORT, RELAY_4_PIN, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2180      	movs	r1, #128	@ 0x80
 8000f90:	482b      	ldr	r0, [pc, #172]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 8000f92:	f001 fa92 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 8000f96:	e05b      	b.n	8001050 <Task_Relay_Humid_Fan+0x308>
            else if (relay_hummid_fan_button_data_take == RELAY_HUMID_FAN_5_AUTO)
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	d158      	bne.n	8001050 <Task_Relay_Humid_Fan+0x308>
                relay_fan_state = RELAY_FAN_OFF_AUTO;
 8000f9e:	4b29      	ldr	r3, [pc, #164]	@ (8001044 <Task_Relay_Humid_Fan+0x2fc>)
 8000fa0:	2206      	movs	r2, #6
 8000fa2:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_4_PORT, RELAY_4_PIN, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	2180      	movs	r1, #128	@ 0x80
 8000fa8:	4825      	ldr	r0, [pc, #148]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 8000faa:	f001 fa86 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 8000fae:	e04f      	b.n	8001050 <Task_Relay_Humid_Fan+0x308>
        case RELAY_FAN_ON_COMPARE:
            if (relay_humid_fan_DHT_data_take.DHT_data[2] <= 32)
 8000fb0:	7cbb      	ldrb	r3, [r7, #18]
 8000fb2:	2b20      	cmp	r3, #32
 8000fb4:	d80a      	bhi.n	8000fcc <Task_Relay_Humid_Fan+0x284>
            {
                relay_fan_state = RELAY_FAN_OFF_AUTO;
 8000fb6:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <Task_Relay_Humid_Fan+0x2fc>)
 8000fb8:	2206      	movs	r2, #6
 8000fba:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_4_PORT, RELAY_4_PIN, GPIO_PIN_SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2180      	movs	r1, #128	@ 0x80
 8000fc0:	481f      	ldr	r0, [pc, #124]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 8000fc2:	f001 fa7a 	bl	80024ba <HAL_GPIO_WritePin>
                UART_TX_state_4_give = UART_TX_RELAY_4_OFF;
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	75bb      	strb	r3, [r7, #22]
            else if (relay_hummid_fan_button_data_take == RELAY_HUMID_FAN_5_HAND)
            {
                relay_fan_state = RELAY_FAN_OFF_HAND;
                HAL_GPIO_WritePin(RELAY_4_PORT, RELAY_4_PIN, GPIO_PIN_SET);
            }
            break;
 8000fca:	e043      	b.n	8001054 <Task_Relay_Humid_Fan+0x30c>
            else if (relay_hummid_fan_button_data_take == RELAY_HUMID_FAN_5_HAND)
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	2b05      	cmp	r3, #5
 8000fd0:	d140      	bne.n	8001054 <Task_Relay_Humid_Fan+0x30c>
                relay_fan_state = RELAY_FAN_OFF_HAND;
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <Task_Relay_Humid_Fan+0x2fc>)
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_4_PORT, RELAY_4_PIN, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2180      	movs	r1, #128	@ 0x80
 8000fdc:	4818      	ldr	r0, [pc, #96]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 8000fde:	f001 fa6c 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 8000fe2:	e037      	b.n	8001054 <Task_Relay_Humid_Fan+0x30c>
        case RELAY_FAN_ON_BUTTON:
            if (relay_hummid_fan_button_data_take == BUTTON_4_PRESSED)
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d10a      	bne.n	8001000 <Task_Relay_Humid_Fan+0x2b8>
            {
                relay_fan_state = RELAY_FAN_OFF_HAND;
 8000fea:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <Task_Relay_Humid_Fan+0x2fc>)
 8000fec:	2207      	movs	r2, #7
 8000fee:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_4_PORT, RELAY_4_PIN, GPIO_PIN_SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2180      	movs	r1, #128	@ 0x80
 8000ff4:	4812      	ldr	r0, [pc, #72]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 8000ff6:	f001 fa60 	bl	80024ba <HAL_GPIO_WritePin>
                UART_TX_state_4_give = UART_TX_RELAY_4_OFF;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	75bb      	strb	r3, [r7, #22]
            else if (relay_hummid_fan_button_data_take == RELAY_HUMID_FAN_5_AUTO)
            {
                relay_fan_state = RELAY_FAN_OFF_AUTO;
                HAL_GPIO_WritePin(RELAY_4_PORT, RELAY_4_PIN, GPIO_PIN_SET);
            }
            break;
 8000ffe:	e02b      	b.n	8001058 <Task_Relay_Humid_Fan+0x310>
            else if (relay_hummid_fan_button_data_take == WEB_BUTTON_4_PRESSED)
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	2b03      	cmp	r3, #3
 8001004:	d108      	bne.n	8001018 <Task_Relay_Humid_Fan+0x2d0>
                relay_fan_state = RELAY_FAN_OFF_HAND;
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <Task_Relay_Humid_Fan+0x2fc>)
 8001008:	2207      	movs	r2, #7
 800100a:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_4_PORT, RELAY_4_PIN, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2180      	movs	r1, #128	@ 0x80
 8001010:	480b      	ldr	r0, [pc, #44]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 8001012:	f001 fa52 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 8001016:	e01f      	b.n	8001058 <Task_Relay_Humid_Fan+0x310>
            else if (relay_hummid_fan_button_data_take == RELAY_HUMID_FAN_5_AUTO)
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	2b04      	cmp	r3, #4
 800101c:	d11c      	bne.n	8001058 <Task_Relay_Humid_Fan+0x310>
                relay_fan_state = RELAY_FAN_OFF_AUTO;
 800101e:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <Task_Relay_Humid_Fan+0x2fc>)
 8001020:	2206      	movs	r2, #6
 8001022:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(RELAY_4_PORT, RELAY_4_PIN, GPIO_PIN_SET);
 8001024:	2201      	movs	r2, #1
 8001026:	2180      	movs	r1, #128	@ 0x80
 8001028:	4805      	ldr	r0, [pc, #20]	@ (8001040 <Task_Relay_Humid_Fan+0x2f8>)
 800102a:	f001 fa46 	bl	80024ba <HAL_GPIO_WritePin>
            break;
 800102e:	e013      	b.n	8001058 <Task_Relay_Humid_Fan+0x310>
 8001030:	08008834 	.word	0x08008834
 8001034:	200000b8 	.word	0x200000b8
 8001038:	200000bc 	.word	0x200000bc
 800103c:	20000002 	.word	0x20000002
 8001040:	40010800 	.word	0x40010800
 8001044:	20000003 	.word	0x20000003
        default:
            break;
 8001048:	bf00      	nop
 800104a:	e006      	b.n	800105a <Task_Relay_Humid_Fan+0x312>
            break;
 800104c:	bf00      	nop
 800104e:	e004      	b.n	800105a <Task_Relay_Humid_Fan+0x312>
            break;
 8001050:	bf00      	nop
 8001052:	e002      	b.n	800105a <Task_Relay_Humid_Fan+0x312>
            break;
 8001054:	bf00      	nop
 8001056:	e000      	b.n	800105a <Task_Relay_Humid_Fan+0x312>
            break;
 8001058:	bf00      	nop
        }

        xQueueSend(queue_UART_TX_state, &UART_TX_state_3_give, 0);
 800105a:	4b1a      	ldr	r3, [pc, #104]	@ (80010c4 <Task_Relay_Humid_Fan+0x37c>)
 800105c:	6818      	ldr	r0, [r3, #0]
 800105e:	f107 0117 	add.w	r1, r7, #23
 8001062:	2300      	movs	r3, #0
 8001064:	2200      	movs	r2, #0
 8001066:	f003 fd5f 	bl	8004b28 <xQueueGenericSend>
        xQueueSend(queue_UART_TX_state, &UART_TX_state_4_give, 0);
 800106a:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <Task_Relay_Humid_Fan+0x37c>)
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	f107 0116 	add.w	r1, r7, #22
 8001072:	2300      	movs	r3, #0
 8001074:	2200      	movs	r2, #0
 8001076:	f003 fd57 	bl	8004b28 <xQueueGenericSend>
        xQueueSend(queue_UART_TX_state, &UART_TX_state_auto_give, 0);
 800107a:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <Task_Relay_Humid_Fan+0x37c>)
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	f107 0115 	add.w	r1, r7, #21
 8001082:	2300      	movs	r3, #0
 8001084:	2200      	movs	r2, #0
 8001086:	f003 fd4f 	bl	8004b28 <xQueueGenericSend>
        xTaskNotifyGive(Task_UART_TX_Handle);
 800108a:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <Task_Relay_Humid_Fan+0x380>)
 800108c:	6818      	ldr	r0, [r3, #0]
 800108e:	2300      	movs	r3, #0
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2302      	movs	r3, #2
 8001094:	2200      	movs	r2, #0
 8001096:	2100      	movs	r1, #0
 8001098:	f004 ffe6 	bl	8006068 <xTaskGenericNotify>
        xTaskNotifyGive(Task_UART_TX_Handle);
 800109c:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <Task_Relay_Humid_Fan+0x380>)
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	2300      	movs	r3, #0
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2302      	movs	r3, #2
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	f004 ffdd 	bl	8006068 <xTaskGenericNotify>
        xTaskNotifyGive(Task_UART_TX_Handle);
 80010ae:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <Task_Relay_Humid_Fan+0x380>)
 80010b0:	6818      	ldr	r0, [r3, #0]
 80010b2:	2300      	movs	r3, #0
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2302      	movs	r3, #2
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	f004 ffd4 	bl	8006068 <xTaskGenericNotify>
    {
 80010c0:	e646      	b.n	8000d50 <Task_Relay_Humid_Fan+0x8>
 80010c2:	bf00      	nop
 80010c4:	200000c0 	.word	0x200000c0
 80010c8:	200000d0 	.word	0x200000d0

080010cc <Task_DHT_Get_Data>:
    }
}

static void Task_DHT_Get_Data(void *pvParameters)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	6078      	str	r0, [r7, #4]
    UART_TX_state_t     UART_TX_state_give  = UART_TX_DHT;
 80010d4:	230a      	movs	r3, #10
 80010d6:	73fb      	strb	r3, [r7, #15]
    TFT_state_t         TFT_state_give      = TFT_DHT;
 80010d8:	2301      	movs	r3, #1
 80010da:	73bb      	strb	r3, [r7, #14]

    while (1)
    {
        //taskENTER_CRITICAL();
        DHT_data_t DHT_data_give = {0};
 80010dc:	4a26      	ldr	r2, [pc, #152]	@ (8001178 <Task_DHT_Get_Data+0xac>)
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010e6:	6018      	str	r0, [r3, #0]
 80010e8:	3304      	adds	r3, #4
 80010ea:	7019      	strb	r1, [r3, #0]
        dht_get_data(DHT_data_give.DHT_data);
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	4618      	mov	r0, r3
 80010f2:	f005 fe31 	bl	8006d58 <dht_get_data>
        //taskEXIT_CRITICAL();

        if (DHT_data_give.DHT_data[4] == DHT_OK)
 80010f6:	7b3b      	ldrb	r3, [r7, #12]
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d137      	bne.n	800116c <Task_DHT_Get_Data+0xa0>
        {
            xQueueSend(queue_DHT_data, &DHT_data_give, 0);
 80010fc:	4b1f      	ldr	r3, [pc, #124]	@ (800117c <Task_DHT_Get_Data+0xb0>)
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	f107 0108 	add.w	r1, r7, #8
 8001104:	2300      	movs	r3, #0
 8001106:	2200      	movs	r2, #0
 8001108:	f003 fd0e 	bl	8004b28 <xQueueGenericSend>
            xQueueSend(queue_UART_TX_state, &UART_TX_state_give, 0);
 800110c:	4b1c      	ldr	r3, [pc, #112]	@ (8001180 <Task_DHT_Get_Data+0xb4>)
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	f107 010f 	add.w	r1, r7, #15
 8001114:	2300      	movs	r3, #0
 8001116:	2200      	movs	r2, #0
 8001118:	f003 fd06 	bl	8004b28 <xQueueGenericSend>
            xQueueSend(queue_TFT_state, &TFT_state_give, 0);
 800111c:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <Task_DHT_Get_Data+0xb8>)
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	f107 010e 	add.w	r1, r7, #14
 8001124:	2300      	movs	r3, #0
 8001126:	2200      	movs	r2, #0
 8001128:	f003 fcfe 	bl	8004b28 <xQueueGenericSend>
            xTaskNotifyGive(Task_UART_TX_Handle);
 800112c:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <Task_DHT_Get_Data+0xbc>)
 800112e:	6818      	ldr	r0, [r3, #0]
 8001130:	2300      	movs	r3, #0
 8001132:	9300      	str	r3, [sp, #0]
 8001134:	2302      	movs	r3, #2
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	f004 ff95 	bl	8006068 <xTaskGenericNotify>
            xTaskNotifyGive(Task_TFT_Display_Handle);
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <Task_DHT_Get_Data+0xc0>)
 8001140:	6818      	ldr	r0, [r3, #0]
 8001142:	2300      	movs	r3, #0
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	2302      	movs	r3, #2
 8001148:	2200      	movs	r2, #0
 800114a:	2100      	movs	r1, #0
 800114c:	f004 ff8c 	bl	8006068 <xTaskGenericNotify>
            xTaskNotifyGive(Task_Relay_Humid_Fan_Handle);
 8001150:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <Task_DHT_Get_Data+0xc4>)
 8001152:	6818      	ldr	r0, [r3, #0]
 8001154:	2300      	movs	r3, #0
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2302      	movs	r3, #2
 800115a:	2200      	movs	r2, #0
 800115c:	2100      	movs	r1, #0
 800115e:	f004 ff83 	bl	8006068 <xTaskGenericNotify>
            vTaskDelay(10000);
 8001162:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001166:	f004 f9a1 	bl	80054ac <vTaskDelay>
 800116a:	e7b7      	b.n	80010dc <Task_DHT_Get_Data+0x10>
        }
        else
        {
            vTaskDelay(10000);
 800116c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001170:	f004 f99c 	bl	80054ac <vTaskDelay>
    {
 8001174:	e7b2      	b.n	80010dc <Task_DHT_Get_Data+0x10>
 8001176:	bf00      	nop
 8001178:	08008834 	.word	0x08008834
 800117c:	200000b8 	.word	0x200000b8
 8001180:	200000c0 	.word	0x200000c0
 8001184:	200000c4 	.word	0x200000c4
 8001188:	200000d0 	.word	0x200000d0
 800118c:	200000d4 	.word	0x200000d4
 8001190:	200000d8 	.word	0x200000d8

08001194 <HAL_GPIO_EXTI_Callback>:
        }
    }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	80fb      	strh	r3, [r7, #6]
    relay_light_data_t          relay_light_data_exti_give = RELAY_LIGHT_DATA_NULL;
 800119e:	230b      	movs	r3, #11
 80011a0:	73fb      	strb	r3, [r7, #15]
    relay_humid_fan_data_t      relay_humid_fan_data_exti_give = RELAY_HUMID_FAN_BUTTON_NULL;
 80011a2:	2306      	movs	r3, #6
 80011a4:	73bb      	strb	r3, [r7, #14]

    UART_TX_state_t             UART_TX_state_give = UART_TX_IDLE;
 80011a6:	2310      	movs	r3, #16
 80011a8:	737b      	strb	r3, [r7, #13]
    TFT_state_t                 TFT_state_give = TFT_IDLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	733b      	strb	r3, [r7, #12]

    BaseType_t higher_task_awoken = pdFALSE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]

    switch (GPIO_Pin)
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	2b07      	cmp	r3, #7
 80011b8:	d81e      	bhi.n	80011f8 <HAL_GPIO_EXTI_Callback+0x64>
 80011ba:	a201      	add	r2, pc, #4	@ (adr r2, 80011c0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80011bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c0:	080011f3 	.word	0x080011f3
 80011c4:	080011ed 	.word	0x080011ed
 80011c8:	080011f9 	.word	0x080011f9
 80011cc:	080011e7 	.word	0x080011e7
 80011d0:	080011f9 	.word	0x080011f9
 80011d4:	080011f9 	.word	0x080011f9
 80011d8:	080011f9 	.word	0x080011f9
 80011dc:	080011e1 	.word	0x080011e1
    {
    case BUTTON_1_PIN:
        relay_light_data_exti_give = BUTTON_1_PRESSED;
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]
        break;
 80011e4:	e009      	b.n	80011fa <HAL_GPIO_EXTI_Callback+0x66>
    case BUTTON_2_PIN:
        relay_light_data_exti_give = BUTTON_2_PRESSED;
 80011e6:	2301      	movs	r3, #1
 80011e8:	73fb      	strb	r3, [r7, #15]
        break;
 80011ea:	e006      	b.n	80011fa <HAL_GPIO_EXTI_Callback+0x66>
    case BUTTON_3_PIN:
        relay_humid_fan_data_exti_give = BUTTON_3_PRESSED;
 80011ec:	2300      	movs	r3, #0
 80011ee:	73bb      	strb	r3, [r7, #14]
        break;
 80011f0:	e003      	b.n	80011fa <HAL_GPIO_EXTI_Callback+0x66>
    case BUTTON_4_PIN:
        relay_humid_fan_data_exti_give = BUTTON_4_PRESSED;
 80011f2:	2301      	movs	r3, #1
 80011f4:	73bb      	strb	r3, [r7, #14]
        break;
 80011f6:	e000      	b.n	80011fa <HAL_GPIO_EXTI_Callback+0x66>
    default:
        break;
 80011f8:	bf00      	nop
    }
    
    xQueueSendFromISR(queue_relay_light_data, &relay_light_data_exti_give, NULL);
 80011fa:	4b27      	ldr	r3, [pc, #156]	@ (8001298 <HAL_GPIO_EXTI_Callback+0x104>)
 80011fc:	6818      	ldr	r0, [r3, #0]
 80011fe:	f107 010f 	add.w	r1, r7, #15
 8001202:	2300      	movs	r3, #0
 8001204:	2200      	movs	r2, #0
 8001206:	f003 fd39 	bl	8004c7c <xQueueGenericSendFromISR>
    xQueueSendFromISR(queue_relay_humid_fan_data, &relay_humid_fan_data_exti_give, NULL);
 800120a:	4b24      	ldr	r3, [pc, #144]	@ (800129c <HAL_GPIO_EXTI_Callback+0x108>)
 800120c:	6818      	ldr	r0, [r3, #0]
 800120e:	f107 010e 	add.w	r1, r7, #14
 8001212:	2300      	movs	r3, #0
 8001214:	2200      	movs	r2, #0
 8001216:	f003 fd31 	bl	8004c7c <xQueueGenericSendFromISR>
    xQueueSendFromISR(queue_TFT_state, &TFT_state_give, NULL);
 800121a:	4b21      	ldr	r3, [pc, #132]	@ (80012a0 <HAL_GPIO_EXTI_Callback+0x10c>)
 800121c:	6818      	ldr	r0, [r3, #0]
 800121e:	f107 010c 	add.w	r1, r7, #12
 8001222:	2300      	movs	r3, #0
 8001224:	2200      	movs	r2, #0
 8001226:	f003 fd29 	bl	8004c7c <xQueueGenericSendFromISR>
    xQueueSendFromISR(queue_UART_TX_state, &UART_TX_state_give, NULL);
 800122a:	4b1e      	ldr	r3, [pc, #120]	@ (80012a4 <HAL_GPIO_EXTI_Callback+0x110>)
 800122c:	6818      	ldr	r0, [r3, #0]
 800122e:	f107 010d 	add.w	r1, r7, #13
 8001232:	2300      	movs	r3, #0
 8001234:	2200      	movs	r2, #0
 8001236:	f003 fd21 	bl	8004c7c <xQueueGenericSendFromISR>
    vTaskNotifyGiveFromISR(Task_Relay_Light_Handle, &higher_task_awoken);
 800123a:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <HAL_GPIO_EXTI_Callback+0x114>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f107 0208 	add.w	r2, r7, #8
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f004 fff7 	bl	8006238 <vTaskGenericNotifyGiveFromISR>
    vTaskNotifyGiveFromISR(Task_UART_TX_Handle, &higher_task_awoken);
 800124a:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <HAL_GPIO_EXTI_Callback+0x118>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f107 0208 	add.w	r2, r7, #8
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f004 ffef 	bl	8006238 <vTaskGenericNotifyGiveFromISR>
    vTaskNotifyGiveFromISR(Task_TFT_Display_Handle, &higher_task_awoken);
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <HAL_GPIO_EXTI_Callback+0x11c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f107 0208 	add.w	r2, r7, #8
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f004 ffe7 	bl	8006238 <vTaskGenericNotifyGiveFromISR>
    vTaskNotifyGiveFromISR(Task_Relay_Humid_Fan_Handle, &higher_task_awoken);
 800126a:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <HAL_GPIO_EXTI_Callback+0x120>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f107 0208 	add.w	r2, r7, #8
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f004 ffdf 	bl	8006238 <vTaskGenericNotifyGiveFromISR>

    portYIELD_FROM_ISR(higher_task_awoken);
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d007      	beq.n	8001290 <HAL_GPIO_EXTI_Callback+0xfc>
 8001280:	4b0d      	ldr	r3, [pc, #52]	@ (80012b8 <HAL_GPIO_EXTI_Callback+0x124>)
 8001282:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	f3bf 8f4f 	dsb	sy
 800128c:	f3bf 8f6f 	isb	sy
}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200000b0 	.word	0x200000b0
 800129c:	200000bc 	.word	0x200000bc
 80012a0:	200000c4 	.word	0x200000c4
 80012a4:	200000c0 	.word	0x200000c0
 80012a8:	200000c8 	.word	0x200000c8
 80012ac:	200000d0 	.word	0x200000d0
 80012b0:	200000d4 	.word	0x200000d4
 80012b4:	200000d8 	.word	0x200000d8
 80012b8:	e000ed04 	.word	0xe000ed04

080012bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c0:	f000 fcfc 	bl	8001cbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c4:	f000 f810 	bl	80012e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c8:	f000 f99c 	bl	8001604 <MX_GPIO_Init>
  MX_TIM1_Init();
 80012cc:	f000 f882 	bl	80013d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012d0:	f000 f8d2 	bl	8001478 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012d4:	f000 f91e 	bl	8001514 <MX_TIM3_Init>
  MX_SPI2_Init();
 80012d8:	f000 f846 	bl	8001368 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80012dc:	f000 f968 	bl	80015b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  App_Main();
 80012e0:	f7fe ffa6 	bl	8000230 <App_Main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <main+0x28>

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b090      	sub	sp, #64	@ 0x40
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0318 	add.w	r3, r7, #24
 80012f2:	2228      	movs	r2, #40	@ 0x28
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f007 f9fe 	bl	80086f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
 8001308:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800130a:	2302      	movs	r3, #2
 800130c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130e:	2301      	movs	r3, #1
 8001310:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001312:	2310      	movs	r3, #16
 8001314:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001316:	2302      	movs	r3, #2
 8001318:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800131a:	2300      	movs	r3, #0
 800131c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800131e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001322:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001324:	f107 0318 	add.w	r3, r7, #24
 8001328:	4618      	mov	r0, r3
 800132a:	f001 f8f7 	bl	800251c <HAL_RCC_OscConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001334:	f000 fa64 	bl	8001800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001338:	230f      	movs	r3, #15
 800133a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133c:	2302      	movs	r3, #2
 800133e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2101      	movs	r1, #1
 8001350:	4618      	mov	r0, r3
 8001352:	f001 fb65 	bl	8002a20 <HAL_RCC_ClockConfig>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800135c:	f000 fa50 	bl	8001800 <Error_Handler>
  }
}
 8001360:	bf00      	nop
 8001362:	3740      	adds	r7, #64	@ 0x40
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800136c:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <MX_SPI2_Init+0x64>)
 800136e:	4a18      	ldr	r2, [pc, #96]	@ (80013d0 <MX_SPI2_Init+0x68>)
 8001370:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001372:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <MX_SPI2_Init+0x64>)
 8001374:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001378:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800137a:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <MX_SPI2_Init+0x64>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <MX_SPI2_Init+0x64>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <MX_SPI2_Init+0x64>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_SPI2_Init+0x64>)
 800138e:	2200      	movs	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <MX_SPI2_Init+0x64>)
 8001394:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001398:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800139a:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <MX_SPI2_Init+0x64>)
 800139c:	2200      	movs	r2, #0
 800139e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <MX_SPI2_Init+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <MX_SPI2_Init+0x64>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013ac:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <MX_SPI2_Init+0x64>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <MX_SPI2_Init+0x64>)
 80013b4:	220a      	movs	r2, #10
 80013b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013b8:	4804      	ldr	r0, [pc, #16]	@ (80013cc <MX_SPI2_Init+0x64>)
 80013ba:	f001 fcef 	bl	8002d9c <HAL_SPI_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80013c4:	f000 fa1c 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200000e0 	.word	0x200000e0
 80013d0:	40003800 	.word	0x40003800

080013d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e8:	463b      	mov	r3, r7
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001470 <MX_TIM1_Init+0x9c>)
 80013f2:	4a20      	ldr	r2, [pc, #128]	@ (8001474 <MX_TIM1_Init+0xa0>)
 80013f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80013f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001470 <MX_TIM1_Init+0x9c>)
 80013f8:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80013fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001470 <MX_TIM1_Init+0x9c>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8001404:	4b1a      	ldr	r3, [pc, #104]	@ (8001470 <MX_TIM1_Init+0x9c>)
 8001406:	f242 7210 	movw	r2, #10000	@ 0x2710
 800140a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140c:	4b18      	ldr	r3, [pc, #96]	@ (8001470 <MX_TIM1_Init+0x9c>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001412:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <MX_TIM1_Init+0x9c>)
 8001414:	2200      	movs	r2, #0
 8001416:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001418:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <MX_TIM1_Init+0x9c>)
 800141a:	2280      	movs	r2, #128	@ 0x80
 800141c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800141e:	4814      	ldr	r0, [pc, #80]	@ (8001470 <MX_TIM1_Init+0x9c>)
 8001420:	f002 f812 	bl	8003448 <HAL_TIM_Base_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800142a:	f000 f9e9 	bl	8001800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001432:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001434:	f107 0308 	add.w	r3, r7, #8
 8001438:	4619      	mov	r1, r3
 800143a:	480d      	ldr	r0, [pc, #52]	@ (8001470 <MX_TIM1_Init+0x9c>)
 800143c:	f002 f9ea 	bl	8003814 <HAL_TIM_ConfigClockSource>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001446:	f000 f9db 	bl	8001800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001452:	463b      	mov	r3, r7
 8001454:	4619      	mov	r1, r3
 8001456:	4806      	ldr	r0, [pc, #24]	@ (8001470 <MX_TIM1_Init+0x9c>)
 8001458:	f002 fbd8 	bl	8003c0c <HAL_TIMEx_MasterConfigSynchronization>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001462:	f000 f9cd 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000138 	.word	0x20000138
 8001474:	40012c00 	.word	0x40012c00

08001478 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148c:	463b      	mov	r3, r7
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001494:	4b1e      	ldr	r3, [pc, #120]	@ (8001510 <MX_TIM2_Init+0x98>)
 8001496:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800149a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 800149c:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <MX_TIM2_Init+0x98>)
 800149e:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80014a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <MX_TIM2_Init+0x98>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80014aa:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <MX_TIM2_Init+0x98>)
 80014ac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b2:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <MX_TIM2_Init+0x98>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b8:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <MX_TIM2_Init+0x98>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014be:	4814      	ldr	r0, [pc, #80]	@ (8001510 <MX_TIM2_Init+0x98>)
 80014c0:	f001 ffc2 	bl	8003448 <HAL_TIM_Base_Init>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80014ca:	f000 f999 	bl	8001800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	4619      	mov	r1, r3
 80014da:	480d      	ldr	r0, [pc, #52]	@ (8001510 <MX_TIM2_Init+0x98>)
 80014dc:	f002 f99a 	bl	8003814 <HAL_TIM_ConfigClockSource>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80014e6:	f000 f98b 	bl	8001800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014f2:	463b      	mov	r3, r7
 80014f4:	4619      	mov	r1, r3
 80014f6:	4806      	ldr	r0, [pc, #24]	@ (8001510 <MX_TIM2_Init+0x98>)
 80014f8:	f002 fb88 	bl	8003c0c <HAL_TIMEx_MasterConfigSynchronization>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001502:	f000 f97d 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	3718      	adds	r7, #24
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000180 	.word	0x20000180

08001514 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001528:	463b      	mov	r3, r7
 800152a:	2200      	movs	r2, #0
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001530:	4b1d      	ldr	r3, [pc, #116]	@ (80015a8 <MX_TIM3_Init+0x94>)
 8001532:	4a1e      	ldr	r2, [pc, #120]	@ (80015ac <MX_TIM3_Init+0x98>)
 8001534:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 35;
 8001536:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <MX_TIM3_Init+0x94>)
 8001538:	2223      	movs	r2, #35	@ 0x23
 800153a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800153c:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <MX_TIM3_Init+0x94>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001542:	4b19      	ldr	r3, [pc, #100]	@ (80015a8 <MX_TIM3_Init+0x94>)
 8001544:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001548:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800154a:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <MX_TIM3_Init+0x94>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001550:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <MX_TIM3_Init+0x94>)
 8001552:	2200      	movs	r2, #0
 8001554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001556:	4814      	ldr	r0, [pc, #80]	@ (80015a8 <MX_TIM3_Init+0x94>)
 8001558:	f001 ff76 	bl	8003448 <HAL_TIM_Base_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001562:	f000 f94d 	bl	8001800 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001566:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800156a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800156c:	f107 0308 	add.w	r3, r7, #8
 8001570:	4619      	mov	r1, r3
 8001572:	480d      	ldr	r0, [pc, #52]	@ (80015a8 <MX_TIM3_Init+0x94>)
 8001574:	f002 f94e 	bl	8003814 <HAL_TIM_ConfigClockSource>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800157e:	f000 f93f 	bl	8001800 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800158a:	463b      	mov	r3, r7
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	@ (80015a8 <MX_TIM3_Init+0x94>)
 8001590:	f002 fb3c 	bl	8003c0c <HAL_TIMEx_MasterConfigSynchronization>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800159a:	f000 f931 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200001c8 	.word	0x200001c8
 80015ac:	40000400 	.word	0x40000400

080015b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015b4:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015b6:	4a12      	ldr	r2, [pc, #72]	@ (8001600 <MX_USART1_UART_Init+0x50>)
 80015b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ba:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b08      	ldr	r3, [pc, #32]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_USART1_UART_Init+0x4c>)
 80015e8:	f002 fb8e 	bl	8003d08 <HAL_UART_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015f2:	f000 f905 	bl	8001800 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000210 	.word	0x20000210
 8001600:	40013800 	.word	0x40013800

08001604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001618:	4b53      	ldr	r3, [pc, #332]	@ (8001768 <MX_GPIO_Init+0x164>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a52      	ldr	r2, [pc, #328]	@ (8001768 <MX_GPIO_Init+0x164>)
 800161e:	f043 0320 	orr.w	r3, r3, #32
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b50      	ldr	r3, [pc, #320]	@ (8001768 <MX_GPIO_Init+0x164>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0320 	and.w	r3, r3, #32
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001630:	4b4d      	ldr	r3, [pc, #308]	@ (8001768 <MX_GPIO_Init+0x164>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	4a4c      	ldr	r2, [pc, #304]	@ (8001768 <MX_GPIO_Init+0x164>)
 8001636:	f043 0310 	orr.w	r3, r3, #16
 800163a:	6193      	str	r3, [r2, #24]
 800163c:	4b4a      	ldr	r3, [pc, #296]	@ (8001768 <MX_GPIO_Init+0x164>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	f003 0310 	and.w	r3, r3, #16
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001648:	4b47      	ldr	r3, [pc, #284]	@ (8001768 <MX_GPIO_Init+0x164>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	4a46      	ldr	r2, [pc, #280]	@ (8001768 <MX_GPIO_Init+0x164>)
 800164e:	f043 0304 	orr.w	r3, r3, #4
 8001652:	6193      	str	r3, [r2, #24]
 8001654:	4b44      	ldr	r3, [pc, #272]	@ (8001768 <MX_GPIO_Init+0x164>)
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0304 	and.w	r3, r3, #4
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001660:	4b41      	ldr	r3, [pc, #260]	@ (8001768 <MX_GPIO_Init+0x164>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a40      	ldr	r2, [pc, #256]	@ (8001768 <MX_GPIO_Init+0x164>)
 8001666:	f043 0308 	orr.w	r3, r3, #8
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b3e      	ldr	r3, [pc, #248]	@ (8001768 <MX_GPIO_Init+0x164>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0308 	and.w	r3, r3, #8
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	21f0      	movs	r1, #240	@ 0xf0
 800167c:	483b      	ldr	r0, [pc, #236]	@ (800176c <MX_GPIO_Init+0x168>)
 800167e:	f000 ff1c 	bl	80024ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001682:	2201      	movs	r2, #1
 8001684:	2101      	movs	r1, #1
 8001686:	483a      	ldr	r0, [pc, #232]	@ (8001770 <MX_GPIO_Init+0x16c>)
 8001688:	f000 ff17 	bl	80024ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800168c:	2200      	movs	r2, #0
 800168e:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8001692:	4838      	ldr	r0, [pc, #224]	@ (8001774 <MX_GPIO_Init+0x170>)
 8001694:	f000 ff11 	bl	80024ba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001698:	230f      	movs	r3, #15
 800169a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800169c:	4b36      	ldr	r3, [pc, #216]	@ (8001778 <MX_GPIO_Init+0x174>)
 800169e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a0:	2301      	movs	r3, #1
 80016a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a4:	f107 0310 	add.w	r3, r7, #16
 80016a8:	4619      	mov	r1, r3
 80016aa:	4832      	ldr	r0, [pc, #200]	@ (8001774 <MX_GPIO_Init+0x170>)
 80016ac:	f000 fd5a 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016b0:	23f0      	movs	r3, #240	@ 0xf0
 80016b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b8:	2301      	movs	r3, #1
 80016ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2302      	movs	r3, #2
 80016be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c0:	f107 0310 	add.w	r3, r7, #16
 80016c4:	4619      	mov	r1, r3
 80016c6:	4829      	ldr	r0, [pc, #164]	@ (800176c <MX_GPIO_Init+0x168>)
 80016c8:	f000 fd4c 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016cc:	2301      	movs	r3, #1
 80016ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016d0:	2311      	movs	r3, #17
 80016d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d4:	2301      	movs	r3, #1
 80016d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	2302      	movs	r3, #2
 80016da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016dc:	f107 0310 	add.w	r3, r7, #16
 80016e0:	4619      	mov	r1, r3
 80016e2:	4823      	ldr	r0, [pc, #140]	@ (8001770 <MX_GPIO_Init+0x16c>)
 80016e4:	f000 fd3e 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80016e8:	2306      	movs	r3, #6
 80016ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016f0:	2301      	movs	r3, #1
 80016f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	4619      	mov	r1, r3
 80016fa:	481d      	ldr	r0, [pc, #116]	@ (8001770 <MX_GPIO_Init+0x16c>)
 80016fc:	f000 fd32 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8001700:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800170a:	2301      	movs	r3, #1
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170e:	2302      	movs	r3, #2
 8001710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	4619      	mov	r1, r3
 8001718:	4816      	ldr	r0, [pc, #88]	@ (8001774 <MX_GPIO_Init+0x170>)
 800171a:	f000 fd23 	bl	8002164 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2107      	movs	r1, #7
 8001722:	2006      	movs	r0, #6
 8001724:	f000 fbb1 	bl	8001e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001728:	2006      	movs	r0, #6
 800172a:	f000 fbca 	bl	8001ec2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2107      	movs	r1, #7
 8001732:	2007      	movs	r0, #7
 8001734:	f000 fba9 	bl	8001e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001738:	2007      	movs	r0, #7
 800173a:	f000 fbc2 	bl	8001ec2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 7, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2107      	movs	r1, #7
 8001742:	2008      	movs	r0, #8
 8001744:	f000 fba1 	bl	8001e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001748:	2008      	movs	r0, #8
 800174a:	f000 fbba 	bl	8001ec2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 7, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2107      	movs	r1, #7
 8001752:	2009      	movs	r0, #9
 8001754:	f000 fb99 	bl	8001e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001758:	2009      	movs	r0, #9
 800175a:	f000 fbb2 	bl	8001ec2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800175e:	bf00      	nop
 8001760:	3720      	adds	r7, #32
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
 800176c:	40010800 	.word	0x40010800
 8001770:	40010c00 	.word	0x40010c00
 8001774:	40011000 	.word	0x40011000
 8001778:	10210000 	.word	0x10210000

0800177c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  relay_light_data_t relay_light_data_timer_give;
  BaseType_t higher_task_awoken = pdFALSE;
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a16      	ldr	r2, [pc, #88]	@ (80017e8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d101      	bne.n	8001796 <HAL_TIM_PeriodElapsedCallback+0x1a>
    HAL_IncTick();
 8001792:	f000 faa9 	bl	8001ce8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM1)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a14      	ldr	r2, [pc, #80]	@ (80017ec <HAL_TIM_PeriodElapsedCallback+0x70>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d11f      	bne.n	80017e0 <HAL_TIM_PeriodElapsedCallback+0x64>
  {
    HAL_TIM_Base_Stop_IT(&htim1);
 80017a0:	4813      	ldr	r0, [pc, #76]	@ (80017f0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80017a2:	f001 ff01 	bl	80035a8 <HAL_TIM_Base_Stop_IT>
    relay_light_data_timer_give = TIMER_GO_OFF;
 80017a6:	230a      	movs	r3, #10
 80017a8:	73fb      	strb	r3, [r7, #15]
    xQueueSendFromISR(queue_relay_light_data, &relay_light_data_timer_give, NULL);
 80017aa:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80017ac:	6818      	ldr	r0, [r3, #0]
 80017ae:	f107 010f 	add.w	r1, r7, #15
 80017b2:	2300      	movs	r3, #0
 80017b4:	2200      	movs	r2, #0
 80017b6:	f003 fa61 	bl	8004c7c <xQueueGenericSendFromISR>
    vTaskNotifyGiveFromISR(Task_Relay_Light_Handle, &higher_task_awoken);
 80017ba:	4b0f      	ldr	r3, [pc, #60]	@ (80017f8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f107 0208 	add.w	r2, r7, #8
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f004 fd37 	bl	8006238 <vTaskGenericNotifyGiveFromISR>
    portYIELD_FROM_ISR(higher_task_awoken);
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d007      	beq.n	80017e0 <HAL_TIM_PeriodElapsedCallback+0x64>
 80017d0:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <HAL_TIM_PeriodElapsedCallback+0x80>)
 80017d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	f3bf 8f4f 	dsb	sy
 80017dc:	f3bf 8f6f 	isb	sy
  }
  /* USER CODE END Callback 1 */
}
 80017e0:	bf00      	nop
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40000800 	.word	0x40000800
 80017ec:	40012c00 	.word	0x40012c00
 80017f0:	20000138 	.word	0x20000138
 80017f4:	200000b0 	.word	0x200000b0
 80017f8:	200000c8 	.word	0x200000c8
 80017fc:	e000ed04 	.word	0xe000ed04

08001800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001804:	b672      	cpsid	i
}
 8001806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <Error_Handler+0x8>

0800180c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <HAL_MspInit+0x5c>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	4a14      	ldr	r2, [pc, #80]	@ (8001868 <HAL_MspInit+0x5c>)
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	6193      	str	r3, [r2, #24]
 800181e:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <HAL_MspInit+0x5c>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	4b0f      	ldr	r3, [pc, #60]	@ (8001868 <HAL_MspInit+0x5c>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	4a0e      	ldr	r2, [pc, #56]	@ (8001868 <HAL_MspInit+0x5c>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001834:	61d3      	str	r3, [r2, #28]
 8001836:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <HAL_MspInit+0x5c>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001842:	4b0a      	ldr	r3, [pc, #40]	@ (800186c <HAL_MspInit+0x60>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	4a04      	ldr	r2, [pc, #16]	@ (800186c <HAL_MspInit+0x60>)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185e:	bf00      	nop
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr
 8001868:	40021000 	.word	0x40021000
 800186c:	40010000 	.word	0x40010000

08001870 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a1a      	ldr	r2, [pc, #104]	@ (80018f4 <HAL_SPI_MspInit+0x84>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d12c      	bne.n	80018ea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001890:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <HAL_SPI_MspInit+0x88>)
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	4a18      	ldr	r2, [pc, #96]	@ (80018f8 <HAL_SPI_MspInit+0x88>)
 8001896:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800189a:	61d3      	str	r3, [r2, #28]
 800189c:	4b16      	ldr	r3, [pc, #88]	@ (80018f8 <HAL_SPI_MspInit+0x88>)
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a8:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <HAL_SPI_MspInit+0x88>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	4a12      	ldr	r2, [pc, #72]	@ (80018f8 <HAL_SPI_MspInit+0x88>)
 80018ae:	f043 0308 	orr.w	r3, r3, #8
 80018b2:	6193      	str	r3, [r2, #24]
 80018b4:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <HAL_SPI_MspInit+0x88>)
 80018b6:	699b      	ldr	r3, [r3, #24]
 80018b8:	f003 0308 	and.w	r3, r3, #8
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80018c0:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80018c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ca:	2303      	movs	r3, #3
 80018cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ce:	f107 0310 	add.w	r3, r7, #16
 80018d2:	4619      	mov	r1, r3
 80018d4:	4809      	ldr	r0, [pc, #36]	@ (80018fc <HAL_SPI_MspInit+0x8c>)
 80018d6:	f000 fc45 	bl	8002164 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2101      	movs	r1, #1
 80018de:	2024      	movs	r0, #36	@ 0x24
 80018e0:	f000 fad3 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80018e4:	2024      	movs	r0, #36	@ 0x24
 80018e6:	f000 faec 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018ea:	bf00      	nop
 80018ec:	3720      	adds	r7, #32
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40003800 	.word	0x40003800
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40010c00 	.word	0x40010c00

08001900 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a1f      	ldr	r2, [pc, #124]	@ (800198c <HAL_TIM_Base_MspInit+0x8c>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d114      	bne.n	800193c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001912:	4b1f      	ldr	r3, [pc, #124]	@ (8001990 <HAL_TIM_Base_MspInit+0x90>)
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	4a1e      	ldr	r2, [pc, #120]	@ (8001990 <HAL_TIM_Base_MspInit+0x90>)
 8001918:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800191c:	6193      	str	r3, [r2, #24]
 800191e:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <HAL_TIM_Base_MspInit+0x90>)
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 7, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2107      	movs	r1, #7
 800192e:	2019      	movs	r0, #25
 8001930:	f000 faab 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001934:	2019      	movs	r0, #25
 8001936:	f000 fac4 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800193a:	e022      	b.n	8001982 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001944:	d10c      	bne.n	8001960 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001946:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <HAL_TIM_Base_MspInit+0x90>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	4a11      	ldr	r2, [pc, #68]	@ (8001990 <HAL_TIM_Base_MspInit+0x90>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	61d3      	str	r3, [r2, #28]
 8001952:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <HAL_TIM_Base_MspInit+0x90>)
 8001954:	69db      	ldr	r3, [r3, #28]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
}
 800195e:	e010      	b.n	8001982 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0b      	ldr	r2, [pc, #44]	@ (8001994 <HAL_TIM_Base_MspInit+0x94>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d10b      	bne.n	8001982 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800196a:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <HAL_TIM_Base_MspInit+0x90>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	4a08      	ldr	r2, [pc, #32]	@ (8001990 <HAL_TIM_Base_MspInit+0x90>)
 8001970:	f043 0302 	orr.w	r3, r3, #2
 8001974:	61d3      	str	r3, [r2, #28]
 8001976:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <HAL_TIM_Base_MspInit+0x90>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
}
 8001982:	bf00      	nop
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40012c00 	.word	0x40012c00
 8001990:	40021000 	.word	0x40021000
 8001994:	40000400 	.word	0x40000400

08001998 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a20      	ldr	r2, [pc, #128]	@ (8001a34 <HAL_UART_MspInit+0x9c>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d139      	bne.n	8001a2c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a38 <HAL_UART_MspInit+0xa0>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001a38 <HAL_UART_MspInit+0xa0>)
 80019be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a38 <HAL_UART_MspInit+0xa0>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <HAL_UART_MspInit+0xa0>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	4a18      	ldr	r2, [pc, #96]	@ (8001a38 <HAL_UART_MspInit+0xa0>)
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	6193      	str	r3, [r2, #24]
 80019dc:	4b16      	ldr	r3, [pc, #88]	@ (8001a38 <HAL_UART_MspInit+0xa0>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80019e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	f107 0310 	add.w	r3, r7, #16
 80019fa:	4619      	mov	r1, r3
 80019fc:	480f      	ldr	r0, [pc, #60]	@ (8001a3c <HAL_UART_MspInit+0xa4>)
 80019fe:	f000 fbb1 	bl	8002164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a10:	f107 0310 	add.w	r3, r7, #16
 8001a14:	4619      	mov	r1, r3
 8001a16:	4809      	ldr	r0, [pc, #36]	@ (8001a3c <HAL_UART_MspInit+0xa4>)
 8001a18:	f000 fba4 	bl	8002164 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2106      	movs	r1, #6
 8001a20:	2025      	movs	r0, #37	@ 0x25
 8001a22:	f000 fa32 	bl	8001e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a26:	2025      	movs	r0, #37	@ 0x25
 8001a28:	f000 fa4b 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001a2c:	bf00      	nop
 8001a2e:	3720      	adds	r7, #32
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40013800 	.word	0x40013800
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010800 	.word	0x40010800

08001a40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08e      	sub	sp, #56	@ 0x38
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001a56:	4b34      	ldr	r3, [pc, #208]	@ (8001b28 <HAL_InitTick+0xe8>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a33      	ldr	r2, [pc, #204]	@ (8001b28 <HAL_InitTick+0xe8>)
 8001a5c:	f043 0304 	orr.w	r3, r3, #4
 8001a60:	61d3      	str	r3, [r2, #28]
 8001a62:	4b31      	ldr	r3, [pc, #196]	@ (8001b28 <HAL_InitTick+0xe8>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a6e:	f107 0210 	add.w	r2, r7, #16
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f001 f941 	bl	8002d00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d103      	bne.n	8001a90 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a88:	f001 f912 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 8001a8c:	6378      	str	r0, [r7, #52]	@ 0x34
 8001a8e:	e004      	b.n	8001a9a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a90:	f001 f90e 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 8001a94:	4603      	mov	r3, r0
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a9c:	4a23      	ldr	r2, [pc, #140]	@ (8001b2c <HAL_InitTick+0xec>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	0c9b      	lsrs	r3, r3, #18
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001aa8:	4b21      	ldr	r3, [pc, #132]	@ (8001b30 <HAL_InitTick+0xf0>)
 8001aaa:	4a22      	ldr	r2, [pc, #136]	@ (8001b34 <HAL_InitTick+0xf4>)
 8001aac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001aae:	4b20      	ldr	r3, [pc, #128]	@ (8001b30 <HAL_InitTick+0xf0>)
 8001ab0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001ab4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001ab6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b30 <HAL_InitTick+0xf0>)
 8001ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aba:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001abc:	4b1c      	ldr	r3, [pc, #112]	@ (8001b30 <HAL_InitTick+0xf0>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b30 <HAL_InitTick+0xf0>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac8:	4b19      	ldr	r3, [pc, #100]	@ (8001b30 <HAL_InitTick+0xf0>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001ace:	4818      	ldr	r0, [pc, #96]	@ (8001b30 <HAL_InitTick+0xf0>)
 8001ad0:	f001 fcba 	bl	8003448 <HAL_TIM_Base_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001ada:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d11b      	bne.n	8001b1a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001ae2:	4813      	ldr	r0, [pc, #76]	@ (8001b30 <HAL_InitTick+0xf0>)
 8001ae4:	f001 fd00 	bl	80034e8 <HAL_TIM_Base_Start_IT>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001aee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d111      	bne.n	8001b1a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001af6:	201e      	movs	r0, #30
 8001af8:	f000 f9e3 	bl	8001ec2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b0f      	cmp	r3, #15
 8001b00:	d808      	bhi.n	8001b14 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001b02:	2200      	movs	r2, #0
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	201e      	movs	r0, #30
 8001b08:	f000 f9bf 	bl	8001e8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b38 <HAL_InitTick+0xf8>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e002      	b.n	8001b1a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001b1a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3738      	adds	r7, #56	@ 0x38
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	431bde83 	.word	0x431bde83
 8001b30:	20000258 	.word	0x20000258
 8001b34:	40000800 	.word	0x40000800
 8001b38:	20000008 	.word	0x20000008

08001b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b40:	bf00      	nop
 8001b42:	e7fd      	b.n	8001b40 <NMI_Handler+0x4>

08001b44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <HardFault_Handler+0x4>

08001b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b50:	bf00      	nop
 8001b52:	e7fd      	b.n	8001b50 <MemManage_Handler+0x4>

08001b54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <BusFault_Handler+0x4>

08001b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <UsageFault_Handler+0x4>

08001b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001b74:	2001      	movs	r0, #1
 8001b76:	f000 fcb9 	bl	80024ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b82:	2002      	movs	r0, #2
 8001b84:	f000 fcb2 	bl	80024ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001b90:	2004      	movs	r0, #4
 8001b92:	f000 fcab 	bl	80024ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001b9e:	2008      	movs	r0, #8
 8001ba0:	f000 fca4 	bl	80024ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bac:	4802      	ldr	r0, [pc, #8]	@ (8001bb8 <TIM1_UP_IRQHandler+0x10>)
 8001bae:	f001 fd29 	bl	8003604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000138 	.word	0x20000138

08001bbc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001bc0:	4802      	ldr	r0, [pc, #8]	@ (8001bcc <TIM4_IRQHandler+0x10>)
 8001bc2:	f001 fd1f 	bl	8003604 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000258 	.word	0x20000258

08001bd0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001bd4:	4802      	ldr	r0, [pc, #8]	@ (8001be0 <SPI2_IRQHandler+0x10>)
 8001bd6:	f001 f9ef 	bl	8002fb8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200000e0 	.word	0x200000e0

08001be4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001be8:	4802      	ldr	r0, [pc, #8]	@ (8001bf4 <USART1_IRQHandler+0x10>)
 8001bea:	f002 f937 	bl	8003e5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000210 	.word	0x20000210

08001bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b086      	sub	sp, #24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c00:	4a14      	ldr	r2, [pc, #80]	@ (8001c54 <_sbrk+0x5c>)
 8001c02:	4b15      	ldr	r3, [pc, #84]	@ (8001c58 <_sbrk+0x60>)
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c0c:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <_sbrk+0x64>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d102      	bne.n	8001c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c14:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <_sbrk+0x64>)
 8001c16:	4a12      	ldr	r2, [pc, #72]	@ (8001c60 <_sbrk+0x68>)
 8001c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c1a:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d207      	bcs.n	8001c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c28:	f006 fd7e 	bl	8008728 <__errno>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	220c      	movs	r2, #12
 8001c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
 8001c36:	e009      	b.n	8001c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c38:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <_sbrk+0x64>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c3e:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <_sbrk+0x64>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	4a05      	ldr	r2, [pc, #20]	@ (8001c5c <_sbrk+0x64>)
 8001c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	2000c000 	.word	0x2000c000
 8001c58:	00000400 	.word	0x00000400
 8001c5c:	200002a0 	.word	0x200002a0
 8001c60:	20004da0 	.word	0x20004da0

08001c64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c70:	f7ff fff8 	bl	8001c64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c74:	480b      	ldr	r0, [pc, #44]	@ (8001ca4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c76:	490c      	ldr	r1, [pc, #48]	@ (8001ca8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c78:	4a0c      	ldr	r2, [pc, #48]	@ (8001cac <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c7c:	e002      	b.n	8001c84 <LoopCopyDataInit>

08001c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c82:	3304      	adds	r3, #4

08001c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c88:	d3f9      	bcc.n	8001c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c8a:	4a09      	ldr	r2, [pc, #36]	@ (8001cb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c8c:	4c09      	ldr	r4, [pc, #36]	@ (8001cb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c90:	e001      	b.n	8001c96 <LoopFillZerobss>

08001c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c94:	3204      	adds	r2, #4

08001c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c98:	d3fb      	bcc.n	8001c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c9a:	f006 fd4b 	bl	8008734 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c9e:	f7ff fb0d 	bl	80012bc <main>
  bx lr
 8001ca2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ca4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001cac:	0800e244 	.word	0x0800e244
  ldr r2, =_sbss
 8001cb0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001cb4:	20004d9c 	.word	0x20004d9c

08001cb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC1_2_IRQHandler>
	...

08001cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc0:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <HAL_Init+0x28>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a07      	ldr	r2, [pc, #28]	@ (8001ce4 <HAL_Init+0x28>)
 8001cc6:	f043 0310 	orr.w	r3, r3, #16
 8001cca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f000 f8d1 	bl	8001e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cd2:	200f      	movs	r0, #15
 8001cd4:	f7ff feb4 	bl	8001a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd8:	f7ff fd98 	bl	800180c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40022000 	.word	0x40022000

08001ce8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cec:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <HAL_IncTick+0x1c>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <HAL_IncTick+0x20>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	4a03      	ldr	r2, [pc, #12]	@ (8001d08 <HAL_IncTick+0x20>)
 8001cfa:	6013      	str	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr
 8001d04:	2000000c 	.word	0x2000000c
 8001d08:	200002a4 	.word	0x200002a4

08001d0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d10:	4b02      	ldr	r3, [pc, #8]	@ (8001d1c <HAL_GetTick+0x10>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr
 8001d1c:	200002a4 	.word	0x200002a4

08001d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d30:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d52:	4a04      	ldr	r2, [pc, #16]	@ (8001d64 <__NVIC_SetPriorityGrouping+0x44>)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	60d3      	str	r3, [r2, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d6c:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <__NVIC_GetPriorityGrouping+0x18>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	0a1b      	lsrs	r3, r3, #8
 8001d72:	f003 0307 	and.w	r3, r3, #7
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	db0b      	blt.n	8001dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	f003 021f 	and.w	r2, r3, #31
 8001d9c:	4906      	ldr	r1, [pc, #24]	@ (8001db8 <__NVIC_EnableIRQ+0x34>)
 8001d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	2001      	movs	r0, #1
 8001da6:	fa00 f202 	lsl.w	r2, r0, r2
 8001daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	e000e100 	.word	0xe000e100

08001dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	db0a      	blt.n	8001de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	490c      	ldr	r1, [pc, #48]	@ (8001e08 <__NVIC_SetPriority+0x4c>)
 8001dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dda:	0112      	lsls	r2, r2, #4
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	440b      	add	r3, r1
 8001de0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de4:	e00a      	b.n	8001dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4908      	ldr	r1, [pc, #32]	@ (8001e0c <__NVIC_SetPriority+0x50>)
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	3b04      	subs	r3, #4
 8001df4:	0112      	lsls	r2, r2, #4
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	440b      	add	r3, r1
 8001dfa:	761a      	strb	r2, [r3, #24]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000e100 	.word	0xe000e100
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b089      	sub	sp, #36	@ 0x24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f1c3 0307 	rsb	r3, r3, #7
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	bf28      	it	cs
 8001e2e:	2304      	movcs	r3, #4
 8001e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3304      	adds	r3, #4
 8001e36:	2b06      	cmp	r3, #6
 8001e38:	d902      	bls.n	8001e40 <NVIC_EncodePriority+0x30>
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3b03      	subs	r3, #3
 8001e3e:	e000      	b.n	8001e42 <NVIC_EncodePriority+0x32>
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	f04f 32ff 	mov.w	r2, #4294967295
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	401a      	ands	r2, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e58:	f04f 31ff 	mov.w	r1, #4294967295
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	43d9      	mvns	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	4313      	orrs	r3, r2
         );
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3724      	adds	r7, #36	@ 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr

08001e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff ff4f 	bl	8001d20 <__NVIC_SetPriorityGrouping>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b086      	sub	sp, #24
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
 8001e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e9c:	f7ff ff64 	bl	8001d68 <__NVIC_GetPriorityGrouping>
 8001ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	6978      	ldr	r0, [r7, #20]
 8001ea8:	f7ff ffb2 	bl	8001e10 <NVIC_EncodePriority>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff81 	bl	8001dbc <__NVIC_SetPriority>
}
 8001eba:	bf00      	nop
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff ff57 	bl	8001d84 <__NVIC_EnableIRQ>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b085      	sub	sp, #20
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d008      	beq.n	8001f08 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2204      	movs	r2, #4
 8001efa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e020      	b.n	8001f4a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 020e 	bic.w	r2, r2, #14
 8001f16:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0201 	bic.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f30:	2101      	movs	r1, #1
 8001f32:	fa01 f202 	lsl.w	r2, r1, r2
 8001f36:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr

08001f54 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d005      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2204      	movs	r2, #4
 8001f70:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	73fb      	strb	r3, [r7, #15]
 8001f76:	e0d6      	b.n	8002126 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 020e 	bic.w	r2, r2, #14
 8001f86:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0201 	bic.w	r2, r2, #1
 8001f96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b64      	ldr	r3, [pc, #400]	@ (8002130 <HAL_DMA_Abort_IT+0x1dc>)
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d958      	bls.n	8002056 <HAL_DMA_Abort_IT+0x102>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a62      	ldr	r2, [pc, #392]	@ (8002134 <HAL_DMA_Abort_IT+0x1e0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d04f      	beq.n	800204e <HAL_DMA_Abort_IT+0xfa>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a61      	ldr	r2, [pc, #388]	@ (8002138 <HAL_DMA_Abort_IT+0x1e4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d048      	beq.n	800204a <HAL_DMA_Abort_IT+0xf6>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a5f      	ldr	r2, [pc, #380]	@ (800213c <HAL_DMA_Abort_IT+0x1e8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d040      	beq.n	8002044 <HAL_DMA_Abort_IT+0xf0>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a5e      	ldr	r2, [pc, #376]	@ (8002140 <HAL_DMA_Abort_IT+0x1ec>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d038      	beq.n	800203e <HAL_DMA_Abort_IT+0xea>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a5c      	ldr	r2, [pc, #368]	@ (8002144 <HAL_DMA_Abort_IT+0x1f0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d030      	beq.n	8002038 <HAL_DMA_Abort_IT+0xe4>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a5b      	ldr	r2, [pc, #364]	@ (8002148 <HAL_DMA_Abort_IT+0x1f4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d028      	beq.n	8002032 <HAL_DMA_Abort_IT+0xde>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a52      	ldr	r2, [pc, #328]	@ (8002130 <HAL_DMA_Abort_IT+0x1dc>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d020      	beq.n	800202c <HAL_DMA_Abort_IT+0xd8>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a57      	ldr	r2, [pc, #348]	@ (800214c <HAL_DMA_Abort_IT+0x1f8>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d019      	beq.n	8002028 <HAL_DMA_Abort_IT+0xd4>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a55      	ldr	r2, [pc, #340]	@ (8002150 <HAL_DMA_Abort_IT+0x1fc>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d012      	beq.n	8002024 <HAL_DMA_Abort_IT+0xd0>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a54      	ldr	r2, [pc, #336]	@ (8002154 <HAL_DMA_Abort_IT+0x200>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00a      	beq.n	800201e <HAL_DMA_Abort_IT+0xca>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a52      	ldr	r2, [pc, #328]	@ (8002158 <HAL_DMA_Abort_IT+0x204>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d102      	bne.n	8002018 <HAL_DMA_Abort_IT+0xc4>
 8002012:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002016:	e01b      	b.n	8002050 <HAL_DMA_Abort_IT+0xfc>
 8002018:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800201c:	e018      	b.n	8002050 <HAL_DMA_Abort_IT+0xfc>
 800201e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002022:	e015      	b.n	8002050 <HAL_DMA_Abort_IT+0xfc>
 8002024:	2310      	movs	r3, #16
 8002026:	e013      	b.n	8002050 <HAL_DMA_Abort_IT+0xfc>
 8002028:	2301      	movs	r3, #1
 800202a:	e011      	b.n	8002050 <HAL_DMA_Abort_IT+0xfc>
 800202c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002030:	e00e      	b.n	8002050 <HAL_DMA_Abort_IT+0xfc>
 8002032:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002036:	e00b      	b.n	8002050 <HAL_DMA_Abort_IT+0xfc>
 8002038:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800203c:	e008      	b.n	8002050 <HAL_DMA_Abort_IT+0xfc>
 800203e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002042:	e005      	b.n	8002050 <HAL_DMA_Abort_IT+0xfc>
 8002044:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002048:	e002      	b.n	8002050 <HAL_DMA_Abort_IT+0xfc>
 800204a:	2310      	movs	r3, #16
 800204c:	e000      	b.n	8002050 <HAL_DMA_Abort_IT+0xfc>
 800204e:	2301      	movs	r3, #1
 8002050:	4a42      	ldr	r2, [pc, #264]	@ (800215c <HAL_DMA_Abort_IT+0x208>)
 8002052:	6053      	str	r3, [r2, #4]
 8002054:	e057      	b.n	8002106 <HAL_DMA_Abort_IT+0x1b2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a36      	ldr	r2, [pc, #216]	@ (8002134 <HAL_DMA_Abort_IT+0x1e0>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d04f      	beq.n	8002100 <HAL_DMA_Abort_IT+0x1ac>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a34      	ldr	r2, [pc, #208]	@ (8002138 <HAL_DMA_Abort_IT+0x1e4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d048      	beq.n	80020fc <HAL_DMA_Abort_IT+0x1a8>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a33      	ldr	r2, [pc, #204]	@ (800213c <HAL_DMA_Abort_IT+0x1e8>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d040      	beq.n	80020f6 <HAL_DMA_Abort_IT+0x1a2>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a31      	ldr	r2, [pc, #196]	@ (8002140 <HAL_DMA_Abort_IT+0x1ec>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d038      	beq.n	80020f0 <HAL_DMA_Abort_IT+0x19c>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a30      	ldr	r2, [pc, #192]	@ (8002144 <HAL_DMA_Abort_IT+0x1f0>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d030      	beq.n	80020ea <HAL_DMA_Abort_IT+0x196>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a2e      	ldr	r2, [pc, #184]	@ (8002148 <HAL_DMA_Abort_IT+0x1f4>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d028      	beq.n	80020e4 <HAL_DMA_Abort_IT+0x190>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a26      	ldr	r2, [pc, #152]	@ (8002130 <HAL_DMA_Abort_IT+0x1dc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d020      	beq.n	80020de <HAL_DMA_Abort_IT+0x18a>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a2a      	ldr	r2, [pc, #168]	@ (800214c <HAL_DMA_Abort_IT+0x1f8>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d019      	beq.n	80020da <HAL_DMA_Abort_IT+0x186>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a29      	ldr	r2, [pc, #164]	@ (8002150 <HAL_DMA_Abort_IT+0x1fc>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d012      	beq.n	80020d6 <HAL_DMA_Abort_IT+0x182>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a27      	ldr	r2, [pc, #156]	@ (8002154 <HAL_DMA_Abort_IT+0x200>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00a      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x17c>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a26      	ldr	r2, [pc, #152]	@ (8002158 <HAL_DMA_Abort_IT+0x204>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d102      	bne.n	80020ca <HAL_DMA_Abort_IT+0x176>
 80020c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020c8:	e01b      	b.n	8002102 <HAL_DMA_Abort_IT+0x1ae>
 80020ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020ce:	e018      	b.n	8002102 <HAL_DMA_Abort_IT+0x1ae>
 80020d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020d4:	e015      	b.n	8002102 <HAL_DMA_Abort_IT+0x1ae>
 80020d6:	2310      	movs	r3, #16
 80020d8:	e013      	b.n	8002102 <HAL_DMA_Abort_IT+0x1ae>
 80020da:	2301      	movs	r3, #1
 80020dc:	e011      	b.n	8002102 <HAL_DMA_Abort_IT+0x1ae>
 80020de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80020e2:	e00e      	b.n	8002102 <HAL_DMA_Abort_IT+0x1ae>
 80020e4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80020e8:	e00b      	b.n	8002102 <HAL_DMA_Abort_IT+0x1ae>
 80020ea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80020ee:	e008      	b.n	8002102 <HAL_DMA_Abort_IT+0x1ae>
 80020f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020f4:	e005      	b.n	8002102 <HAL_DMA_Abort_IT+0x1ae>
 80020f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020fa:	e002      	b.n	8002102 <HAL_DMA_Abort_IT+0x1ae>
 80020fc:	2310      	movs	r3, #16
 80020fe:	e000      	b.n	8002102 <HAL_DMA_Abort_IT+0x1ae>
 8002100:	2301      	movs	r3, #1
 8002102:	4a17      	ldr	r2, [pc, #92]	@ (8002160 <HAL_DMA_Abort_IT+0x20c>)
 8002104:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	4798      	blx	r3
    } 
  }
  return status;
 8002126:	7bfb      	ldrb	r3, [r7, #15]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40020080 	.word	0x40020080
 8002134:	40020008 	.word	0x40020008
 8002138:	4002001c 	.word	0x4002001c
 800213c:	40020030 	.word	0x40020030
 8002140:	40020044 	.word	0x40020044
 8002144:	40020058 	.word	0x40020058
 8002148:	4002006c 	.word	0x4002006c
 800214c:	40020408 	.word	0x40020408
 8002150:	4002041c 	.word	0x4002041c
 8002154:	40020430 	.word	0x40020430
 8002158:	40020444 	.word	0x40020444
 800215c:	40020400 	.word	0x40020400
 8002160:	40020000 	.word	0x40020000

08002164 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b08b      	sub	sp, #44	@ 0x2c
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800216e:	2300      	movs	r3, #0
 8002170:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002172:	2300      	movs	r3, #0
 8002174:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002176:	e179      	b.n	800246c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002178:	2201      	movs	r2, #1
 800217a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	69fa      	ldr	r2, [r7, #28]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	429a      	cmp	r2, r3
 8002192:	f040 8168 	bne.w	8002466 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	4a96      	ldr	r2, [pc, #600]	@ (80023f4 <HAL_GPIO_Init+0x290>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d05e      	beq.n	800225e <HAL_GPIO_Init+0xfa>
 80021a0:	4a94      	ldr	r2, [pc, #592]	@ (80023f4 <HAL_GPIO_Init+0x290>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d875      	bhi.n	8002292 <HAL_GPIO_Init+0x12e>
 80021a6:	4a94      	ldr	r2, [pc, #592]	@ (80023f8 <HAL_GPIO_Init+0x294>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d058      	beq.n	800225e <HAL_GPIO_Init+0xfa>
 80021ac:	4a92      	ldr	r2, [pc, #584]	@ (80023f8 <HAL_GPIO_Init+0x294>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d86f      	bhi.n	8002292 <HAL_GPIO_Init+0x12e>
 80021b2:	4a92      	ldr	r2, [pc, #584]	@ (80023fc <HAL_GPIO_Init+0x298>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d052      	beq.n	800225e <HAL_GPIO_Init+0xfa>
 80021b8:	4a90      	ldr	r2, [pc, #576]	@ (80023fc <HAL_GPIO_Init+0x298>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d869      	bhi.n	8002292 <HAL_GPIO_Init+0x12e>
 80021be:	4a90      	ldr	r2, [pc, #576]	@ (8002400 <HAL_GPIO_Init+0x29c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d04c      	beq.n	800225e <HAL_GPIO_Init+0xfa>
 80021c4:	4a8e      	ldr	r2, [pc, #568]	@ (8002400 <HAL_GPIO_Init+0x29c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d863      	bhi.n	8002292 <HAL_GPIO_Init+0x12e>
 80021ca:	4a8e      	ldr	r2, [pc, #568]	@ (8002404 <HAL_GPIO_Init+0x2a0>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d046      	beq.n	800225e <HAL_GPIO_Init+0xfa>
 80021d0:	4a8c      	ldr	r2, [pc, #560]	@ (8002404 <HAL_GPIO_Init+0x2a0>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d85d      	bhi.n	8002292 <HAL_GPIO_Init+0x12e>
 80021d6:	2b12      	cmp	r3, #18
 80021d8:	d82a      	bhi.n	8002230 <HAL_GPIO_Init+0xcc>
 80021da:	2b12      	cmp	r3, #18
 80021dc:	d859      	bhi.n	8002292 <HAL_GPIO_Init+0x12e>
 80021de:	a201      	add	r2, pc, #4	@ (adr r2, 80021e4 <HAL_GPIO_Init+0x80>)
 80021e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e4:	0800225f 	.word	0x0800225f
 80021e8:	08002239 	.word	0x08002239
 80021ec:	0800224b 	.word	0x0800224b
 80021f0:	0800228d 	.word	0x0800228d
 80021f4:	08002293 	.word	0x08002293
 80021f8:	08002293 	.word	0x08002293
 80021fc:	08002293 	.word	0x08002293
 8002200:	08002293 	.word	0x08002293
 8002204:	08002293 	.word	0x08002293
 8002208:	08002293 	.word	0x08002293
 800220c:	08002293 	.word	0x08002293
 8002210:	08002293 	.word	0x08002293
 8002214:	08002293 	.word	0x08002293
 8002218:	08002293 	.word	0x08002293
 800221c:	08002293 	.word	0x08002293
 8002220:	08002293 	.word	0x08002293
 8002224:	08002293 	.word	0x08002293
 8002228:	08002241 	.word	0x08002241
 800222c:	08002255 	.word	0x08002255
 8002230:	4a75      	ldr	r2, [pc, #468]	@ (8002408 <HAL_GPIO_Init+0x2a4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d013      	beq.n	800225e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002236:	e02c      	b.n	8002292 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	623b      	str	r3, [r7, #32]
          break;
 800223e:	e029      	b.n	8002294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	3304      	adds	r3, #4
 8002246:	623b      	str	r3, [r7, #32]
          break;
 8002248:	e024      	b.n	8002294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	3308      	adds	r3, #8
 8002250:	623b      	str	r3, [r7, #32]
          break;
 8002252:	e01f      	b.n	8002294 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	330c      	adds	r3, #12
 800225a:	623b      	str	r3, [r7, #32]
          break;
 800225c:	e01a      	b.n	8002294 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d102      	bne.n	800226c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002266:	2304      	movs	r3, #4
 8002268:	623b      	str	r3, [r7, #32]
          break;
 800226a:	e013      	b.n	8002294 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d105      	bne.n	8002280 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002274:	2308      	movs	r3, #8
 8002276:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69fa      	ldr	r2, [r7, #28]
 800227c:	611a      	str	r2, [r3, #16]
          break;
 800227e:	e009      	b.n	8002294 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002280:	2308      	movs	r3, #8
 8002282:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	615a      	str	r2, [r3, #20]
          break;
 800228a:	e003      	b.n	8002294 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800228c:	2300      	movs	r3, #0
 800228e:	623b      	str	r3, [r7, #32]
          break;
 8002290:	e000      	b.n	8002294 <HAL_GPIO_Init+0x130>
          break;
 8002292:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	2bff      	cmp	r3, #255	@ 0xff
 8002298:	d801      	bhi.n	800229e <HAL_GPIO_Init+0x13a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	e001      	b.n	80022a2 <HAL_GPIO_Init+0x13e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3304      	adds	r3, #4
 80022a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	2bff      	cmp	r3, #255	@ 0xff
 80022a8:	d802      	bhi.n	80022b0 <HAL_GPIO_Init+0x14c>
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	e002      	b.n	80022b6 <HAL_GPIO_Init+0x152>
 80022b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b2:	3b08      	subs	r3, #8
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	210f      	movs	r1, #15
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	fa01 f303 	lsl.w	r3, r1, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	401a      	ands	r2, r3
 80022c8:	6a39      	ldr	r1, [r7, #32]
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	fa01 f303 	lsl.w	r3, r1, r3
 80022d0:	431a      	orrs	r2, r3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 80c1 	beq.w	8002466 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022e4:	4b49      	ldr	r3, [pc, #292]	@ (800240c <HAL_GPIO_Init+0x2a8>)
 80022e6:	699b      	ldr	r3, [r3, #24]
 80022e8:	4a48      	ldr	r2, [pc, #288]	@ (800240c <HAL_GPIO_Init+0x2a8>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6193      	str	r3, [r2, #24]
 80022f0:	4b46      	ldr	r3, [pc, #280]	@ (800240c <HAL_GPIO_Init+0x2a8>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	f003 0301 	and.w	r3, r3, #1
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022fc:	4a44      	ldr	r2, [pc, #272]	@ (8002410 <HAL_GPIO_Init+0x2ac>)
 80022fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002300:	089b      	lsrs	r3, r3, #2
 8002302:	3302      	adds	r3, #2
 8002304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002308:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	220f      	movs	r2, #15
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4013      	ands	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a3c      	ldr	r2, [pc, #240]	@ (8002414 <HAL_GPIO_Init+0x2b0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d01f      	beq.n	8002368 <HAL_GPIO_Init+0x204>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a3b      	ldr	r2, [pc, #236]	@ (8002418 <HAL_GPIO_Init+0x2b4>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d019      	beq.n	8002364 <HAL_GPIO_Init+0x200>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a3a      	ldr	r2, [pc, #232]	@ (800241c <HAL_GPIO_Init+0x2b8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d013      	beq.n	8002360 <HAL_GPIO_Init+0x1fc>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a39      	ldr	r2, [pc, #228]	@ (8002420 <HAL_GPIO_Init+0x2bc>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d00d      	beq.n	800235c <HAL_GPIO_Init+0x1f8>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a38      	ldr	r2, [pc, #224]	@ (8002424 <HAL_GPIO_Init+0x2c0>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d007      	beq.n	8002358 <HAL_GPIO_Init+0x1f4>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a37      	ldr	r2, [pc, #220]	@ (8002428 <HAL_GPIO_Init+0x2c4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d101      	bne.n	8002354 <HAL_GPIO_Init+0x1f0>
 8002350:	2305      	movs	r3, #5
 8002352:	e00a      	b.n	800236a <HAL_GPIO_Init+0x206>
 8002354:	2306      	movs	r3, #6
 8002356:	e008      	b.n	800236a <HAL_GPIO_Init+0x206>
 8002358:	2304      	movs	r3, #4
 800235a:	e006      	b.n	800236a <HAL_GPIO_Init+0x206>
 800235c:	2303      	movs	r3, #3
 800235e:	e004      	b.n	800236a <HAL_GPIO_Init+0x206>
 8002360:	2302      	movs	r3, #2
 8002362:	e002      	b.n	800236a <HAL_GPIO_Init+0x206>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <HAL_GPIO_Init+0x206>
 8002368:	2300      	movs	r3, #0
 800236a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800236c:	f002 0203 	and.w	r2, r2, #3
 8002370:	0092      	lsls	r2, r2, #2
 8002372:	4093      	lsls	r3, r2
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800237a:	4925      	ldr	r1, [pc, #148]	@ (8002410 <HAL_GPIO_Init+0x2ac>)
 800237c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237e:	089b      	lsrs	r3, r3, #2
 8002380:	3302      	adds	r3, #2
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d006      	beq.n	80023a2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002394:	4b25      	ldr	r3, [pc, #148]	@ (800242c <HAL_GPIO_Init+0x2c8>)
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	4924      	ldr	r1, [pc, #144]	@ (800242c <HAL_GPIO_Init+0x2c8>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	608b      	str	r3, [r1, #8]
 80023a0:	e006      	b.n	80023b0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023a2:	4b22      	ldr	r3, [pc, #136]	@ (800242c <HAL_GPIO_Init+0x2c8>)
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	4920      	ldr	r1, [pc, #128]	@ (800242c <HAL_GPIO_Init+0x2c8>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d006      	beq.n	80023ca <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023bc:	4b1b      	ldr	r3, [pc, #108]	@ (800242c <HAL_GPIO_Init+0x2c8>)
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	491a      	ldr	r1, [pc, #104]	@ (800242c <HAL_GPIO_Init+0x2c8>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	60cb      	str	r3, [r1, #12]
 80023c8:	e006      	b.n	80023d8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023ca:	4b18      	ldr	r3, [pc, #96]	@ (800242c <HAL_GPIO_Init+0x2c8>)
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	4916      	ldr	r1, [pc, #88]	@ (800242c <HAL_GPIO_Init+0x2c8>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d025      	beq.n	8002430 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023e4:	4b11      	ldr	r3, [pc, #68]	@ (800242c <HAL_GPIO_Init+0x2c8>)
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	4910      	ldr	r1, [pc, #64]	@ (800242c <HAL_GPIO_Init+0x2c8>)
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]
 80023f0:	e025      	b.n	800243e <HAL_GPIO_Init+0x2da>
 80023f2:	bf00      	nop
 80023f4:	10320000 	.word	0x10320000
 80023f8:	10310000 	.word	0x10310000
 80023fc:	10220000 	.word	0x10220000
 8002400:	10210000 	.word	0x10210000
 8002404:	10120000 	.word	0x10120000
 8002408:	10110000 	.word	0x10110000
 800240c:	40021000 	.word	0x40021000
 8002410:	40010000 	.word	0x40010000
 8002414:	40010800 	.word	0x40010800
 8002418:	40010c00 	.word	0x40010c00
 800241c:	40011000 	.word	0x40011000
 8002420:	40011400 	.word	0x40011400
 8002424:	40011800 	.word	0x40011800
 8002428:	40011c00 	.word	0x40011c00
 800242c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002430:	4b15      	ldr	r3, [pc, #84]	@ (8002488 <HAL_GPIO_Init+0x324>)
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	43db      	mvns	r3, r3
 8002438:	4913      	ldr	r1, [pc, #76]	@ (8002488 <HAL_GPIO_Init+0x324>)
 800243a:	4013      	ands	r3, r2
 800243c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d006      	beq.n	8002458 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800244a:	4b0f      	ldr	r3, [pc, #60]	@ (8002488 <HAL_GPIO_Init+0x324>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	490e      	ldr	r1, [pc, #56]	@ (8002488 <HAL_GPIO_Init+0x324>)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	4313      	orrs	r3, r2
 8002454:	600b      	str	r3, [r1, #0]
 8002456:	e006      	b.n	8002466 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002458:	4b0b      	ldr	r3, [pc, #44]	@ (8002488 <HAL_GPIO_Init+0x324>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	43db      	mvns	r3, r3
 8002460:	4909      	ldr	r1, [pc, #36]	@ (8002488 <HAL_GPIO_Init+0x324>)
 8002462:	4013      	ands	r3, r2
 8002464:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	3301      	adds	r3, #1
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002472:	fa22 f303 	lsr.w	r3, r2, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	f47f ae7e 	bne.w	8002178 <HAL_GPIO_Init+0x14>
  }
}
 800247c:	bf00      	nop
 800247e:	bf00      	nop
 8002480:	372c      	adds	r7, #44	@ 0x2c
 8002482:	46bd      	mov	sp, r7
 8002484:	bc80      	pop	{r7}
 8002486:	4770      	bx	lr
 8002488:	40010400 	.word	0x40010400

0800248c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	887b      	ldrh	r3, [r7, #2]
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	e001      	b.n	80024ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr

080024ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
 80024c2:	460b      	mov	r3, r1
 80024c4:	807b      	strh	r3, [r7, #2]
 80024c6:	4613      	mov	r3, r2
 80024c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024ca:	787b      	ldrb	r3, [r7, #1]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024d0:	887a      	ldrh	r2, [r7, #2]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024d6:	e003      	b.n	80024e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024d8:	887b      	ldrh	r3, [r7, #2]
 80024da:	041a      	lsls	r2, r3, #16
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	611a      	str	r2, [r3, #16]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
	...

080024ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80024f6:	4b08      	ldr	r3, [pc, #32]	@ (8002518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d006      	beq.n	8002510 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002502:	4a05      	ldr	r2, [pc, #20]	@ (8002518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002508:	88fb      	ldrh	r3, [r7, #6]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fe42 	bl	8001194 <HAL_GPIO_EXTI_Callback>
  }
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40010400 	.word	0x40010400

0800251c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e272      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 8087 	beq.w	800264a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800253c:	4b92      	ldr	r3, [pc, #584]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 030c 	and.w	r3, r3, #12
 8002544:	2b04      	cmp	r3, #4
 8002546:	d00c      	beq.n	8002562 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002548:	4b8f      	ldr	r3, [pc, #572]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 030c 	and.w	r3, r3, #12
 8002550:	2b08      	cmp	r3, #8
 8002552:	d112      	bne.n	800257a <HAL_RCC_OscConfig+0x5e>
 8002554:	4b8c      	ldr	r3, [pc, #560]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800255c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002560:	d10b      	bne.n	800257a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002562:	4b89      	ldr	r3, [pc, #548]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d06c      	beq.n	8002648 <HAL_RCC_OscConfig+0x12c>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d168      	bne.n	8002648 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e24c      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002582:	d106      	bne.n	8002592 <HAL_RCC_OscConfig+0x76>
 8002584:	4b80      	ldr	r3, [pc, #512]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a7f      	ldr	r2, [pc, #508]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 800258a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	e02e      	b.n	80025f0 <HAL_RCC_OscConfig+0xd4>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x98>
 800259a:	4b7b      	ldr	r3, [pc, #492]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a7a      	ldr	r2, [pc, #488]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	4b78      	ldr	r3, [pc, #480]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a77      	ldr	r2, [pc, #476]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	e01d      	b.n	80025f0 <HAL_RCC_OscConfig+0xd4>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025bc:	d10c      	bne.n	80025d8 <HAL_RCC_OscConfig+0xbc>
 80025be:	4b72      	ldr	r3, [pc, #456]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a71      	ldr	r2, [pc, #452]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	4b6f      	ldr	r3, [pc, #444]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a6e      	ldr	r2, [pc, #440]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e00b      	b.n	80025f0 <HAL_RCC_OscConfig+0xd4>
 80025d8:	4b6b      	ldr	r3, [pc, #428]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	4b68      	ldr	r3, [pc, #416]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a67      	ldr	r2, [pc, #412]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 80025ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d013      	beq.n	8002620 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7ff fb88 	bl	8001d0c <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002600:	f7ff fb84 	bl	8001d0c <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	@ 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e200      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002612:	4b5d      	ldr	r3, [pc, #372]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0xe4>
 800261e:	e014      	b.n	800264a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7ff fb74 	bl	8001d0c <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002628:	f7ff fb70 	bl	8001d0c <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	@ 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e1ec      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263a:	4b53      	ldr	r3, [pc, #332]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x10c>
 8002646:	e000      	b.n	800264a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d063      	beq.n	800271e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002656:	4b4c      	ldr	r3, [pc, #304]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 030c 	and.w	r3, r3, #12
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00b      	beq.n	800267a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002662:	4b49      	ldr	r3, [pc, #292]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b08      	cmp	r3, #8
 800266c:	d11c      	bne.n	80026a8 <HAL_RCC_OscConfig+0x18c>
 800266e:	4b46      	ldr	r3, [pc, #280]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d116      	bne.n	80026a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267a:	4b43      	ldr	r3, [pc, #268]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d005      	beq.n	8002692 <HAL_RCC_OscConfig+0x176>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d001      	beq.n	8002692 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e1c0      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002692:	4b3d      	ldr	r3, [pc, #244]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	4939      	ldr	r1, [pc, #228]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a6:	e03a      	b.n	800271e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d020      	beq.n	80026f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026b0:	4b36      	ldr	r3, [pc, #216]	@ (800278c <HAL_RCC_OscConfig+0x270>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b6:	f7ff fb29 	bl	8001d0c <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026be:	f7ff fb25 	bl	8001d0c <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e1a1      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0f0      	beq.n	80026be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4927      	ldr	r1, [pc, #156]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	600b      	str	r3, [r1, #0]
 80026f0:	e015      	b.n	800271e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026f2:	4b26      	ldr	r3, [pc, #152]	@ (800278c <HAL_RCC_OscConfig+0x270>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7ff fb08 	bl	8001d0c <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002700:	f7ff fb04 	bl	8001d0c <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e180      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002712:	4b1d      	ldr	r3, [pc, #116]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1f0      	bne.n	8002700 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d03a      	beq.n	80027a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d019      	beq.n	8002766 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002732:	4b17      	ldr	r3, [pc, #92]	@ (8002790 <HAL_RCC_OscConfig+0x274>)
 8002734:	2201      	movs	r2, #1
 8002736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002738:	f7ff fae8 	bl	8001d0c <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002740:	f7ff fae4 	bl	8001d0c <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e160      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002752:	4b0d      	ldr	r3, [pc, #52]	@ (8002788 <HAL_RCC_OscConfig+0x26c>)
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800275e:	2001      	movs	r0, #1
 8002760:	f000 fafe 	bl	8002d60 <RCC_Delay>
 8002764:	e01c      	b.n	80027a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002766:	4b0a      	ldr	r3, [pc, #40]	@ (8002790 <HAL_RCC_OscConfig+0x274>)
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276c:	f7ff face 	bl	8001d0c <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002772:	e00f      	b.n	8002794 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002774:	f7ff faca 	bl	8001d0c <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d908      	bls.n	8002794 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e146      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000
 800278c:	42420000 	.word	0x42420000
 8002790:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002794:	4b92      	ldr	r3, [pc, #584]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1e9      	bne.n	8002774 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80a6 	beq.w	80028fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ae:	2300      	movs	r3, #0
 80027b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027b2:	4b8b      	ldr	r3, [pc, #556]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10d      	bne.n	80027da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027be:	4b88      	ldr	r3, [pc, #544]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	4a87      	ldr	r2, [pc, #540]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 80027c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027c8:	61d3      	str	r3, [r2, #28]
 80027ca:	4b85      	ldr	r3, [pc, #532]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d6:	2301      	movs	r3, #1
 80027d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027da:	4b82      	ldr	r3, [pc, #520]	@ (80029e4 <HAL_RCC_OscConfig+0x4c8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d118      	bne.n	8002818 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e6:	4b7f      	ldr	r3, [pc, #508]	@ (80029e4 <HAL_RCC_OscConfig+0x4c8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a7e      	ldr	r2, [pc, #504]	@ (80029e4 <HAL_RCC_OscConfig+0x4c8>)
 80027ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f2:	f7ff fa8b 	bl	8001d0c <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fa:	f7ff fa87 	bl	8001d0c <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b64      	cmp	r3, #100	@ 0x64
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e103      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280c:	4b75      	ldr	r3, [pc, #468]	@ (80029e4 <HAL_RCC_OscConfig+0x4c8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d106      	bne.n	800282e <HAL_RCC_OscConfig+0x312>
 8002820:	4b6f      	ldr	r3, [pc, #444]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	4a6e      	ldr	r2, [pc, #440]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6213      	str	r3, [r2, #32]
 800282c:	e02d      	b.n	800288a <HAL_RCC_OscConfig+0x36e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10c      	bne.n	8002850 <HAL_RCC_OscConfig+0x334>
 8002836:	4b6a      	ldr	r3, [pc, #424]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	4a69      	ldr	r2, [pc, #420]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 800283c:	f023 0301 	bic.w	r3, r3, #1
 8002840:	6213      	str	r3, [r2, #32]
 8002842:	4b67      	ldr	r3, [pc, #412]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	4a66      	ldr	r2, [pc, #408]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002848:	f023 0304 	bic.w	r3, r3, #4
 800284c:	6213      	str	r3, [r2, #32]
 800284e:	e01c      	b.n	800288a <HAL_RCC_OscConfig+0x36e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	2b05      	cmp	r3, #5
 8002856:	d10c      	bne.n	8002872 <HAL_RCC_OscConfig+0x356>
 8002858:	4b61      	ldr	r3, [pc, #388]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	4a60      	ldr	r2, [pc, #384]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 800285e:	f043 0304 	orr.w	r3, r3, #4
 8002862:	6213      	str	r3, [r2, #32]
 8002864:	4b5e      	ldr	r3, [pc, #376]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	4a5d      	ldr	r2, [pc, #372]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6213      	str	r3, [r2, #32]
 8002870:	e00b      	b.n	800288a <HAL_RCC_OscConfig+0x36e>
 8002872:	4b5b      	ldr	r3, [pc, #364]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	4a5a      	ldr	r2, [pc, #360]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002878:	f023 0301 	bic.w	r3, r3, #1
 800287c:	6213      	str	r3, [r2, #32]
 800287e:	4b58      	ldr	r3, [pc, #352]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	4a57      	ldr	r2, [pc, #348]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002884:	f023 0304 	bic.w	r3, r3, #4
 8002888:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d015      	beq.n	80028be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002892:	f7ff fa3b 	bl	8001d0c <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002898:	e00a      	b.n	80028b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f7ff fa37 	bl	8001d0c <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e0b1      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b0:	4b4b      	ldr	r3, [pc, #300]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0ee      	beq.n	800289a <HAL_RCC_OscConfig+0x37e>
 80028bc:	e014      	b.n	80028e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028be:	f7ff fa25 	bl	8001d0c <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028c4:	e00a      	b.n	80028dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c6:	f7ff fa21 	bl	8001d0c <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e09b      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028dc:	4b40      	ldr	r3, [pc, #256]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1ee      	bne.n	80028c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d105      	bne.n	80028fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ee:	4b3c      	ldr	r3, [pc, #240]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	4a3b      	ldr	r2, [pc, #236]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 8087 	beq.w	8002a12 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002904:	4b36      	ldr	r3, [pc, #216]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	d061      	beq.n	80029d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	2b02      	cmp	r3, #2
 8002916:	d146      	bne.n	80029a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002918:	4b33      	ldr	r3, [pc, #204]	@ (80029e8 <HAL_RCC_OscConfig+0x4cc>)
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7ff f9f5 	bl	8001d0c <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002926:	f7ff f9f1 	bl	8001d0c <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e06d      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002938:	4b29      	ldr	r3, [pc, #164]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f0      	bne.n	8002926 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800294c:	d108      	bne.n	8002960 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800294e:	4b24      	ldr	r3, [pc, #144]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	4921      	ldr	r1, [pc, #132]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 800295c:	4313      	orrs	r3, r2
 800295e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002960:	4b1f      	ldr	r3, [pc, #124]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a19      	ldr	r1, [r3, #32]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	430b      	orrs	r3, r1
 8002972:	491b      	ldr	r1, [pc, #108]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	4313      	orrs	r3, r2
 8002976:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002978:	4b1b      	ldr	r3, [pc, #108]	@ (80029e8 <HAL_RCC_OscConfig+0x4cc>)
 800297a:	2201      	movs	r2, #1
 800297c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800297e:	f7ff f9c5 	bl	8001d0c <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002986:	f7ff f9c1 	bl	8001d0c <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e03d      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002998:	4b11      	ldr	r3, [pc, #68]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x46a>
 80029a4:	e035      	b.n	8002a12 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a6:	4b10      	ldr	r3, [pc, #64]	@ (80029e8 <HAL_RCC_OscConfig+0x4cc>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ac:	f7ff f9ae 	bl	8001d0c <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b4:	f7ff f9aa 	bl	8001d0c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e026      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029c6:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <HAL_RCC_OscConfig+0x4c4>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x498>
 80029d2:	e01e      	b.n	8002a12 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d107      	bne.n	80029ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e019      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40007000 	.word	0x40007000
 80029e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029ec:	4b0b      	ldr	r3, [pc, #44]	@ (8002a1c <HAL_RCC_OscConfig+0x500>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d106      	bne.n	8002a0e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d001      	beq.n	8002a12 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3718      	adds	r7, #24
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40021000 	.word	0x40021000

08002a20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0d0      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a34:	4b6a      	ldr	r3, [pc, #424]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d910      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b67      	ldr	r3, [pc, #412]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 0207 	bic.w	r2, r3, #7
 8002a4a:	4965      	ldr	r1, [pc, #404]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b63      	ldr	r3, [pc, #396]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d001      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0b8      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d020      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a7c:	4b59      	ldr	r3, [pc, #356]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	4a58      	ldr	r2, [pc, #352]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a82:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a86:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a94:	4b53      	ldr	r3, [pc, #332]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	4a52      	ldr	r2, [pc, #328]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a9e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aa0:	4b50      	ldr	r3, [pc, #320]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	494d      	ldr	r1, [pc, #308]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d040      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d107      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac6:	4b47      	ldr	r3, [pc, #284]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d115      	bne.n	8002afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e07f      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d107      	bne.n	8002aee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ade:	4b41      	ldr	r3, [pc, #260]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d109      	bne.n	8002afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e073      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aee:	4b3d      	ldr	r3, [pc, #244]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e06b      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002afe:	4b39      	ldr	r3, [pc, #228]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f023 0203 	bic.w	r2, r3, #3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	4936      	ldr	r1, [pc, #216]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b10:	f7ff f8fc 	bl	8001d0c <HAL_GetTick>
 8002b14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b18:	f7ff f8f8 	bl	8001d0c <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e053      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f003 020c 	and.w	r2, r3, #12
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d1eb      	bne.n	8002b18 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b40:	4b27      	ldr	r3, [pc, #156]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d210      	bcs.n	8002b70 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b4e:	4b24      	ldr	r3, [pc, #144]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 0207 	bic.w	r2, r3, #7
 8002b56:	4922      	ldr	r1, [pc, #136]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5e:	4b20      	ldr	r3, [pc, #128]	@ (8002be0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e032      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b7c:	4b19      	ldr	r3, [pc, #100]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4916      	ldr	r1, [pc, #88]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0308 	and.w	r3, r3, #8
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d009      	beq.n	8002bae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b9a:	4b12      	ldr	r3, [pc, #72]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	490e      	ldr	r1, [pc, #56]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bae:	f000 f821 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8002be4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	f003 030f 	and.w	r3, r3, #15
 8002bbe:	490a      	ldr	r1, [pc, #40]	@ (8002be8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bc0:	5ccb      	ldrb	r3, [r1, r3]
 8002bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc6:	4a09      	ldr	r2, [pc, #36]	@ (8002bec <HAL_RCC_ClockConfig+0x1cc>)
 8002bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bca:	4b09      	ldr	r3, [pc, #36]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1d0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fe ff36 	bl	8001a40 <HAL_InitTick>

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40022000 	.word	0x40022000
 8002be4:	40021000 	.word	0x40021000
 8002be8:	080088cc 	.word	0x080088cc
 8002bec:	20000004 	.word	0x20000004
 8002bf0:	20000008 	.word	0x20000008

08002bf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60fb      	str	r3, [r7, #12]
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	2300      	movs	r3, #0
 8002c04:	617b      	str	r3, [r7, #20]
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d002      	beq.n	8002c24 <HAL_RCC_GetSysClockFreq+0x30>
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d003      	beq.n	8002c2a <HAL_RCC_GetSysClockFreq+0x36>
 8002c22:	e027      	b.n	8002c74 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c24:	4b19      	ldr	r3, [pc, #100]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c26:	613b      	str	r3, [r7, #16]
      break;
 8002c28:	e027      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	0c9b      	lsrs	r3, r3, #18
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	4a17      	ldr	r2, [pc, #92]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c34:	5cd3      	ldrb	r3, [r2, r3]
 8002c36:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d010      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c42:	4b11      	ldr	r3, [pc, #68]	@ (8002c88 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	0c5b      	lsrs	r3, r3, #17
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	4a11      	ldr	r2, [pc, #68]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c4e:	5cd3      	ldrb	r3, [r2, r3]
 8002c50:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a0d      	ldr	r2, [pc, #52]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c56:	fb03 f202 	mul.w	r2, r3, r2
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	e004      	b.n	8002c6e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a0c      	ldr	r2, [pc, #48]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c68:	fb02 f303 	mul.w	r3, r2, r3
 8002c6c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	613b      	str	r3, [r7, #16]
      break;
 8002c72:	e002      	b.n	8002c7a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c74:	4b05      	ldr	r3, [pc, #20]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c76:	613b      	str	r3, [r7, #16]
      break;
 8002c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c7a:	693b      	ldr	r3, [r7, #16]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40021000 	.word	0x40021000
 8002c8c:	007a1200 	.word	0x007a1200
 8002c90:	080088e4 	.word	0x080088e4
 8002c94:	080088f4 	.word	0x080088f4
 8002c98:	003d0900 	.word	0x003d0900

08002c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca0:	4b02      	ldr	r3, [pc, #8]	@ (8002cac <HAL_RCC_GetHCLKFreq+0x10>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	20000004 	.word	0x20000004

08002cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cb4:	f7ff fff2 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	4b05      	ldr	r3, [pc, #20]	@ (8002cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	0a1b      	lsrs	r3, r3, #8
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	4903      	ldr	r1, [pc, #12]	@ (8002cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cc6:	5ccb      	ldrb	r3, [r1, r3]
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	080088dc 	.word	0x080088dc

08002cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cdc:	f7ff ffde 	bl	8002c9c <HAL_RCC_GetHCLKFreq>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	4b05      	ldr	r3, [pc, #20]	@ (8002cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	0adb      	lsrs	r3, r3, #11
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	4903      	ldr	r1, [pc, #12]	@ (8002cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cee:	5ccb      	ldrb	r3, [r1, r3]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	080088dc 	.word	0x080088dc

08002d00 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	220f      	movs	r2, #15
 8002d0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d10:	4b11      	ldr	r3, [pc, #68]	@ (8002d58 <HAL_RCC_GetClockConfig+0x58>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0203 	and.w	r2, r3, #3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d58 <HAL_RCC_GetClockConfig+0x58>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d28:	4b0b      	ldr	r3, [pc, #44]	@ (8002d58 <HAL_RCC_GetClockConfig+0x58>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002d34:	4b08      	ldr	r3, [pc, #32]	@ (8002d58 <HAL_RCC_GetClockConfig+0x58>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	08db      	lsrs	r3, r3, #3
 8002d3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d42:	4b06      	ldr	r3, [pc, #24]	@ (8002d5c <HAL_RCC_GetClockConfig+0x5c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0207 	and.w	r2, r3, #7
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	40022000 	.word	0x40022000

08002d60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d68:	4b0a      	ldr	r3, [pc, #40]	@ (8002d94 <RCC_Delay+0x34>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8002d98 <RCC_Delay+0x38>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	0a5b      	lsrs	r3, r3, #9
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	fb02 f303 	mul.w	r3, r2, r3
 8002d7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d7c:	bf00      	nop
  }
  while (Delay --);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1e5a      	subs	r2, r3, #1
 8002d82:	60fa      	str	r2, [r7, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1f9      	bne.n	8002d7c <RCC_Delay+0x1c>
}
 8002d88:	bf00      	nop
 8002d8a:	bf00      	nop
 8002d8c:	3714      	adds	r7, #20
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr
 8002d94:	20000004 	.word	0x20000004
 8002d98:	10624dd3 	.word	0x10624dd3

08002d9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e076      	b.n	8002e9c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d108      	bne.n	8002dc8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dbe:	d009      	beq.n	8002dd4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	61da      	str	r2, [r3, #28]
 8002dc6:	e005      	b.n	8002dd4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7fe fd3e 	bl	8001870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e0a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002e1c:	431a      	orrs	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e26:	431a      	orrs	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	431a      	orrs	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e58:	ea42 0103 	orr.w	r1, r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e60:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	0c1a      	lsrs	r2, r3, #16
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f002 0204 	and.w	r2, r2, #4
 8002e7a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	69da      	ldr	r2, [r3, #28]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e8a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_SPI_Transmit_IT+0x20>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e06f      	b.n	8002fa4 <HAL_SPI_Transmit_IT+0x100>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if ((pData == NULL) || (Size == 0U))
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HAL_SPI_Transmit_IT+0x34>
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d102      	bne.n	8002ede <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002edc:	e05d      	b.n	8002f9a <HAL_SPI_Transmit_IT+0xf6>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d002      	beq.n	8002ef0 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 8002eea:	2302      	movs	r3, #2
 8002eec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eee:	e054      	b.n	8002f9a <HAL_SPI_Transmit_IT+0xf6>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	88fa      	ldrh	r2, [r7, #6]
 8002f08:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	88fa      	ldrh	r2, [r7, #6]
 8002f0e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_SPI_Transmit_IT+0x94>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb0 <HAL_SPI_Transmit_IT+0x10c>)
 8002f34:	645a      	str	r2, [r3, #68]	@ 0x44
 8002f36:	e002      	b.n	8002f3e <HAL_SPI_Transmit_IT+0x9a>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fb4 <HAL_SPI_Transmit_IT+0x110>)
 8002f3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f46:	d10f      	bne.n	8002f68 <HAL_SPI_Transmit_IT+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f66:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8002f76:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f82:	2b40      	cmp	r3, #64	@ 0x40
 8002f84:	d008      	beq.n	8002f98 <HAL_SPI_Transmit_IT+0xf4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	e000      	b.n	8002f9a <HAL_SPI_Transmit_IT+0xf6>
  }

error :
 8002f98:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	371c      	adds	r7, #28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	080031f5 	.word	0x080031f5
 8002fb4:	080031af 	.word	0x080031af

08002fb8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10e      	bne.n	8002ff8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d009      	beq.n	8002ff8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d004      	beq.n	8002ff8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
    return;
 8002ff6:	e0b7      	b.n	8003168 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d009      	beq.n	8003016 <HAL_SPI_IRQHandler+0x5e>
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003008:	2b00      	cmp	r3, #0
 800300a:	d004      	beq.n	8003016 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	4798      	blx	r3
    return;
 8003014:	e0a8      	b.n	8003168 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	f003 0320 	and.w	r3, r3, #32
 800301c:	2b00      	cmp	r3, #0
 800301e:	d105      	bne.n	800302c <HAL_SPI_IRQHandler+0x74>
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 809e 	beq.w	8003168 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b00      	cmp	r3, #0
 8003034:	f000 8098 	beq.w	8003168 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800303e:	2b00      	cmp	r3, #0
 8003040:	d023      	beq.n	800308a <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b03      	cmp	r3, #3
 800304c:	d011      	beq.n	8003072 <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003052:	f043 0204 	orr.w	r2, r3, #4
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	617b      	str	r3, [r7, #20]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	e00b      	b.n	800308a <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	693b      	ldr	r3, [r7, #16]
        return;
 8003088:	e06e      	b.n	8003168 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b00      	cmp	r3, #0
 8003092:	d014      	beq.n	80030be <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003098:	f043 0201 	orr.w	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d04f      	beq.n	8003166 <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80030d4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d104      	bne.n	80030f2 <HAL_SPI_IRQHandler+0x13a>
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d034      	beq.n	800315c <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0203 	bic.w	r2, r2, #3
 8003100:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003106:	2b00      	cmp	r3, #0
 8003108:	d011      	beq.n	800312e <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800310e:	4a18      	ldr	r2, [pc, #96]	@ (8003170 <HAL_SPI_IRQHandler+0x1b8>)
 8003110:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe ff1c 	bl	8001f54 <HAL_DMA_Abort_IT>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003126:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003132:	2b00      	cmp	r3, #0
 8003134:	d016      	beq.n	8003164 <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800313a:	4a0d      	ldr	r2, [pc, #52]	@ (8003170 <HAL_SPI_IRQHandler+0x1b8>)
 800313c:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe ff06 	bl	8001f54 <HAL_DMA_Abort_IT>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003152:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800315a:	e003      	b.n	8003164 <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f809 	bl	8003174 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003162:	e000      	b.n	8003166 <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 8003164:	bf00      	nop
    return;
 8003166:	bf00      	nop
  }
}
 8003168:	3720      	adds	r7, #32
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	08003187 	.word	0x08003187

08003174 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	bc80      	pop	{r7}
 8003184:	4770      	bx	lr

08003186 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b084      	sub	sp, #16
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003192:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80031a0:	68f8      	ldr	r0, [r7, #12]
 80031a2:	f7ff ffe7 	bl	8003174 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80031a6:	bf00      	nop
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b082      	sub	sp, #8
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	330c      	adds	r3, #12
 80031c0:	7812      	ldrb	r2, [r2, #0]
 80031c2:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d102      	bne.n	80031ec <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f8cc 	bl	8003384 <SPI_CloseTx_ISR>
  }
}
 80031ec:	bf00      	nop
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003200:	881a      	ldrh	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320c:	1c9a      	adds	r2, r3, #2
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount--;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003216:	b29b      	uxth	r3, r3
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	86da      	strh	r2, [r3, #54]	@ 0x36

  if (hspi->TxXferCount == 0U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003224:	b29b      	uxth	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d102      	bne.n	8003230 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f8aa 	bl	8003384 <SPI_CloseTx_ISR>
  }
}
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	4613      	mov	r3, r2
 8003246:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003248:	f7fe fd60 	bl	8001d0c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	4413      	add	r3, r2
 8003256:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003258:	f7fe fd58 	bl	8001d0c <HAL_GetTick>
 800325c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800325e:	4b39      	ldr	r3, [pc, #228]	@ (8003344 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	015b      	lsls	r3, r3, #5
 8003264:	0d1b      	lsrs	r3, r3, #20
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	fb02 f303 	mul.w	r3, r2, r3
 800326c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800326e:	e054      	b.n	800331a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003276:	d050      	beq.n	800331a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003278:	f7fe fd48 	bl	8001d0c <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	429a      	cmp	r2, r3
 8003286:	d902      	bls.n	800328e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d13d      	bne.n	800330a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800329c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032a6:	d111      	bne.n	80032cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032b0:	d004      	beq.n	80032bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ba:	d107      	bne.n	80032cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032d4:	d10f      	bne.n	80032f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e017      	b.n	800333a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d101      	bne.n	8003314 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	3b01      	subs	r3, #1
 8003318:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689a      	ldr	r2, [r3, #8]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4013      	ands	r3, r2
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	429a      	cmp	r2, r3
 8003328:	bf0c      	ite	eq
 800332a:	2301      	moveq	r3, #1
 800332c:	2300      	movne	r3, #0
 800332e:	b2db      	uxtb	r3, r3
 8003330:	461a      	mov	r2, r3
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	429a      	cmp	r2, r3
 8003336:	d19b      	bne.n	8003270 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3720      	adds	r7, #32
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000004 	.word	0x20000004

08003348 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af02      	add	r7, sp, #8
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2200      	movs	r2, #0
 800335c:	2180      	movs	r1, #128	@ 0x80
 800335e:	68f8      	ldr	r0, [r7, #12]
 8003360:	f7ff ff6a 	bl	8003238 <SPI_WaitFlagStateUntilTimeout>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336e:	f043 0220 	orr.w	r2, r3, #32
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e000      	b.n	800337c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800338c:	4b2c      	ldr	r3, [pc, #176]	@ (8003440 <SPI_CloseTx_ISR+0xbc>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a2c      	ldr	r2, [pc, #176]	@ (8003444 <SPI_CloseTx_ISR+0xc0>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	0a5b      	lsrs	r3, r3, #9
 8003398:	2264      	movs	r2, #100	@ 0x64
 800339a:	fb02 f303 	mul.w	r3, r2, r3
 800339e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033a0:	f7fe fcb4 	bl	8001d0c <HAL_GetTick>
 80033a4:	6178      	str	r0, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d106      	bne.n	80033ba <SPI_CloseTx_ISR+0x36>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b0:	f043 0220 	orr.w	r2, r3, #32
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80033b8:	e009      	b.n	80033ce <SPI_CloseTx_ISR+0x4a>
    }
    count--;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	3b01      	subs	r3, #1
 80033be:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0eb      	beq.n	80033a6 <SPI_CloseTx_ISR+0x22>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80033dc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	2164      	movs	r1, #100	@ 0x64
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff ffb0 	bl	8003348 <SPI_EndRxTxTransaction>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <SPI_CloseTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f2:	f043 0220 	orr.w	r2, r3, #32
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <SPI_CloseTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003402:	2300      	movs	r3, #0
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <SPI_CloseTx_ISR+0xac>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff fea3 	bl	8003174 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800342e:	e002      	b.n	8003436 <SPI_CloseTx_ISR+0xb2>
    HAL_SPI_TxCpltCallback(hspi);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f004 f8a5 	bl	8007580 <HAL_SPI_TxCpltCallback>
}
 8003436:	bf00      	nop
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000004 	.word	0x20000004
 8003444:	057619f1 	.word	0x057619f1

08003448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e041      	b.n	80034de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d106      	bne.n	8003474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7fe fa46 	bl	8001900 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3304      	adds	r3, #4
 8003484:	4619      	mov	r1, r3
 8003486:	4610      	mov	r0, r2
 8003488:	f000 fab0 	bl	80039ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d001      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e044      	b.n	800358a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f042 0201 	orr.w	r2, r2, #1
 8003516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a1d      	ldr	r2, [pc, #116]	@ (8003594 <HAL_TIM_Base_Start_IT+0xac>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d018      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x6c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a1c      	ldr	r2, [pc, #112]	@ (8003598 <HAL_TIM_Base_Start_IT+0xb0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d013      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x6c>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003534:	d00e      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x6c>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a18      	ldr	r2, [pc, #96]	@ (800359c <HAL_TIM_Base_Start_IT+0xb4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d009      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x6c>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a16      	ldr	r2, [pc, #88]	@ (80035a0 <HAL_TIM_Base_Start_IT+0xb8>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d004      	beq.n	8003554 <HAL_TIM_Base_Start_IT+0x6c>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a15      	ldr	r2, [pc, #84]	@ (80035a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d111      	bne.n	8003578 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b06      	cmp	r3, #6
 8003564:	d010      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0201 	orr.w	r2, r2, #1
 8003574:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003576:	e007      	b.n	8003588 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0201 	orr.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr
 8003594:	40012c00 	.word	0x40012c00
 8003598:	40013400 	.word	0x40013400
 800359c:	40000400 	.word	0x40000400
 80035a0:	40000800 	.word	0x40000800
 80035a4:	40000c00 	.word	0x40000c00

080035a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6a1a      	ldr	r2, [r3, #32]
 80035c6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10f      	bne.n	80035f0 <HAL_TIM_Base_Stop_IT+0x48>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6a1a      	ldr	r2, [r3, #32]
 80035d6:	f240 4344 	movw	r3, #1092	@ 0x444
 80035da:	4013      	ands	r3, r2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d107      	bne.n	80035f0 <HAL_TIM_Base_Stop_IT+0x48>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0201 	bic.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	bc80      	pop	{r7}
 8003602:	4770      	bx	lr

08003604 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b02      	cmp	r3, #2
 8003618:	d122      	bne.n	8003660 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b02      	cmp	r3, #2
 8003626:	d11b      	bne.n	8003660 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0202 	mvn.w	r2, #2
 8003630:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f003 0303 	and.w	r3, r3, #3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f9b4 	bl	80039b4 <HAL_TIM_IC_CaptureCallback>
 800364c:	e005      	b.n	800365a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f9a7 	bl	80039a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 f9b6 	bl	80039c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b04      	cmp	r3, #4
 800366c:	d122      	bne.n	80036b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b04      	cmp	r3, #4
 800367a:	d11b      	bne.n	80036b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0204 	mvn.w	r2, #4
 8003684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2202      	movs	r2, #2
 800368a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f98a 	bl	80039b4 <HAL_TIM_IC_CaptureCallback>
 80036a0:	e005      	b.n	80036ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f97d 	bl	80039a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f98c 	bl	80039c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d122      	bne.n	8003708 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d11b      	bne.n	8003708 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0208 	mvn.w	r2, #8
 80036d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2204      	movs	r2, #4
 80036de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	f003 0303 	and.w	r3, r3, #3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f960 	bl	80039b4 <HAL_TIM_IC_CaptureCallback>
 80036f4:	e005      	b.n	8003702 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f953 	bl	80039a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f962 	bl	80039c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0310 	and.w	r3, r3, #16
 8003712:	2b10      	cmp	r3, #16
 8003714:	d122      	bne.n	800375c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	2b10      	cmp	r3, #16
 8003722:	d11b      	bne.n	800375c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0210 	mvn.w	r2, #16
 800372c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2208      	movs	r2, #8
 8003732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f936 	bl	80039b4 <HAL_TIM_IC_CaptureCallback>
 8003748:	e005      	b.n	8003756 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f929 	bl	80039a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f938 	bl	80039c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b01      	cmp	r3, #1
 8003768:	d10e      	bne.n	8003788 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d107      	bne.n	8003788 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0201 	mvn.w	r2, #1
 8003780:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fd fffa 	bl	800177c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003792:	2b80      	cmp	r3, #128	@ 0x80
 8003794:	d10e      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a0:	2b80      	cmp	r3, #128	@ 0x80
 80037a2:	d107      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80037ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 faa1 	bl	8003cf6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037be:	2b40      	cmp	r3, #64	@ 0x40
 80037c0:	d10e      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037cc:	2b40      	cmp	r3, #64	@ 0x40
 80037ce:	d107      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f8fc 	bl	80039d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	2b20      	cmp	r3, #32
 80037ec:	d10e      	bne.n	800380c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d107      	bne.n	800380c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f06f 0220 	mvn.w	r2, #32
 8003804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 fa6c 	bl	8003ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800380c:	bf00      	nop
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_TIM_ConfigClockSource+0x1c>
 800382c:	2302      	movs	r3, #2
 800382e:	e0b4      	b.n	800399a <HAL_TIM_ConfigClockSource+0x186>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800384e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003856:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003868:	d03e      	beq.n	80038e8 <HAL_TIM_ConfigClockSource+0xd4>
 800386a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800386e:	f200 8087 	bhi.w	8003980 <HAL_TIM_ConfigClockSource+0x16c>
 8003872:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003876:	f000 8086 	beq.w	8003986 <HAL_TIM_ConfigClockSource+0x172>
 800387a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800387e:	d87f      	bhi.n	8003980 <HAL_TIM_ConfigClockSource+0x16c>
 8003880:	2b70      	cmp	r3, #112	@ 0x70
 8003882:	d01a      	beq.n	80038ba <HAL_TIM_ConfigClockSource+0xa6>
 8003884:	2b70      	cmp	r3, #112	@ 0x70
 8003886:	d87b      	bhi.n	8003980 <HAL_TIM_ConfigClockSource+0x16c>
 8003888:	2b60      	cmp	r3, #96	@ 0x60
 800388a:	d050      	beq.n	800392e <HAL_TIM_ConfigClockSource+0x11a>
 800388c:	2b60      	cmp	r3, #96	@ 0x60
 800388e:	d877      	bhi.n	8003980 <HAL_TIM_ConfigClockSource+0x16c>
 8003890:	2b50      	cmp	r3, #80	@ 0x50
 8003892:	d03c      	beq.n	800390e <HAL_TIM_ConfigClockSource+0xfa>
 8003894:	2b50      	cmp	r3, #80	@ 0x50
 8003896:	d873      	bhi.n	8003980 <HAL_TIM_ConfigClockSource+0x16c>
 8003898:	2b40      	cmp	r3, #64	@ 0x40
 800389a:	d058      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x13a>
 800389c:	2b40      	cmp	r3, #64	@ 0x40
 800389e:	d86f      	bhi.n	8003980 <HAL_TIM_ConfigClockSource+0x16c>
 80038a0:	2b30      	cmp	r3, #48	@ 0x30
 80038a2:	d064      	beq.n	800396e <HAL_TIM_ConfigClockSource+0x15a>
 80038a4:	2b30      	cmp	r3, #48	@ 0x30
 80038a6:	d86b      	bhi.n	8003980 <HAL_TIM_ConfigClockSource+0x16c>
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	d060      	beq.n	800396e <HAL_TIM_ConfigClockSource+0x15a>
 80038ac:	2b20      	cmp	r3, #32
 80038ae:	d867      	bhi.n	8003980 <HAL_TIM_ConfigClockSource+0x16c>
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d05c      	beq.n	800396e <HAL_TIM_ConfigClockSource+0x15a>
 80038b4:	2b10      	cmp	r3, #16
 80038b6:	d05a      	beq.n	800396e <HAL_TIM_ConfigClockSource+0x15a>
 80038b8:	e062      	b.n	8003980 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038ca:	f000 f980 	bl	8003bce <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80038dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	609a      	str	r2, [r3, #8]
      break;
 80038e6:	e04f      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038f8:	f000 f969 	bl	8003bce <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800390a:	609a      	str	r2, [r3, #8]
      break;
 800390c:	e03c      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800391a:	461a      	mov	r2, r3
 800391c:	f000 f8e0 	bl	8003ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2150      	movs	r1, #80	@ 0x50
 8003926:	4618      	mov	r0, r3
 8003928:	f000 f937 	bl	8003b9a <TIM_ITRx_SetConfig>
      break;
 800392c:	e02c      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800393a:	461a      	mov	r2, r3
 800393c:	f000 f8fe 	bl	8003b3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2160      	movs	r1, #96	@ 0x60
 8003946:	4618      	mov	r0, r3
 8003948:	f000 f927 	bl	8003b9a <TIM_ITRx_SetConfig>
      break;
 800394c:	e01c      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800395a:	461a      	mov	r2, r3
 800395c:	f000 f8c0 	bl	8003ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2140      	movs	r1, #64	@ 0x40
 8003966:	4618      	mov	r0, r3
 8003968:	f000 f917 	bl	8003b9a <TIM_ITRx_SetConfig>
      break;
 800396c:	e00c      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4619      	mov	r1, r3
 8003978:	4610      	mov	r0, r2
 800397a:	f000 f90e 	bl	8003b9a <TIM_ITRx_SetConfig>
      break;
 800397e:	e003      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
      break;
 8003984:	e000      	b.n	8003988 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003986:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003998:	7bfb      	ldrb	r3, [r7, #15]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr

080039b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr

080039c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039ce:	bf00      	nop
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr

080039d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr
	...

080039ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a33      	ldr	r2, [pc, #204]	@ (8003acc <TIM_Base_SetConfig+0xe0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d013      	beq.n	8003a2c <TIM_Base_SetConfig+0x40>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a32      	ldr	r2, [pc, #200]	@ (8003ad0 <TIM_Base_SetConfig+0xe4>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00f      	beq.n	8003a2c <TIM_Base_SetConfig+0x40>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a12:	d00b      	beq.n	8003a2c <TIM_Base_SetConfig+0x40>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a2f      	ldr	r2, [pc, #188]	@ (8003ad4 <TIM_Base_SetConfig+0xe8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d007      	beq.n	8003a2c <TIM_Base_SetConfig+0x40>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a2e      	ldr	r2, [pc, #184]	@ (8003ad8 <TIM_Base_SetConfig+0xec>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d003      	beq.n	8003a2c <TIM_Base_SetConfig+0x40>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a2d      	ldr	r2, [pc, #180]	@ (8003adc <TIM_Base_SetConfig+0xf0>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d108      	bne.n	8003a3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a22      	ldr	r2, [pc, #136]	@ (8003acc <TIM_Base_SetConfig+0xe0>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d013      	beq.n	8003a6e <TIM_Base_SetConfig+0x82>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a21      	ldr	r2, [pc, #132]	@ (8003ad0 <TIM_Base_SetConfig+0xe4>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00f      	beq.n	8003a6e <TIM_Base_SetConfig+0x82>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a54:	d00b      	beq.n	8003a6e <TIM_Base_SetConfig+0x82>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a1e      	ldr	r2, [pc, #120]	@ (8003ad4 <TIM_Base_SetConfig+0xe8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d007      	beq.n	8003a6e <TIM_Base_SetConfig+0x82>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad8 <TIM_Base_SetConfig+0xec>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d003      	beq.n	8003a6e <TIM_Base_SetConfig+0x82>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a1c      	ldr	r2, [pc, #112]	@ (8003adc <TIM_Base_SetConfig+0xf0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d108      	bne.n	8003a80 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	689a      	ldr	r2, [r3, #8]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a09      	ldr	r2, [pc, #36]	@ (8003acc <TIM_Base_SetConfig+0xe0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d003      	beq.n	8003ab4 <TIM_Base_SetConfig+0xc8>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	4a08      	ldr	r2, [pc, #32]	@ (8003ad0 <TIM_Base_SetConfig+0xe4>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d103      	bne.n	8003abc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	615a      	str	r2, [r3, #20]
}
 8003ac2:	bf00      	nop
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr
 8003acc:	40012c00 	.word	0x40012c00
 8003ad0:	40013400 	.word	0x40013400
 8003ad4:	40000400 	.word	0x40000400
 8003ad8:	40000800 	.word	0x40000800
 8003adc:	40000c00 	.word	0x40000c00

08003ae0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6a1b      	ldr	r3, [r3, #32]
 8003af0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	f023 0201 	bic.w	r2, r3, #1
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	f023 030a 	bic.w	r3, r3, #10
 8003b1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b1e:	697a      	ldr	r2, [r7, #20]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	621a      	str	r2, [r3, #32]
}
 8003b32:	bf00      	nop
 8003b34:	371c      	adds	r7, #28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	f023 0210 	bic.w	r2, r3, #16
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	031b      	lsls	r3, r3, #12
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	697a      	ldr	r2, [r7, #20]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	621a      	str	r2, [r3, #32]
}
 8003b90:	bf00      	nop
 8003b92:	371c      	adds	r7, #28
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bc80      	pop	{r7}
 8003b98:	4770      	bx	lr

08003b9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b085      	sub	sp, #20
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
 8003ba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f043 0307 	orr.w	r3, r3, #7
 8003bbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	609a      	str	r2, [r3, #8]
}
 8003bc4:	bf00      	nop
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b087      	sub	sp, #28
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003be8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	021a      	lsls	r2, r3, #8
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	609a      	str	r2, [r3, #8]
}
 8003c02:	bf00      	nop
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr

08003c0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e050      	b.n	8003cc6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a1b      	ldr	r2, [pc, #108]	@ (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d018      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a19      	ldr	r2, [pc, #100]	@ (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d013      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c7a:	d00e      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a15      	ldr	r2, [pc, #84]	@ (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d009      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a14      	ldr	r2, [pc, #80]	@ (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a12      	ldr	r2, [pc, #72]	@ (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d10c      	bne.n	8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ca0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	40012c00 	.word	0x40012c00
 8003cd4:	40013400 	.word	0x40013400
 8003cd8:	40000400 	.word	0x40000400
 8003cdc:	40000800 	.word	0x40000800
 8003ce0:	40000c00 	.word	0x40000c00

08003ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr

08003cf6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cf6:	b480      	push	{r7}
 8003cf8:	b083      	sub	sp, #12
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr

08003d08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d101      	bne.n	8003d1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e042      	b.n	8003da0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fd fe32 	bl	8001998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2224      	movs	r2, #36	@ 0x24
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68da      	ldr	r2, [r3, #12]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fcff 	bl	8004750 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695a      	ldr	r2, [r3, #20]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	4613      	mov	r3, r2
 8003db4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d121      	bne.n	8003e06 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d002      	beq.n	8003dce <HAL_UART_Transmit_IT+0x26>
 8003dc8:	88fb      	ldrh	r3, [r7, #6]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e01a      	b.n	8003e08 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	88fa      	ldrh	r2, [r7, #6]
 8003ddc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	88fa      	ldrh	r2, [r7, #6]
 8003de2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2221      	movs	r2, #33	@ 0x21
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e00:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	e000      	b.n	8003e08 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003e06:	2302      	movs	r3, #2
  }
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr

08003e12 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	d112      	bne.n	8003e52 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <HAL_UART_Receive_IT+0x26>
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e00b      	b.n	8003e54 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e42:	88fb      	ldrh	r3, [r7, #6]
 8003e44:	461a      	mov	r2, r3
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 faad 	bl	80043a8 <UART_Start_Receive_IT>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	e000      	b.n	8003e54 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
  }
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b0ba      	sub	sp, #232	@ 0xe8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10f      	bne.n	8003ec2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ea6:	f003 0320 	and.w	r3, r3, #32
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d009      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x66>
 8003eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fb8a 	bl	80045d4 <UART_Receive_IT>
      return;
 8003ec0:	e25b      	b.n	800437a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 80de 	beq.w	8004088 <HAL_UART_IRQHandler+0x22c>
 8003ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d106      	bne.n	8003ee6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003edc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 80d1 	beq.w	8004088 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00b      	beq.n	8003f0a <HAL_UART_IRQHandler+0xae>
 8003ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f02:	f043 0201 	orr.w	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00b      	beq.n	8003f2e <HAL_UART_IRQHandler+0xd2>
 8003f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d005      	beq.n	8003f2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f26:	f043 0202 	orr.w	r2, r3, #2
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00b      	beq.n	8003f52 <HAL_UART_IRQHandler+0xf6>
 8003f3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d005      	beq.n	8003f52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4a:	f043 0204 	orr.w	r2, r3, #4
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d011      	beq.n	8003f82 <HAL_UART_IRQHandler+0x126>
 8003f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d105      	bne.n	8003f76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7a:	f043 0208 	orr.w	r2, r3, #8
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 81f2 	beq.w	8004370 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_UART_IRQHandler+0x14e>
 8003f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f000 fb15 	bl	80045d4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bf14      	ite	ne
 8003fb8:	2301      	movne	r3, #1
 8003fba:	2300      	moveq	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d103      	bne.n	8003fd6 <HAL_UART_IRQHandler+0x17a>
 8003fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d04f      	beq.n	8004076 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 fa1f 	bl	800441a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d041      	beq.n	800406e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3314      	adds	r3, #20
 8003ff0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004000:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004004:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004008:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3314      	adds	r3, #20
 8004012:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004016:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800401a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004022:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004026:	e841 2300 	strex	r3, r2, [r1]
 800402a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800402e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1d9      	bne.n	8003fea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403a:	2b00      	cmp	r3, #0
 800403c:	d013      	beq.n	8004066 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004042:	4a7e      	ldr	r2, [pc, #504]	@ (800423c <HAL_UART_IRQHandler+0x3e0>)
 8004044:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404a:	4618      	mov	r0, r3
 800404c:	f7fd ff82 	bl	8001f54 <HAL_DMA_Abort_IT>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d016      	beq.n	8004084 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004060:	4610      	mov	r0, r2
 8004062:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004064:	e00e      	b.n	8004084 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f98a 	bl	8004380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800406c:	e00a      	b.n	8004084 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f986 	bl	8004380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004074:	e006      	b.n	8004084 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f982 	bl	8004380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004082:	e175      	b.n	8004370 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004084:	bf00      	nop
    return;
 8004086:	e173      	b.n	8004370 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800408c:	2b01      	cmp	r3, #1
 800408e:	f040 814f 	bne.w	8004330 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 8148 	beq.w	8004330 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 8141 	beq.w	8004330 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040ae:	2300      	movs	r3, #0
 80040b0:	60bb      	str	r3, [r7, #8]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60bb      	str	r3, [r7, #8]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 80b6 	beq.w	8004240 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 8145 	beq.w	8004374 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040f2:	429a      	cmp	r2, r3
 80040f4:	f080 813e 	bcs.w	8004374 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	2b20      	cmp	r3, #32
 8004108:	f000 8088 	beq.w	800421c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	330c      	adds	r3, #12
 8004112:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004122:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004126:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800412a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	330c      	adds	r3, #12
 8004134:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004138:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800413c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004140:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004144:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004148:	e841 2300 	strex	r3, r2, [r1]
 800414c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004150:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1d9      	bne.n	800410c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3314      	adds	r3, #20
 800415e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004160:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004162:	e853 3f00 	ldrex	r3, [r3]
 8004166:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004168:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800416a:	f023 0301 	bic.w	r3, r3, #1
 800416e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	3314      	adds	r3, #20
 8004178:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800417c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004180:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004184:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004188:	e841 2300 	strex	r3, r2, [r1]
 800418c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800418e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e1      	bne.n	8004158 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3314      	adds	r3, #20
 800419a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3314      	adds	r3, #20
 80041b4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041b8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041ba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041bc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041c0:	e841 2300 	strex	r3, r2, [r1]
 80041c4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1e3      	bne.n	8004194 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	330c      	adds	r3, #12
 80041e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041ec:	f023 0310 	bic.w	r3, r3, #16
 80041f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	330c      	adds	r3, #12
 80041fa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80041fe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004200:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004204:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800420c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e3      	bne.n	80041da <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004216:	4618      	mov	r0, r3
 8004218:	f7fd fe61 	bl	8001ede <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800422a:	b29b      	uxth	r3, r3
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	b29b      	uxth	r3, r3
 8004230:	4619      	mov	r1, r3
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f8ad 	bl	8004392 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004238:	e09c      	b.n	8004374 <HAL_UART_IRQHandler+0x518>
 800423a:	bf00      	nop
 800423c:	080044df 	.word	0x080044df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004248:	b29b      	uxth	r3, r3
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 808e 	beq.w	8004378 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800425c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 8089 	beq.w	8004378 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	330c      	adds	r3, #12
 800426c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004270:	e853 3f00 	ldrex	r3, [r3]
 8004274:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004278:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800427c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	330c      	adds	r3, #12
 8004286:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800428a:	647a      	str	r2, [r7, #68]	@ 0x44
 800428c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004290:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d1e3      	bne.n	8004266 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3314      	adds	r3, #20
 80042a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	623b      	str	r3, [r7, #32]
   return(result);
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	f023 0301 	bic.w	r3, r3, #1
 80042b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3314      	adds	r3, #20
 80042be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80042c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1e3      	bne.n	800429e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	330c      	adds	r3, #12
 80042ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	e853 3f00 	ldrex	r3, [r3]
 80042f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0310 	bic.w	r3, r3, #16
 80042fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	330c      	adds	r3, #12
 8004304:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004308:	61fa      	str	r2, [r7, #28]
 800430a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430c:	69b9      	ldr	r1, [r7, #24]
 800430e:	69fa      	ldr	r2, [r7, #28]
 8004310:	e841 2300 	strex	r3, r2, [r1]
 8004314:	617b      	str	r3, [r7, #20]
   return(result);
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1e3      	bne.n	80042e4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004322:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004326:	4619      	mov	r1, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f832 	bl	8004392 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800432e:	e023      	b.n	8004378 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004330:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004338:	2b00      	cmp	r3, #0
 800433a:	d009      	beq.n	8004350 <HAL_UART_IRQHandler+0x4f4>
 800433c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f8dc 	bl	8004506 <UART_Transmit_IT>
    return;
 800434e:	e014      	b.n	800437a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00e      	beq.n	800437a <HAL_UART_IRQHandler+0x51e>
 800435c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f91b 	bl	80045a4 <UART_EndTransmit_IT>
    return;
 800436e:	e004      	b.n	800437a <HAL_UART_IRQHandler+0x51e>
    return;
 8004370:	bf00      	nop
 8004372:	e002      	b.n	800437a <HAL_UART_IRQHandler+0x51e>
      return;
 8004374:	bf00      	nop
 8004376:	e000      	b.n	800437a <HAL_UART_IRQHandler+0x51e>
      return;
 8004378:	bf00      	nop
  }
}
 800437a:	37e8      	adds	r7, #232	@ 0xe8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr

08004392 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	460b      	mov	r3, r1
 800439c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr

080043a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	60b9      	str	r1, [r7, #8]
 80043b2:	4613      	mov	r3, r2
 80043b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	88fa      	ldrh	r2, [r7, #6]
 80043c0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	88fa      	ldrh	r2, [r7, #6]
 80043c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2222      	movs	r2, #34	@ 0x22
 80043d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d007      	beq.n	80043ee <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043ec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	695a      	ldr	r2, [r3, #20]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f042 0201 	orr.w	r2, r2, #1
 80043fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0220 	orr.w	r2, r2, #32
 800440c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr

0800441a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800441a:	b480      	push	{r7}
 800441c:	b095      	sub	sp, #84	@ 0x54
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	330c      	adds	r3, #12
 8004428:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004434:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004438:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	330c      	adds	r3, #12
 8004440:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004442:	643a      	str	r2, [r7, #64]	@ 0x40
 8004444:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004448:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e5      	bne.n	8004422 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3314      	adds	r3, #20
 800445c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	e853 3f00 	ldrex	r3, [r3]
 8004464:	61fb      	str	r3, [r7, #28]
   return(result);
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	f023 0301 	bic.w	r3, r3, #1
 800446c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3314      	adds	r3, #20
 8004474:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004476:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004478:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800447a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800447c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800447e:	e841 2300 	strex	r3, r2, [r1]
 8004482:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1e5      	bne.n	8004456 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448e:	2b01      	cmp	r3, #1
 8004490:	d119      	bne.n	80044c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	330c      	adds	r3, #12
 8004498:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	e853 3f00 	ldrex	r3, [r3]
 80044a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f023 0310 	bic.w	r3, r3, #16
 80044a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	330c      	adds	r3, #12
 80044b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044b2:	61ba      	str	r2, [r7, #24]
 80044b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b6:	6979      	ldr	r1, [r7, #20]
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	e841 2300 	strex	r3, r2, [r1]
 80044be:	613b      	str	r3, [r7, #16]
   return(result);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1e5      	bne.n	8004492 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2220      	movs	r2, #32
 80044ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044d4:	bf00      	nop
 80044d6:	3754      	adds	r7, #84	@ 0x54
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc80      	pop	{r7}
 80044dc:	4770      	bx	lr

080044de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7ff ff41 	bl	8004380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004506:	b480      	push	{r7}
 8004508:	b085      	sub	sp, #20
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b21      	cmp	r3, #33	@ 0x21
 8004518:	d13e      	bne.n	8004598 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004522:	d114      	bne.n	800454e <UART_Transmit_IT+0x48>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d110      	bne.n	800454e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	881b      	ldrh	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004540:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	1c9a      	adds	r2, r3, #2
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	621a      	str	r2, [r3, #32]
 800454c:	e008      	b.n	8004560 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	1c59      	adds	r1, r3, #1
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6211      	str	r1, [r2, #32]
 8004558:	781a      	ldrb	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004564:	b29b      	uxth	r3, r3
 8004566:	3b01      	subs	r3, #1
 8004568:	b29b      	uxth	r3, r3
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	4619      	mov	r1, r3
 800456e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004570:	2b00      	cmp	r3, #0
 8004572:	d10f      	bne.n	8004594 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	68da      	ldr	r2, [r3, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004582:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68da      	ldr	r2, [r3, #12]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004592:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004594:	2300      	movs	r3, #0
 8004596:	e000      	b.n	800459a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004598:	2302      	movs	r3, #2
  }
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr

080045a4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80045ba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f003 fcc1 	bl	8007f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b08c      	sub	sp, #48	@ 0x30
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b22      	cmp	r3, #34	@ 0x22
 80045e6:	f040 80ae 	bne.w	8004746 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045f2:	d117      	bne.n	8004624 <UART_Receive_IT+0x50>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d113      	bne.n	8004624 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004604:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	b29b      	uxth	r3, r3
 800460e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004612:	b29a      	uxth	r2, r3
 8004614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004616:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461c:	1c9a      	adds	r2, r3, #2
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	629a      	str	r2, [r3, #40]	@ 0x28
 8004622:	e026      	b.n	8004672 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004628:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800462a:	2300      	movs	r3, #0
 800462c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004636:	d007      	beq.n	8004648 <UART_Receive_IT+0x74>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d10a      	bne.n	8004656 <UART_Receive_IT+0x82>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d106      	bne.n	8004656 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	b2da      	uxtb	r2, r3
 8004650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004652:	701a      	strb	r2, [r3, #0]
 8004654:	e008      	b.n	8004668 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004662:	b2da      	uxtb	r2, r3
 8004664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004666:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29b      	uxth	r3, r3
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	4619      	mov	r1, r3
 8004680:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004682:	2b00      	cmp	r3, #0
 8004684:	d15d      	bne.n	8004742 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0220 	bic.w	r2, r2, #32
 8004694:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68da      	ldr	r2, [r3, #12]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0201 	bic.w	r2, r2, #1
 80046b4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d135      	bne.n	8004738 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	330c      	adds	r3, #12
 80046d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	e853 3f00 	ldrex	r3, [r3]
 80046e0:	613b      	str	r3, [r7, #16]
   return(result);
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f023 0310 	bic.w	r3, r3, #16
 80046e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	330c      	adds	r3, #12
 80046f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046f2:	623a      	str	r2, [r7, #32]
 80046f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f6:	69f9      	ldr	r1, [r7, #28]
 80046f8:	6a3a      	ldr	r2, [r7, #32]
 80046fa:	e841 2300 	strex	r3, r2, [r1]
 80046fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1e5      	bne.n	80046d2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	2b10      	cmp	r3, #16
 8004712:	d10a      	bne.n	800472a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004714:	2300      	movs	r3, #0
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800472e:	4619      	mov	r1, r3
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff fe2e 	bl	8004392 <HAL_UARTEx_RxEventCallback>
 8004736:	e002      	b.n	800473e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f003 fc4f 	bl	8007fdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	e002      	b.n	8004748 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e000      	b.n	8004748 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004746:	2302      	movs	r3, #2
  }
}
 8004748:	4618      	mov	r0, r3
 800474a:	3730      	adds	r7, #48	@ 0x30
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	431a      	orrs	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
 8004786:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800478a:	f023 030c 	bic.w	r3, r3, #12
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6812      	ldr	r2, [r2, #0]
 8004792:	68b9      	ldr	r1, [r7, #8]
 8004794:	430b      	orrs	r3, r1
 8004796:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004864 <UART_SetConfig+0x114>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d103      	bne.n	80047c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047b8:	f7fe fa8e 	bl	8002cd8 <HAL_RCC_GetPCLK2Freq>
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	e002      	b.n	80047c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80047c0:	f7fe fa76 	bl	8002cb0 <HAL_RCC_GetPCLK1Freq>
 80047c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	4613      	mov	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4413      	add	r3, r2
 80047ce:	009a      	lsls	r2, r3, #2
 80047d0:	441a      	add	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047dc:	4a22      	ldr	r2, [pc, #136]	@ (8004868 <UART_SetConfig+0x118>)
 80047de:	fba2 2303 	umull	r2, r3, r2, r3
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	0119      	lsls	r1, r3, #4
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	4613      	mov	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	009a      	lsls	r2, r3, #2
 80047f0:	441a      	add	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80047fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004868 <UART_SetConfig+0x118>)
 80047fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	2064      	movs	r0, #100	@ 0x64
 8004806:	fb00 f303 	mul.w	r3, r0, r3
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	3332      	adds	r3, #50	@ 0x32
 8004810:	4a15      	ldr	r2, [pc, #84]	@ (8004868 <UART_SetConfig+0x118>)
 8004812:	fba2 2303 	umull	r2, r3, r2, r3
 8004816:	095b      	lsrs	r3, r3, #5
 8004818:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800481c:	4419      	add	r1, r3
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	009a      	lsls	r2, r3, #2
 8004828:	441a      	add	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	fbb2 f2f3 	udiv	r2, r2, r3
 8004834:	4b0c      	ldr	r3, [pc, #48]	@ (8004868 <UART_SetConfig+0x118>)
 8004836:	fba3 0302 	umull	r0, r3, r3, r2
 800483a:	095b      	lsrs	r3, r3, #5
 800483c:	2064      	movs	r0, #100	@ 0x64
 800483e:	fb00 f303 	mul.w	r3, r0, r3
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	3332      	adds	r3, #50	@ 0x32
 8004848:	4a07      	ldr	r2, [pc, #28]	@ (8004868 <UART_SetConfig+0x118>)
 800484a:	fba2 2303 	umull	r2, r3, r2, r3
 800484e:	095b      	lsrs	r3, r3, #5
 8004850:	f003 020f 	and.w	r2, r3, #15
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	440a      	add	r2, r1
 800485a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800485c:	bf00      	nop
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40013800 	.word	0x40013800
 8004868:	51eb851f 	.word	0x51eb851f

0800486c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f103 0208 	add.w	r2, r3, #8
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f04f 32ff 	mov.w	r2, #4294967295
 8004884:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f103 0208 	add.w	r2, r3, #8
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f103 0208 	add.w	r2, r3, #8
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bc80      	pop	{r7}
 80048a8:	4770      	bx	lr

080048aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr

080048c2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80048c2:	b480      	push	{r7}
 80048c4:	b085      	sub	sp, #20
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d8:	d103      	bne.n	80048e2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e00c      	b.n	80048fc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	3308      	adds	r3, #8
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	e002      	b.n	80048f0 <vListInsert+0x2e>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68ba      	ldr	r2, [r7, #8]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d2f6      	bcs.n	80048ea <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	685a      	ldr	r2, [r3, #4]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8004928:	bf00      	nop
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	bc80      	pop	{r7}
 8004930:	4770      	bx	lr

08004932 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004932:	b480      	push	{r7}
 8004934:	b085      	sub	sp, #20
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	691b      	ldr	r3, [r3, #16]
 800493e:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );



    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6892      	ldr	r2, [r2, #8]
 8004948:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	6852      	ldr	r2, [r2, #4]
 8004952:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	429a      	cmp	r2, r3
 800495c:	d103      	bne.n	8004966 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	1e5a      	subs	r2, r3, #1
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr

08004984 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800498e:	2301      	movs	r3, #1
 8004990:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );

    if( ( pxQueue != NULL ) &&
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d05d      	beq.n	8004a58 <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d059      	beq.n	8004a58 <xQueueGenericReset+0xd4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ac:	2100      	movs	r1, #0
 80049ae:	fba3 2302 	umull	r2, r3, r3, r2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d000      	beq.n	80049b8 <xQueueGenericReset+0x34>
 80049b6:	2101      	movs	r1, #1
 80049b8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d14c      	bne.n	8004a58 <xQueueGenericReset+0xd4>
    {
        taskENTER_CRITICAL();
 80049be:	f001 fe33 	bl	8006628 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80049ce:	fb01 f303 	mul.w	r3, r1, r3
 80049d2:	441a      	add	r2, r3
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2200      	movs	r2, #0
 80049dc:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ee:	3b01      	subs	r3, #1
 80049f0:	68b9      	ldr	r1, [r7, #8]
 80049f2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80049f4:	fb01 f303 	mul.w	r3, r1, r3
 80049f8:	441a      	add	r2, r3
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	22ff      	movs	r2, #255	@ 0xff
 8004a02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	22ff      	movs	r2, #255	@ 0xff
 8004a0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d114      	bne.n	8004a3e <xQueueGenericReset+0xba>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01a      	beq.n	8004a52 <xQueueGenericReset+0xce>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	3310      	adds	r3, #16
 8004a20:	4618      	mov	r0, r3
 8004a22:	f001 f84f 	bl	8005ac4 <xTaskRemoveFromEventList>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d012      	beq.n	8004a52 <xQueueGenericReset+0xce>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8004a68 <xQueueGenericReset+0xe4>)
 8004a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	e009      	b.n	8004a52 <xQueueGenericReset+0xce>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	3310      	adds	r3, #16
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff ff12 	bl	800486c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	3324      	adds	r3, #36	@ 0x24
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f7ff ff0d 	bl	800486c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004a52:	f001 fe03 	bl	800665c <vPortExitCritical>
 8004a56:	e001      	b.n	8004a5c <xQueueGenericReset+0xd8>
    }
    else
    {
        xReturn = pdFAIL;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	e000ed04 	.word	0xe000ed04

08004a6c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08a      	sub	sp, #40	@ 0x28
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	4613      	mov	r3, r2
 8004a78:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d02d      	beq.n	8004ae0 <xQueueGenericCreate+0x74>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004a84:	2100      	movs	r1, #0
 8004a86:	68ba      	ldr	r2, [r7, #8]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d000      	beq.n	8004a94 <xQueueGenericCreate+0x28>
 8004a92:	2101      	movs	r1, #1
 8004a94:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d122      	bne.n	8004ae0 <xQueueGenericCreate+0x74>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8004aa2:	f113 0f49 	cmn.w	r3, #73	@ 0x49
 8004aa6:	d81b      	bhi.n	8004ae0 <xQueueGenericCreate+0x74>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	fb02 f303 	mul.w	r3, r2, r3
 8004ab0:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	3348      	adds	r3, #72	@ 0x48
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f001 fe4a 	bl	8006750 <pvPortMalloc>
 8004abc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00d      	beq.n	8004ae0 <xQueueGenericCreate+0x74>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	3348      	adds	r3, #72	@ 0x48
 8004acc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ace:	79fa      	ldrb	r2, [r7, #7]
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	4613      	mov	r3, r2
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 f805 	bl	8004aea <prvInitialiseNewQueue>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8004ae0:	69fb      	ldr	r3, [r7, #28]
    }
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3720      	adds	r7, #32
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	607a      	str	r2, [r7, #4]
 8004af6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d103      	bne.n	8004b06 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	e002      	b.n	8004b0c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	68ba      	ldr	r2, [r7, #8]
 8004b16:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b18:	2101      	movs	r1, #1
 8004b1a:	69b8      	ldr	r0, [r7, #24]
 8004b1c:	f7ff ff32 	bl	8004984 <xQueueGenericReset>
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004b20:	bf00      	nop
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b08a      	sub	sp, #40	@ 0x28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b36:	2300      	movs	r3, #0
 8004b38:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	623b      	str	r3, [r7, #32]
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004b3e:	f001 fd73 	bl	8006628 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b46:	6a3b      	ldr	r3, [r7, #32]
 8004b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d302      	bcc.n	8004b54 <xQueueGenericSend+0x2c>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d129      	bne.n	8004ba8 <xQueueGenericSend+0x80>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b54:	683a      	ldr	r2, [r7, #0]
 8004b56:	68b9      	ldr	r1, [r7, #8]
 8004b58:	6a38      	ldr	r0, [r7, #32]
 8004b5a:	f000 fa3b 	bl	8004fd4 <prvCopyDataToQueue>
 8004b5e:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d010      	beq.n	8004b8a <xQueueGenericSend+0x62>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	3324      	adds	r3, #36	@ 0x24
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f000 ffa9 	bl	8005ac4 <xTaskRemoveFromEventList>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d013      	beq.n	8004ba0 <xQueueGenericSend+0x78>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004b78:	4b3f      	ldr	r3, [pc, #252]	@ (8004c78 <xQueueGenericSend+0x150>)
 8004b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	e00a      	b.n	8004ba0 <xQueueGenericSend+0x78>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d007      	beq.n	8004ba0 <xQueueGenericSend+0x78>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8004b90:	4b39      	ldr	r3, [pc, #228]	@ (8004c78 <xQueueGenericSend+0x150>)
 8004b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b96:	601a      	str	r2, [r3, #0]
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004ba0:	f001 fd5c 	bl	800665c <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e063      	b.n	8004c70 <xQueueGenericSend+0x148>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d103      	bne.n	8004bb6 <xQueueGenericSend+0x8e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004bae:	f001 fd55 	bl	800665c <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e05c      	b.n	8004c70 <xQueueGenericSend+0x148>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d106      	bne.n	8004bca <xQueueGenericSend+0xa2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004bbc:	f107 0314 	add.w	r3, r7, #20
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f001 f847 	bl	8005c54 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004bca:	f001 fd47 	bl	800665c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004bce:	f000 fd09 	bl	80055e4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004bd2:	f001 fd29 	bl	8006628 <vPortEnterCritical>
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bdc:	b25b      	sxtb	r3, r3
 8004bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be2:	d103      	bne.n	8004bec <xQueueGenericSend+0xc4>
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bf2:	b25b      	sxtb	r3, r3
 8004bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf8:	d103      	bne.n	8004c02 <xQueueGenericSend+0xda>
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c02:	f001 fd2b 	bl	800665c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c06:	1d3a      	adds	r2, r7, #4
 8004c08:	f107 0314 	add.w	r3, r7, #20
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f001 f836 	bl	8005c80 <xTaskCheckForTimeOut>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d124      	bne.n	8004c64 <xQueueGenericSend+0x13c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c1a:	6a38      	ldr	r0, [r7, #32]
 8004c1c:	f000 fad2 	bl	80051c4 <prvIsQueueFull>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d018      	beq.n	8004c58 <xQueueGenericSend+0x130>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	3310      	adds	r3, #16
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 ff32 	bl	8005a98 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004c34:	6a38      	ldr	r0, [r7, #32]
 8004c36:	f000 fa5d 	bl	80050f4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004c3a:	f000 fce1 	bl	8005600 <xTaskResumeAll>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f47f af7c 	bne.w	8004b3e <xQueueGenericSend+0x16>
                {
                    taskYIELD_WITHIN_API();
 8004c46:	4b0c      	ldr	r3, [pc, #48]	@ (8004c78 <xQueueGenericSend+0x150>)
 8004c48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	e772      	b.n	8004b3e <xQueueGenericSend+0x16>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004c58:	6a38      	ldr	r0, [r7, #32]
 8004c5a:	f000 fa4b 	bl	80050f4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004c5e:	f000 fccf 	bl	8005600 <xTaskResumeAll>
 8004c62:	e76c      	b.n	8004b3e <xQueueGenericSend+0x16>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004c64:	6a38      	ldr	r0, [r7, #32]
 8004c66:	f000 fa45 	bl	80050f4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004c6a:	f000 fcc9 	bl	8005600 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8004c6e:	2300      	movs	r3, #0
        }
    }
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3728      	adds	r7, #40	@ 0x28
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	e000ed04 	.word	0xe000ed04

08004c7c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08e      	sub	sp, #56	@ 0x38
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8004c8e:	f3ef 8211 	mrs	r2, BASEPRI
 8004c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	61fa      	str	r2, [r7, #28]
 8004ca4:	61bb      	str	r3, [r7, #24]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8004ca6:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8004ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d302      	bcc.n	8004cbc <xQueueGenericSendFromISR+0x40>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d137      	bne.n	8004d2c <xQueueGenericSendFromISR+0xb0>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cca:	627b      	str	r3, [r7, #36]	@ 0x24
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	68b9      	ldr	r1, [r7, #8]
 8004cd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cd2:	f000 f97f 	bl	8004fd4 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004cd6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cde:	d112      	bne.n	8004d06 <xQueueGenericSendFromISR+0x8a>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01e      	beq.n	8004d26 <xQueueGenericSendFromISR+0xaa>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cea:	3324      	adds	r3, #36	@ 0x24
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 fee9 	bl	8005ac4 <xTaskRemoveFromEventList>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d016      	beq.n	8004d26 <xQueueGenericSendFromISR+0xaa>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d013      	beq.n	8004d26 <xQueueGenericSendFromISR+0xaa>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2201      	movs	r2, #1
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	e00f      	b.n	8004d26 <xQueueGenericSendFromISR+0xaa>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8004d06:	f000 fd71 	bl	80057ec <uxTaskGetNumberOfTasks>
 8004d0a:	6238      	str	r0, [r7, #32]
 8004d0c:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004d10:	6a3a      	ldr	r2, [r7, #32]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d907      	bls.n	8004d26 <xQueueGenericSendFromISR+0xaa>
 8004d16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	b25a      	sxtb	r2, r3
 8004d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8004d26:	2301      	movs	r3, #1
 8004d28:	637b      	str	r3, [r7, #52]	@ 0x34
        {
 8004d2a:	e001      	b.n	8004d30 <xQueueGenericSendFromISR+0xb4>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d32:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8004d3a:	bf00      	nop
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );

    return xReturn;
 8004d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3738      	adds	r7, #56	@ 0x38
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08a      	sub	sp, #40	@ 0x28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004d54:	2300      	movs	r3, #0
 8004d56:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	623b      	str	r3, [r7, #32]
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004d5c:	f001 fc64 	bl	8006628 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d64:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d01f      	beq.n	8004dac <xQueueReceive+0x64>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d6c:	68b9      	ldr	r1, [r7, #8]
 8004d6e:	6a38      	ldr	r0, [r7, #32]
 8004d70:	f000 f99a 	bl	80050a8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	1e5a      	subs	r2, r3, #1
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d7c:	6a3b      	ldr	r3, [r7, #32]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00f      	beq.n	8004da4 <xQueueReceive+0x5c>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d84:	6a3b      	ldr	r3, [r7, #32]
 8004d86:	3310      	adds	r3, #16
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 fe9b 	bl	8005ac4 <xTaskRemoveFromEventList>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d007      	beq.n	8004da4 <xQueueReceive+0x5c>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004d94:	4b3c      	ldr	r3, [pc, #240]	@ (8004e88 <xQueueReceive+0x140>)
 8004d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004da4:	f001 fc5a 	bl	800665c <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e069      	b.n	8004e80 <xQueueReceive+0x138>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d103      	bne.n	8004dba <xQueueReceive+0x72>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004db2:	f001 fc53 	bl	800665c <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8004db6:	2300      	movs	r3, #0
 8004db8:	e062      	b.n	8004e80 <xQueueReceive+0x138>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d106      	bne.n	8004dce <xQueueReceive+0x86>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004dc0:	f107 0314 	add.w	r3, r7, #20
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f000 ff45 	bl	8005c54 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004dce:	f001 fc45 	bl	800665c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004dd2:	f000 fc07 	bl	80055e4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004dd6:	f001 fc27 	bl	8006628 <vPortEnterCritical>
 8004dda:	6a3b      	ldr	r3, [r7, #32]
 8004ddc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004de0:	b25b      	sxtb	r3, r3
 8004de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de6:	d103      	bne.n	8004df0 <xQueueReceive+0xa8>
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004df6:	b25b      	sxtb	r3, r3
 8004df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfc:	d103      	bne.n	8004e06 <xQueueReceive+0xbe>
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e06:	f001 fc29 	bl	800665c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e0a:	1d3a      	adds	r2, r7, #4
 8004e0c:	f107 0314 	add.w	r3, r7, #20
 8004e10:	4611      	mov	r1, r2
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 ff34 	bl	8005c80 <xTaskCheckForTimeOut>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d123      	bne.n	8004e66 <xQueueReceive+0x11e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e1e:	6a38      	ldr	r0, [r7, #32]
 8004e20:	f000 f9ba 	bl	8005198 <prvIsQueueEmpty>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d017      	beq.n	8004e5a <xQueueReceive+0x112>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	3324      	adds	r3, #36	@ 0x24
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	4611      	mov	r1, r2
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fe30 	bl	8005a98 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004e38:	6a38      	ldr	r0, [r7, #32]
 8004e3a:	f000 f95b 	bl	80050f4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004e3e:	f000 fbdf 	bl	8005600 <xTaskResumeAll>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d189      	bne.n	8004d5c <xQueueReceive+0x14>
                {
                    taskYIELD_WITHIN_API();
 8004e48:	4b0f      	ldr	r3, [pc, #60]	@ (8004e88 <xQueueReceive+0x140>)
 8004e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	e780      	b.n	8004d5c <xQueueReceive+0x14>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004e5a:	6a38      	ldr	r0, [r7, #32]
 8004e5c:	f000 f94a 	bl	80050f4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004e60:	f000 fbce 	bl	8005600 <xTaskResumeAll>
 8004e64:	e77a      	b.n	8004d5c <xQueueReceive+0x14>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004e66:	6a38      	ldr	r0, [r7, #32]
 8004e68:	f000 f944 	bl	80050f4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004e6c:	f000 fbc8 	bl	8005600 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e70:	6a38      	ldr	r0, [r7, #32]
 8004e72:	f000 f991 	bl	8005198 <prvIsQueueEmpty>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f43f af6f 	beq.w	8004d5c <xQueueReceive+0x14>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8004e7e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3728      	adds	r7, #40	@ 0x28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	e000ed04 	.word	0xe000ed04

08004e8c <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08a      	sub	sp, #40	@ 0x28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	623b      	str	r3, [r7, #32]
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004ea0:	f001 fbc2 	bl	8006628 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea8:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d021      	beq.n	8004ef4 <xQueuePeek+0x68>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	61bb      	str	r3, [r7, #24]

                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004eb6:	68b9      	ldr	r1, [r7, #8]
 8004eb8:	6a38      	ldr	r0, [r7, #32]
 8004eba:	f000 f8f5 	bl	80050a8 <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	60da      	str	r2, [r3, #12]

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00f      	beq.n	8004eec <xQueuePeek+0x60>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ecc:	6a3b      	ldr	r3, [r7, #32]
 8004ece:	3324      	adds	r3, #36	@ 0x24
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 fdf7 	bl	8005ac4 <xTaskRemoveFromEventList>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d007      	beq.n	8004eec <xQueuePeek+0x60>
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
 8004edc:	4b3c      	ldr	r3, [pc, #240]	@ (8004fd0 <xQueuePeek+0x144>)
 8004ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	f3bf 8f4f 	dsb	sy
 8004ee8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004eec:	f001 fbb6 	bl	800665c <vPortExitCritical>

                traceRETURN_xQueuePeek( pdPASS );

                return pdPASS;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e069      	b.n	8004fc8 <xQueuePeek+0x13c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d103      	bne.n	8004f02 <xQueuePeek+0x76>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004efa:	f001 fbaf 	bl	800665c <vPortExitCritical>

                    traceQUEUE_PEEK_FAILED( pxQueue );
                    traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8004efe:	2300      	movs	r3, #0
 8004f00:	e062      	b.n	8004fc8 <xQueuePeek+0x13c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d106      	bne.n	8004f16 <xQueuePeek+0x8a>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004f08:	f107 0310 	add.w	r3, r7, #16
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 fea1 	bl	8005c54 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004f12:	2301      	movs	r3, #1
 8004f14:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004f16:	f001 fba1 	bl	800665c <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now that the critical section has been exited. */

        vTaskSuspendAll();
 8004f1a:	f000 fb63 	bl	80055e4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004f1e:	f001 fb83 	bl	8006628 <vPortEnterCritical>
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f28:	b25b      	sxtb	r3, r3
 8004f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f2e:	d103      	bne.n	8004f38 <xQueuePeek+0xac>
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f3e:	b25b      	sxtb	r3, r3
 8004f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f44:	d103      	bne.n	8004f4e <xQueuePeek+0xc2>
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f4e:	f001 fb85 	bl	800665c <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f52:	1d3a      	adds	r2, r7, #4
 8004f54:	f107 0310 	add.w	r3, r7, #16
 8004f58:	4611      	mov	r1, r2
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fe90 	bl	8005c80 <xTaskCheckForTimeOut>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d123      	bne.n	8004fae <xQueuePeek+0x122>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f66:	6a38      	ldr	r0, [r7, #32]
 8004f68:	f000 f916 	bl	8005198 <prvIsQueueEmpty>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d017      	beq.n	8004fa2 <xQueuePeek+0x116>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	3324      	adds	r3, #36	@ 0x24
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	4611      	mov	r1, r2
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fd8c 	bl	8005a98 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004f80:	6a38      	ldr	r0, [r7, #32]
 8004f82:	f000 f8b7 	bl	80050f4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004f86:	f000 fb3b 	bl	8005600 <xTaskResumeAll>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d187      	bne.n	8004ea0 <xQueuePeek+0x14>
                {
                    taskYIELD_WITHIN_API();
 8004f90:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd0 <xQueuePeek+0x144>)
 8004f92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	e77e      	b.n	8004ea0 <xQueuePeek+0x14>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
 8004fa2:	6a38      	ldr	r0, [r7, #32]
 8004fa4:	f000 f8a6 	bl	80050f4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004fa8:	f000 fb2a 	bl	8005600 <xTaskResumeAll>
 8004fac:	e778      	b.n	8004ea0 <xQueuePeek+0x14>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
 8004fae:	6a38      	ldr	r0, [r7, #32]
 8004fb0:	f000 f8a0 	bl	80050f4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004fb4:	f000 fb24 	bl	8005600 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fb8:	6a38      	ldr	r0, [r7, #32]
 8004fba:	f000 f8ed 	bl	8005198 <prvIsQueueEmpty>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f43f af6d 	beq.w	8004ea0 <xQueuePeek+0x14>
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                traceRETURN_xQueuePeek( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8004fc6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3728      	adds	r7, #40	@ 0x28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	e000ed04 	.word	0xe000ed04

08004fd4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fe8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10d      	bne.n	800500e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d14d      	bne.n	8005096 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 ff44 	bl	8005e8c <xTaskPriorityDisinherit>
 8005004:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	609a      	str	r2, [r3, #8]
 800500c:	e043      	b.n	8005096 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d119      	bne.n	8005048 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6858      	ldr	r0, [r3, #4]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501c:	461a      	mov	r2, r3
 800501e:	68b9      	ldr	r1, [r7, #8]
 8005020:	f003 fbae 	bl	8008780 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502c:	441a      	add	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	429a      	cmp	r2, r3
 800503c:	d32b      	bcc.n	8005096 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	605a      	str	r2, [r3, #4]
 8005046:	e026      	b.n	8005096 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	68d8      	ldr	r0, [r3, #12]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005050:	461a      	mov	r2, r3
 8005052:	68b9      	ldr	r1, [r7, #8]
 8005054:	f003 fb94 	bl	8008780 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005060:	425b      	negs	r3, r3
 8005062:	441a      	add	r2, r3
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	429a      	cmp	r2, r3
 8005072:	d207      	bcs.n	8005084 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507c:	425b      	negs	r3, r3
 800507e:	441a      	add	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b02      	cmp	r3, #2
 8005088:	d105      	bne.n	8005096 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	3b01      	subs	r3, #1
 8005094:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1c5a      	adds	r2, r3, #1
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800509e:	697b      	ldr	r3, [r7, #20]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d018      	beq.n	80050ec <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c2:	441a      	add	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68da      	ldr	r2, [r3, #12]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d303      	bcc.n	80050dc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68d9      	ldr	r1, [r3, #12]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e4:	461a      	mov	r2, r3
 80050e6:	6838      	ldr	r0, [r7, #0]
 80050e8:	f003 fb4a 	bl	8008780 <memcpy>
    }
}
 80050ec:	bf00      	nop
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80050fc:	f001 fa94 	bl	8006628 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005106:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005108:	e011      	b.n	800512e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800510e:	2b00      	cmp	r3, #0
 8005110:	d012      	beq.n	8005138 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3324      	adds	r3, #36	@ 0x24
 8005116:	4618      	mov	r0, r3
 8005118:	f000 fcd4 	bl	8005ac4 <xTaskRemoveFromEventList>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8005122:	f000 fdf7 	bl	8005d14 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005126:	7bfb      	ldrb	r3, [r7, #15]
 8005128:	3b01      	subs	r3, #1
 800512a:	b2db      	uxtb	r3, r3
 800512c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800512e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005132:	2b00      	cmp	r3, #0
 8005134:	dce9      	bgt.n	800510a <prvUnlockQueue+0x16>
 8005136:	e000      	b.n	800513a <prvUnlockQueue+0x46>
                    break;
 8005138:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	22ff      	movs	r2, #255	@ 0xff
 800513e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8005142:	f001 fa8b 	bl	800665c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005146:	f001 fa6f 	bl	8006628 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005150:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005152:	e011      	b.n	8005178 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d012      	beq.n	8005182 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	3310      	adds	r3, #16
 8005160:	4618      	mov	r0, r3
 8005162:	f000 fcaf 	bl	8005ac4 <xTaskRemoveFromEventList>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800516c:	f000 fdd2 	bl	8005d14 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005170:	7bbb      	ldrb	r3, [r7, #14]
 8005172:	3b01      	subs	r3, #1
 8005174:	b2db      	uxtb	r3, r3
 8005176:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800517c:	2b00      	cmp	r3, #0
 800517e:	dce9      	bgt.n	8005154 <prvUnlockQueue+0x60>
 8005180:	e000      	b.n	8005184 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005182:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	22ff      	movs	r2, #255	@ 0xff
 8005188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800518c:	f001 fa66 	bl	800665c <vPortExitCritical>
}
 8005190:	bf00      	nop
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80051a0:	f001 fa42 	bl	8006628 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d102      	bne.n	80051b2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80051ac:	2301      	movs	r3, #1
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	e001      	b.n	80051b6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80051b6:	f001 fa51 	bl	800665c <vPortExitCritical>

    return xReturn;
 80051ba:	68fb      	ldr	r3, [r7, #12]
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80051cc:	f001 fa2c 	bl	8006628 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d8:	429a      	cmp	r2, r3
 80051da:	d102      	bne.n	80051e2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80051dc:	2301      	movs	r3, #1
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	e001      	b.n	80051e6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80051e6:	f001 fa39 	bl	800665c <vPortExitCritical>

    return xReturn;
 80051ea:	68fb      	ldr	r3, [r7, #12]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE usStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08a      	sub	sp, #40	@ 0x28
 80051f8:	af04      	add	r7, sp, #16
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	603b      	str	r3, [r7, #0]
 8005200:	4613      	mov	r3, r2
 8005202:	80fb      	strh	r3, [r7, #6]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) );
 8005204:	88fb      	ldrh	r3, [r7, #6]
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4618      	mov	r0, r3
 800520a:	f001 faa1 	bl	8006750 <pvPortMalloc>
 800520e:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d013      	beq.n	800523e <prvCreateTask+0x4a>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8005216:	2054      	movs	r0, #84	@ 0x54
 8005218:	f001 fa9a 	bl	8006750 <pvPortMalloc>
 800521c:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <prvCreateTask+0x42>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005224:	2254      	movs	r2, #84	@ 0x54
 8005226:	2100      	movs	r1, #0
 8005228:	6978      	ldr	r0, [r7, #20]
 800522a:	f003 fa65 	bl	80086f8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	631a      	str	r2, [r3, #48]	@ 0x30
 8005234:	e005      	b.n	8005242 <prvCreateTask+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8005236:	6938      	ldr	r0, [r7, #16]
 8005238:	f001 fb38 	bl	80068ac <vPortFree>
 800523c:	e001      	b.n	8005242 <prvCreateTask+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800523e:	2300      	movs	r3, #0
 8005240:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00d      	beq.n	8005264 <prvCreateTask+0x70>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005248:	88fa      	ldrh	r2, [r7, #6]
 800524a:	2300      	movs	r3, #0
 800524c:	9303      	str	r3, [sp, #12]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	9302      	str	r3, [sp, #8]
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	9301      	str	r3, [sp, #4]
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 f829 	bl	80052b6 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8005264:	697b      	ldr	r3, [r7, #20]
    }
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800526e:	b580      	push	{r7, lr}
 8005270:	b088      	sub	sp, #32
 8005272:	af02      	add	r7, sp, #8
 8005274:	60f8      	str	r0, [r7, #12]
 8005276:	60b9      	str	r1, [r7, #8]
 8005278:	603b      	str	r3, [r7, #0]
 800527a:	4613      	mov	r3, r2
 800527c:	80fb      	strh	r3, [r7, #6]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, usStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800527e:	88fa      	ldrh	r2, [r7, #6]
 8005280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005282:	9301      	str	r3, [sp, #4]
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	68b9      	ldr	r1, [r7, #8]
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f7ff ffb1 	bl	80051f4 <prvCreateTask>
 8005292:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d005      	beq.n	80052a6 <xTaskCreate+0x38>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = tskNO_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800529a:	6938      	ldr	r0, [r7, #16]
 800529c:	f000 f874 	bl	8005388 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80052a0:	2301      	movs	r3, #1
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	e002      	b.n	80052ac <xTaskCreate+0x3e>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80052a6:	f04f 33ff 	mov.w	r3, #4294967295
 80052aa:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 80052ac:	697b      	ldr	r3, [r7, #20]
    }
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b086      	sub	sp, #24
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	60f8      	str	r0, [r7, #12]
 80052be:	60b9      	str	r1, [r7, #8]
 80052c0:	607a      	str	r2, [r7, #4]
 80052c2:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80052c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80052ce:	3b01      	subs	r3, #1
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f023 0307 	bic.w	r3, r3, #7
 80052dc:	613b      	str	r3, [r7, #16]
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d01e      	beq.n	8005322 <prvInitialiseNewTask+0x6c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80052e4:	2300      	movs	r3, #0
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	e012      	b.n	8005310 <prvInitialiseNewTask+0x5a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	4413      	add	r3, r2
 80052f0:	7819      	ldrb	r1, [r3, #0]
 80052f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	4413      	add	r3, r2
 80052f8:	3334      	adds	r3, #52	@ 0x34
 80052fa:	460a      	mov	r2, r1
 80052fc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80052fe:	68ba      	ldr	r2, [r7, #8]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	4413      	add	r3, r2
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d006      	beq.n	8005318 <prvInitialiseNewTask+0x62>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	3301      	adds	r3, #1
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	2b0f      	cmp	r3, #15
 8005314:	d9e9      	bls.n	80052ea <prvInitialiseNewTask+0x34>
 8005316:	e000      	b.n	800531a <prvInitialiseNewTask+0x64>
            {
                break;
 8005318:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800531a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	2b07      	cmp	r3, #7
 8005326:	d901      	bls.n	800532c <prvInitialiseNewTask+0x76>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005328:	2307      	movs	r3, #7
 800532a:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800532c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532e:	6a3a      	ldr	r2, [r7, #32]
 8005330:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8005332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005334:	6a3a      	ldr	r2, [r7, #32]
 8005336:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533a:	3304      	adds	r3, #4
 800533c:	4618      	mov	r0, r3
 800533e:	f7ff fab4 	bl	80048aa <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005344:	3318      	adds	r3, #24
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff faaf 	bl	80048aa <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005350:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	f1c3 0208 	rsb	r2, r3, #8
 8005358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800535c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005360:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	68f9      	ldr	r1, [r7, #12]
 8005366:	6938      	ldr	r0, [r7, #16]
 8005368:	f001 f8c4 	bl	80064f4 <pxPortInitialiseStack>
 800536c:	4602      	mov	r2, r0
 800536e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005370:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <prvInitialiseNewTask+0xc8>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800537c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800537e:	bf00      	nop
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
	...

08005388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8005390:	f001 f94a 	bl	8006628 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks++;
 8005394:	4b3e      	ldr	r3, [pc, #248]	@ (8005490 <prvAddNewTaskToReadyList+0x108>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3301      	adds	r3, #1
 800539a:	4a3d      	ldr	r2, [pc, #244]	@ (8005490 <prvAddNewTaskToReadyList+0x108>)
 800539c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800539e:	4b3d      	ldr	r3, [pc, #244]	@ (8005494 <prvAddNewTaskToReadyList+0x10c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d109      	bne.n	80053ba <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80053a6:	4a3b      	ldr	r2, [pc, #236]	@ (8005494 <prvAddNewTaskToReadyList+0x10c>)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80053ac:	4b38      	ldr	r3, [pc, #224]	@ (8005490 <prvAddNewTaskToReadyList+0x108>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d110      	bne.n	80053d6 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80053b4:	f000 fcd2 	bl	8005d5c <prvInitialiseTaskLists>
 80053b8:	e00d      	b.n	80053d6 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80053ba:	4b37      	ldr	r3, [pc, #220]	@ (8005498 <prvAddNewTaskToReadyList+0x110>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d109      	bne.n	80053d6 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80053c2:	4b34      	ldr	r3, [pc, #208]	@ (8005494 <prvAddNewTaskToReadyList+0x10c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d802      	bhi.n	80053d6 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80053d0:	4a30      	ldr	r2, [pc, #192]	@ (8005494 <prvAddNewTaskToReadyList+0x10c>)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80053d6:	4b31      	ldr	r3, [pc, #196]	@ (800549c <prvAddNewTaskToReadyList+0x114>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3301      	adds	r3, #1
 80053dc:	4a2f      	ldr	r2, [pc, #188]	@ (800549c <prvAddNewTaskToReadyList+0x114>)
 80053de:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e4:	2201      	movs	r2, #1
 80053e6:	409a      	lsls	r2, r3
 80053e8:	4b2d      	ldr	r3, [pc, #180]	@ (80054a0 <prvAddNewTaskToReadyList+0x118>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	4a2c      	ldr	r2, [pc, #176]	@ (80054a0 <prvAddNewTaskToReadyList+0x118>)
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053f6:	492b      	ldr	r1, [pc, #172]	@ (80054a4 <prvAddNewTaskToReadyList+0x11c>)
 80053f8:	4613      	mov	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	3304      	adds	r3, #4
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	609a      	str	r2, [r3, #8]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	60da      	str	r2, [r3, #12]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	3204      	adds	r2, #4
 800541e:	605a      	str	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	1d1a      	adds	r2, r3, #4
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	609a      	str	r2, [r3, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800542c:	4613      	mov	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4a1b      	ldr	r2, [pc, #108]	@ (80054a4 <prvAddNewTaskToReadyList+0x11c>)
 8005436:	441a      	add	r2, r3
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	615a      	str	r2, [r3, #20]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005440:	4918      	ldr	r1, [pc, #96]	@ (80054a4 <prvAddNewTaskToReadyList+0x11c>)
 8005442:	4613      	mov	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	440b      	add	r3, r1
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	1c59      	adds	r1, r3, #1
 8005450:	4814      	ldr	r0, [pc, #80]	@ (80054a4 <prvAddNewTaskToReadyList+0x11c>)
 8005452:	4613      	mov	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4403      	add	r3, r0
 800545c:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800545e:	f001 f8fd 	bl	800665c <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8005462:	4b0d      	ldr	r3, [pc, #52]	@ (8005498 <prvAddNewTaskToReadyList+0x110>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00e      	beq.n	8005488 <prvAddNewTaskToReadyList+0x100>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800546a:	4b0a      	ldr	r3, [pc, #40]	@ (8005494 <prvAddNewTaskToReadyList+0x10c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005474:	429a      	cmp	r2, r3
 8005476:	d207      	bcs.n	8005488 <prvAddNewTaskToReadyList+0x100>
 8005478:	4b0b      	ldr	r3, [pc, #44]	@ (80054a8 <prvAddNewTaskToReadyList+0x120>)
 800547a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005488:	bf00      	nop
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	200003bc 	.word	0x200003bc
 8005494:	200002a8 	.word	0x200002a8
 8005498:	200003c8 	.word	0x200003c8
 800549c:	200003d8 	.word	0x200003d8
 80054a0:	200003c4 	.word	0x200003c4
 80054a4:	200002ac 	.word	0x200002ac
 80054a8:	e000ed04 	.word	0xe000ed04

080054ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d008      	beq.n	80054d0 <vTaskDelay+0x24>
        {
            vTaskSuspendAll();
 80054be:	f000 f891 	bl	80055e4 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80054c2:	2100      	movs	r1, #0
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 ff93 	bl	80063f0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80054ca:	f000 f899 	bl	8005600 <xTaskResumeAll>
 80054ce:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d107      	bne.n	80054e6 <vTaskDelay+0x3a>
        {
            taskYIELD_WITHIN_API();
 80054d6:	4b06      	ldr	r3, [pc, #24]	@ (80054f0 <vTaskDelay+0x44>)
 80054d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 80054e6:	bf00      	nop
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	e000ed04 	.word	0xe000ed04

080054f4 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08a      	sub	sp, #40	@ 0x28
 80054f8:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 80054fa:	2301      	movs	r3, #1
 80054fc:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80054fe:	2300      	movs	r3, #0
 8005500:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8005502:	2300      	movs	r3, #0
 8005504:	617b      	str	r3, [r7, #20]
 8005506:	e011      	b.n	800552c <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8005508:	4a1c      	ldr	r2, [pc, #112]	@ (800557c <prvCreateIdleTasks+0x88>)
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	4413      	add	r3, r2
 800550e:	7819      	ldrb	r1, [r3, #0]
 8005510:	463a      	mov	r2, r7
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	4413      	add	r3, r2
 8005516:	460a      	mov	r2, r1
 8005518:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800551a:	463a      	mov	r2, r7
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	4413      	add	r3, r2
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d006      	beq.n	8005534 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	3301      	adds	r3, #1
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	2b0f      	cmp	r3, #15
 8005530:	ddea      	ble.n	8005508 <prvCreateIdleTasks+0x14>
 8005532:	e000      	b.n	8005536 <prvCreateIdleTasks+0x42>
        {
            break;
 8005534:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8005536:	2300      	movs	r3, #0
 8005538:	61bb      	str	r3, [r7, #24]
 800553a:	e015      	b.n	8005568 <prvCreateIdleTasks+0x74>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 800553c:	4b10      	ldr	r3, [pc, #64]	@ (8005580 <prvCreateIdleTasks+0x8c>)
 800553e:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4a0f      	ldr	r2, [pc, #60]	@ (8005584 <prvCreateIdleTasks+0x90>)
 8005546:	4413      	add	r3, r2
 8005548:	4639      	mov	r1, r7
 800554a:	9301      	str	r3, [sp, #4]
 800554c:	2300      	movs	r3, #0
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	2300      	movs	r3, #0
 8005552:	2280      	movs	r2, #128	@ 0x80
 8005554:	6938      	ldr	r0, [r7, #16]
 8005556:	f7ff fe8a 	bl	800526e <xTaskCreate>
 800555a:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d006      	beq.n	8005570 <prvCreateIdleTasks+0x7c>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	3301      	adds	r3, #1
 8005566:	61bb      	str	r3, [r7, #24]
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	2b00      	cmp	r3, #0
 800556c:	dde6      	ble.n	800553c <prvCreateIdleTasks+0x48>
 800556e:	e000      	b.n	8005572 <prvCreateIdleTasks+0x7e>
        {
            break;
 8005570:	bf00      	nop
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xReturn;
 8005572:	69fb      	ldr	r3, [r7, #28]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3720      	adds	r7, #32
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	08008884 	.word	0x08008884
 8005580:	08005d2d 	.word	0x08005d2d
 8005584:	200003e0 	.word	0x200003e0

08005588 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b082      	sub	sp, #8
 800558c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800558e:	f7ff ffb1 	bl	80054f4 <prvCreateIdleTasks>
 8005592:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d115      	bne.n	80055c6 <vTaskStartScheduler+0x3e>
    __asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	603b      	str	r3, [r7, #0]
}
 80055ac:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80055ae:	4b09      	ldr	r3, [pc, #36]	@ (80055d4 <vTaskStartScheduler+0x4c>)
 80055b0:	f04f 32ff 	mov.w	r2, #4294967295
 80055b4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80055b6:	4b08      	ldr	r3, [pc, #32]	@ (80055d8 <vTaskStartScheduler+0x50>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055bc:	4b07      	ldr	r3, [pc, #28]	@ (80055dc <vTaskStartScheduler+0x54>)
 80055be:	2200      	movs	r2, #0
 80055c0:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80055c2:	f001 f803 	bl	80065cc <xPortStartScheduler>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80055c6:	4b06      	ldr	r3, [pc, #24]	@ (80055e0 <vTaskStartScheduler+0x58>)
 80055c8:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 80055ca:	bf00      	nop
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	200003dc 	.word	0x200003dc
 80055d8:	200003c8 	.word	0x200003c8
 80055dc:	200003c0 	.word	0x200003c0
 80055e0:	20000010 	.word	0x20000010

080055e4 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055e4:	b480      	push	{r7}
 80055e6:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        ++uxSchedulerSuspended;
 80055e8:	4b04      	ldr	r3, [pc, #16]	@ (80055fc <vTaskSuspendAll+0x18>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3301      	adds	r3, #1
 80055ee:	4a03      	ldr	r2, [pc, #12]	@ (80055fc <vTaskSuspendAll+0x18>)
 80055f0:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 80055f2:	bf00      	nop
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bc80      	pop	{r7}
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	200003e4 	.word	0x200003e4

08005600 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b088      	sub	sp, #32
 8005604:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8005606:	2300      	movs	r3, #0
 8005608:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800560a:	2300      	movs	r3, #0
 800560c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800560e:	f001 f80b 	bl	8006628 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8005612:	2300      	movs	r3, #0
 8005614:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );

            --uxSchedulerSuspended;
 8005616:	4b6c      	ldr	r3, [pc, #432]	@ (80057c8 <xTaskResumeAll+0x1c8>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	3b01      	subs	r3, #1
 800561c:	4a6a      	ldr	r2, [pc, #424]	@ (80057c8 <xTaskResumeAll+0x1c8>)
 800561e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005620:	4b69      	ldr	r3, [pc, #420]	@ (80057c8 <xTaskResumeAll+0x1c8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	f040 80c8 	bne.w	80057ba <xTaskResumeAll+0x1ba>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800562a:	4b68      	ldr	r3, [pc, #416]	@ (80057cc <xTaskResumeAll+0x1cc>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 80c3 	beq.w	80057ba <xTaskResumeAll+0x1ba>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005634:	e08c      	b.n	8005750 <xTaskResumeAll+0x150>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005636:	4b66      	ldr	r3, [pc, #408]	@ (80057d0 <xTaskResumeAll+0x1d0>)
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005642:	60fb      	str	r3, [r7, #12]
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	69db      	ldr	r3, [r3, #28]
 8005648:	69fa      	ldr	r2, [r7, #28]
 800564a:	6a12      	ldr	r2, [r2, #32]
 800564c:	609a      	str	r2, [r3, #8]
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	69fa      	ldr	r2, [r7, #28]
 8005654:	69d2      	ldr	r2, [r2, #28]
 8005656:	605a      	str	r2, [r3, #4]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	3318      	adds	r3, #24
 8005660:	429a      	cmp	r2, r3
 8005662:	d103      	bne.n	800566c <xTaskResumeAll+0x6c>
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	6a1a      	ldr	r2, [r3, #32]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	605a      	str	r2, [r3, #4]
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	2200      	movs	r2, #0
 8005670:	629a      	str	r2, [r3, #40]	@ 0x28
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	1e5a      	subs	r2, r3, #1
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	695b      	ldr	r3, [r3, #20]
 8005680:	60bb      	str	r3, [r7, #8]
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	69fa      	ldr	r2, [r7, #28]
 8005688:	68d2      	ldr	r2, [r2, #12]
 800568a:	609a      	str	r2, [r3, #8]
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	69fa      	ldr	r2, [r7, #28]
 8005692:	6892      	ldr	r2, [r2, #8]
 8005694:	605a      	str	r2, [r3, #4]
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	3304      	adds	r3, #4
 800569e:	429a      	cmp	r2, r3
 80056a0:	d103      	bne.n	80056aa <xTaskResumeAll+0xaa>
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	605a      	str	r2, [r3, #4]
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	2200      	movs	r2, #0
 80056ae:	615a      	str	r2, [r3, #20]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	1e5a      	subs	r2, r3, #1
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056be:	2201      	movs	r2, #1
 80056c0:	409a      	lsls	r2, r3
 80056c2:	4b44      	ldr	r3, [pc, #272]	@ (80057d4 <xTaskResumeAll+0x1d4>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	4a42      	ldr	r2, [pc, #264]	@ (80057d4 <xTaskResumeAll+0x1d4>)
 80056ca:	6013      	str	r3, [r2, #0]
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d0:	4941      	ldr	r1, [pc, #260]	@ (80057d8 <xTaskResumeAll+0x1d8>)
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	3304      	adds	r3, #4
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	607b      	str	r3, [r7, #4]
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	609a      	str	r2, [r3, #8]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	60da      	str	r2, [r3, #12]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	69fa      	ldr	r2, [r7, #28]
 80056f6:	3204      	adds	r2, #4
 80056f8:	605a      	str	r2, [r3, #4]
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	1d1a      	adds	r2, r3, #4
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	609a      	str	r2, [r3, #8]
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005706:	4613      	mov	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4413      	add	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4a32      	ldr	r2, [pc, #200]	@ (80057d8 <xTaskResumeAll+0x1d8>)
 8005710:	441a      	add	r2, r3
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	615a      	str	r2, [r3, #20]
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800571a:	492f      	ldr	r1, [pc, #188]	@ (80057d8 <xTaskResumeAll+0x1d8>)
 800571c:	4613      	mov	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	440b      	add	r3, r1
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	1c59      	adds	r1, r3, #1
 800572a:	482b      	ldr	r0, [pc, #172]	@ (80057d8 <xTaskResumeAll+0x1d8>)
 800572c:	4613      	mov	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	4403      	add	r3, r0
 8005736:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800573c:	4b27      	ldr	r3, [pc, #156]	@ (80057dc <xTaskResumeAll+0x1dc>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005742:	429a      	cmp	r2, r3
 8005744:	d904      	bls.n	8005750 <xTaskResumeAll+0x150>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8005746:	4a26      	ldr	r2, [pc, #152]	@ (80057e0 <xTaskResumeAll+0x1e0>)
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	2101      	movs	r1, #1
 800574c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005750:	4b1f      	ldr	r3, [pc, #124]	@ (80057d0 <xTaskResumeAll+0x1d0>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	f47f af6e 	bne.w	8005636 <xTaskResumeAll+0x36>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <xTaskResumeAll+0x164>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8005760:	f000 fb7a 	bl	8005e58 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005764:	4b1f      	ldr	r3, [pc, #124]	@ (80057e4 <xTaskResumeAll+0x1e4>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d012      	beq.n	8005796 <xTaskResumeAll+0x196>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8005770:	f000 f846 	bl	8005800 <xTaskIncrementTick>
 8005774:	4603      	mov	r3, r0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d004      	beq.n	8005784 <xTaskResumeAll+0x184>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800577a:	4a19      	ldr	r2, [pc, #100]	@ (80057e0 <xTaskResumeAll+0x1e0>)
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	2101      	movs	r1, #1
 8005780:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	3b01      	subs	r3, #1
 8005788:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1ef      	bne.n	8005770 <xTaskResumeAll+0x170>

                            xPendedTicks = 0;
 8005790:	4b14      	ldr	r3, [pc, #80]	@ (80057e4 <xTaskResumeAll+0x1e4>)
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8005796:	4a12      	ldr	r2, [pc, #72]	@ (80057e0 <xTaskResumeAll+0x1e0>)
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00b      	beq.n	80057ba <xTaskResumeAll+0x1ba>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80057a2:	2301      	movs	r3, #1
 80057a4:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80057a6:	4b0d      	ldr	r3, [pc, #52]	@ (80057dc <xTaskResumeAll+0x1dc>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4b0f      	ldr	r3, [pc, #60]	@ (80057e8 <xTaskResumeAll+0x1e8>)
 80057ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80057ba:	f000 ff4f 	bl	800665c <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 80057be:	69bb      	ldr	r3, [r7, #24]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3720      	adds	r7, #32
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	200003e4 	.word	0x200003e4
 80057cc:	200003bc 	.word	0x200003bc
 80057d0:	2000037c 	.word	0x2000037c
 80057d4:	200003c4 	.word	0x200003c4
 80057d8:	200002ac 	.word	0x200002ac
 80057dc:	200002a8 	.word	0x200002a8
 80057e0:	200003d0 	.word	0x200003d0
 80057e4:	200003cc 	.word	0x200003cc
 80057e8:	e000ed04 	.word	0xe000ed04

080057ec <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );

    return uxCurrentNumberOfTasks;
 80057f0:	4b02      	ldr	r3, [pc, #8]	@ (80057fc <uxTaskGetNumberOfTasks+0x10>)
 80057f2:	681b      	ldr	r3, [r3, #0]
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr
 80057fc:	200003bc 	.word	0x200003bc

08005800 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005806:	2300      	movs	r3, #0
 8005808:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800580a:	4b75      	ldr	r3, [pc, #468]	@ (80059e0 <xTaskIncrementTick+0x1e0>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	f040 80dc 	bne.w	80059cc <xTaskIncrementTick+0x1cc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005814:	4b73      	ldr	r3, [pc, #460]	@ (80059e4 <xTaskIncrementTick+0x1e4>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3301      	adds	r3, #1
 800581a:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800581c:	4a71      	ldr	r2, [pc, #452]	@ (80059e4 <xTaskIncrementTick+0x1e4>)
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d110      	bne.n	800584a <xTaskIncrementTick+0x4a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005828:	4b6f      	ldr	r3, [pc, #444]	@ (80059e8 <xTaskIncrementTick+0x1e8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	617b      	str	r3, [r7, #20]
 800582e:	4b6f      	ldr	r3, [pc, #444]	@ (80059ec <xTaskIncrementTick+0x1ec>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a6d      	ldr	r2, [pc, #436]	@ (80059e8 <xTaskIncrementTick+0x1e8>)
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	4a6d      	ldr	r2, [pc, #436]	@ (80059ec <xTaskIncrementTick+0x1ec>)
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	6013      	str	r3, [r2, #0]
 800583c:	4b6c      	ldr	r3, [pc, #432]	@ (80059f0 <xTaskIncrementTick+0x1f0>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3301      	adds	r3, #1
 8005842:	4a6b      	ldr	r2, [pc, #428]	@ (80059f0 <xTaskIncrementTick+0x1f0>)
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	f000 fb07 	bl	8005e58 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800584a:	4b6a      	ldr	r3, [pc, #424]	@ (80059f4 <xTaskIncrementTick+0x1f4>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	69ba      	ldr	r2, [r7, #24]
 8005850:	429a      	cmp	r2, r3
 8005852:	f0c0 80a6 	bcc.w	80059a2 <xTaskIncrementTick+0x1a2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005856:	4b64      	ldr	r3, [pc, #400]	@ (80059e8 <xTaskIncrementTick+0x1e8>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d104      	bne.n	800586a <xTaskIncrementTick+0x6a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8005860:	4b64      	ldr	r3, [pc, #400]	@ (80059f4 <xTaskIncrementTick+0x1f4>)
 8005862:	f04f 32ff 	mov.w	r2, #4294967295
 8005866:	601a      	str	r2, [r3, #0]
                    break;
 8005868:	e09b      	b.n	80059a2 <xTaskIncrementTick+0x1a2>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800586a:	4b5f      	ldr	r3, [pc, #380]	@ (80059e8 <xTaskIncrementTick+0x1e8>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	429a      	cmp	r2, r3
 8005880:	d203      	bcs.n	800588a <xTaskIncrementTick+0x8a>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005882:	4a5c      	ldr	r2, [pc, #368]	@ (80059f4 <xTaskIncrementTick+0x1f4>)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6013      	str	r3, [r2, #0]
                        break;
 8005888:	e08b      	b.n	80059a2 <xTaskIncrementTick+0x1a2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	60bb      	str	r3, [r7, #8]
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	68d2      	ldr	r2, [r2, #12]
 8005898:	609a      	str	r2, [r3, #8]
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	6892      	ldr	r2, [r2, #8]
 80058a2:	605a      	str	r2, [r3, #4]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	3304      	adds	r3, #4
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d103      	bne.n	80058b8 <xTaskIncrementTick+0xb8>
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	605a      	str	r2, [r3, #4]
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	2200      	movs	r2, #0
 80058bc:	615a      	str	r2, [r3, #20]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	1e5a      	subs	r2, r3, #1
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d01e      	beq.n	800590e <xTaskIncrementTick+0x10e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d4:	607b      	str	r3, [r7, #4]
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	6a12      	ldr	r2, [r2, #32]
 80058de:	609a      	str	r2, [r3, #8]
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	69d2      	ldr	r2, [r2, #28]
 80058e8:	605a      	str	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	3318      	adds	r3, #24
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d103      	bne.n	80058fe <xTaskIncrementTick+0xfe>
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	6a1a      	ldr	r2, [r3, #32]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	605a      	str	r2, [r3, #4]
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2200      	movs	r2, #0
 8005902:	629a      	str	r2, [r3, #40]	@ 0x28
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	1e5a      	subs	r2, r3, #1
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005912:	2201      	movs	r2, #1
 8005914:	409a      	lsls	r2, r3
 8005916:	4b38      	ldr	r3, [pc, #224]	@ (80059f8 <xTaskIncrementTick+0x1f8>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4313      	orrs	r3, r2
 800591c:	4a36      	ldr	r2, [pc, #216]	@ (80059f8 <xTaskIncrementTick+0x1f8>)
 800591e:	6013      	str	r3, [r2, #0]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005924:	4935      	ldr	r1, [pc, #212]	@ (80059fc <xTaskIncrementTick+0x1fc>)
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	440b      	add	r3, r1
 8005930:	3304      	adds	r3, #4
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	603b      	str	r3, [r7, #0]
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	683a      	ldr	r2, [r7, #0]
 800593a:	609a      	str	r2, [r3, #8]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	60da      	str	r2, [r3, #12]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	693a      	ldr	r2, [r7, #16]
 800594a:	3204      	adds	r2, #4
 800594c:	605a      	str	r2, [r3, #4]
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1d1a      	adds	r2, r3, #4
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	609a      	str	r2, [r3, #8]
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4a26      	ldr	r2, [pc, #152]	@ (80059fc <xTaskIncrementTick+0x1fc>)
 8005964:	441a      	add	r2, r3
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	615a      	str	r2, [r3, #20]
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800596e:	4923      	ldr	r1, [pc, #140]	@ (80059fc <xTaskIncrementTick+0x1fc>)
 8005970:	4613      	mov	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4413      	add	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	1c59      	adds	r1, r3, #1
 800597e:	481f      	ldr	r0, [pc, #124]	@ (80059fc <xTaskIncrementTick+0x1fc>)
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4403      	add	r3, r0
 800598a:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005990:	4b1b      	ldr	r3, [pc, #108]	@ (8005a00 <xTaskIncrementTick+0x200>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005996:	429a      	cmp	r2, r3
 8005998:	f67f af5d 	bls.w	8005856 <xTaskIncrementTick+0x56>
                            {
                                xSwitchRequired = pdTRUE;
 800599c:	2301      	movs	r3, #1
 800599e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059a0:	e759      	b.n	8005856 <xTaskIncrementTick+0x56>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80059a2:	4b17      	ldr	r3, [pc, #92]	@ (8005a00 <xTaskIncrementTick+0x200>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059a8:	4914      	ldr	r1, [pc, #80]	@ (80059fc <xTaskIncrementTick+0x1fc>)
 80059aa:	4613      	mov	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	440b      	add	r3, r1
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d901      	bls.n	80059be <xTaskIncrementTick+0x1be>
                {
                    xSwitchRequired = pdTRUE;
 80059ba:	2301      	movs	r3, #1
 80059bc:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80059be:	4b11      	ldr	r3, [pc, #68]	@ (8005a04 <xTaskIncrementTick+0x204>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d007      	beq.n	80059d6 <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 80059c6:	2301      	movs	r3, #1
 80059c8:	61fb      	str	r3, [r7, #28]
 80059ca:	e004      	b.n	80059d6 <xTaskIncrementTick+0x1d6>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        ++xPendedTicks;
 80059cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005a08 <xTaskIncrementTick+0x208>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3301      	adds	r3, #1
 80059d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005a08 <xTaskIncrementTick+0x208>)
 80059d4:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 80059d6:	69fb      	ldr	r3, [r7, #28]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3720      	adds	r7, #32
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	200003e4 	.word	0x200003e4
 80059e4:	200003c0 	.word	0x200003c0
 80059e8:	20000374 	.word	0x20000374
 80059ec:	20000378 	.word	0x20000378
 80059f0:	200003d4 	.word	0x200003d4
 80059f4:	200003dc 	.word	0x200003dc
 80059f8:	200003c4 	.word	0x200003c4
 80059fc:	200002ac 	.word	0x200002ac
 8005a00:	200002a8 	.word	0x200002a8
 8005a04:	200003d0 	.word	0x200003d0
 8005a08:	200003cc 	.word	0x200003cc

08005a0c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8005a12:	4b1c      	ldr	r3, [pc, #112]	@ (8005a84 <vTaskSwitchContext+0x78>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8005a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8005a88 <vTaskSwitchContext+0x7c>)
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8005a20:	e02b      	b.n	8005a7a <vTaskSwitchContext+0x6e>
            xYieldPendings[ 0 ] = pdFALSE;
 8005a22:	4b19      	ldr	r3, [pc, #100]	@ (8005a88 <vTaskSwitchContext+0x7c>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8005a28:	4b18      	ldr	r3, [pc, #96]	@ (8005a8c <vTaskSwitchContext+0x80>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	fab3 f383 	clz	r3, r3
 8005a34:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 8005a36:	78fb      	ldrb	r3, [r7, #3]
 8005a38:	f1c3 031f 	rsb	r3, r3, #31
 8005a3c:	60fb      	str	r3, [r7, #12]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	4613      	mov	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4a11      	ldr	r2, [pc, #68]	@ (8005a90 <vTaskSwitchContext+0x84>)
 8005a4a:	4413      	add	r3, r2
 8005a4c:	60bb      	str	r3, [r7, #8]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	605a      	str	r2, [r3, #4]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	3308      	adds	r3, #8
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d103      	bne.n	8005a6c <vTaskSwitchContext+0x60>
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	605a      	str	r2, [r3, #4]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	4a08      	ldr	r2, [pc, #32]	@ (8005a94 <vTaskSwitchContext+0x88>)
 8005a74:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8005a76:	4b07      	ldr	r3, [pc, #28]	@ (8005a94 <vTaskSwitchContext+0x88>)
 8005a78:	681b      	ldr	r3, [r3, #0]
    }
 8005a7a:	bf00      	nop
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bc80      	pop	{r7}
 8005a82:	4770      	bx	lr
 8005a84:	200003e4 	.word	0x200003e4
 8005a88:	200003d0 	.word	0x200003d0
 8005a8c:	200003c4 	.word	0x200003c4
 8005a90:	200002ac 	.word	0x200002ac
 8005a94:	200002a8 	.word	0x200002a8

08005a98 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005aa2:	4b07      	ldr	r3, [pc, #28]	@ (8005ac0 <vTaskPlaceOnEventList+0x28>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3318      	adds	r3, #24
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f7fe ff09 	bl	80048c2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	6838      	ldr	r0, [r7, #0]
 8005ab4:	f000 fc9c 	bl	80063f0 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8005ab8:	bf00      	nop
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	200002a8 	.word	0x200002a8

08005ac4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b089      	sub	sp, #36	@ 0x24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ad8:	617b      	str	r3, [r7, #20]
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	6a12      	ldr	r2, [r2, #32]
 8005ae2:	609a      	str	r2, [r3, #8]
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	69d2      	ldr	r2, [r2, #28]
 8005aec:	605a      	str	r2, [r3, #4]
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	3318      	adds	r3, #24
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d103      	bne.n	8005b02 <xTaskRemoveFromEventList+0x3e>
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	6a1a      	ldr	r2, [r3, #32]
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	605a      	str	r2, [r3, #4]
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	2200      	movs	r2, #0
 8005b06:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	1e5a      	subs	r2, r3, #1
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005b12:	4b4a      	ldr	r3, [pc, #296]	@ (8005c3c <xTaskRemoveFromEventList+0x178>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d15e      	bne.n	8005bd8 <xTaskRemoveFromEventList+0x114>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	68d2      	ldr	r2, [r2, #12]
 8005b28:	609a      	str	r2, [r3, #8]
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	6892      	ldr	r2, [r2, #8]
 8005b32:	605a      	str	r2, [r3, #4]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d103      	bne.n	8005b48 <xTaskRemoveFromEventList+0x84>
 8005b40:	69bb      	ldr	r3, [r7, #24]
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	605a      	str	r2, [r3, #4]
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	615a      	str	r2, [r3, #20]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	1e5a      	subs	r2, r3, #1
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	409a      	lsls	r2, r3
 8005b60:	4b37      	ldr	r3, [pc, #220]	@ (8005c40 <xTaskRemoveFromEventList+0x17c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	4a36      	ldr	r2, [pc, #216]	@ (8005c40 <xTaskRemoveFromEventList+0x17c>)
 8005b68:	6013      	str	r3, [r2, #0]
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b6e:	4935      	ldr	r1, [pc, #212]	@ (8005c44 <xTaskRemoveFromEventList+0x180>)
 8005b70:	4613      	mov	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	440b      	add	r3, r1
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60bb      	str	r3, [r7, #8]
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	609a      	str	r2, [r3, #8]
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	689a      	ldr	r2, [r3, #8]
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	60da      	str	r2, [r3, #12]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	3204      	adds	r2, #4
 8005b96:	605a      	str	r2, [r3, #4]
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	1d1a      	adds	r2, r3, #4
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	609a      	str	r2, [r3, #8]
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4a25      	ldr	r2, [pc, #148]	@ (8005c44 <xTaskRemoveFromEventList+0x180>)
 8005bae:	441a      	add	r2, r3
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	615a      	str	r2, [r3, #20]
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bb8:	4922      	ldr	r1, [pc, #136]	@ (8005c44 <xTaskRemoveFromEventList+0x180>)
 8005bba:	4613      	mov	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	440b      	add	r3, r1
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	1c59      	adds	r1, r3, #1
 8005bc8:	481e      	ldr	r0, [pc, #120]	@ (8005c44 <xTaskRemoveFromEventList+0x180>)
 8005bca:	4613      	mov	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4403      	add	r3, r0
 8005bd4:	6019      	str	r1, [r3, #0]
 8005bd6:	e01b      	b.n	8005c10 <xTaskRemoveFromEventList+0x14c>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c48 <xTaskRemoveFromEventList+0x184>)
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	613b      	str	r3, [r7, #16]
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	61da      	str	r2, [r3, #28]
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	621a      	str	r2, [r3, #32]
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	3218      	adds	r2, #24
 8005bf4:	605a      	str	r2, [r3, #4]
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	f103 0218 	add.w	r2, r3, #24
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	609a      	str	r2, [r3, #8]
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	4a11      	ldr	r2, [pc, #68]	@ (8005c48 <xTaskRemoveFromEventList+0x184>)
 8005c04:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c06:	4b10      	ldr	r3, [pc, #64]	@ (8005c48 <xTaskRemoveFromEventList+0x184>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	4a0e      	ldr	r2, [pc, #56]	@ (8005c48 <xTaskRemoveFromEventList+0x184>)
 8005c0e:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c14:	4b0d      	ldr	r3, [pc, #52]	@ (8005c4c <xTaskRemoveFromEventList+0x188>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d905      	bls.n	8005c2a <xTaskRemoveFromEventList+0x166>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8005c22:	4b0b      	ldr	r3, [pc, #44]	@ (8005c50 <xTaskRemoveFromEventList+0x18c>)
 8005c24:	2201      	movs	r2, #1
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	e001      	b.n	8005c2e <xTaskRemoveFromEventList+0x16a>
        }
        else
        {
            xReturn = pdFALSE;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8005c2e:	69fb      	ldr	r3, [r7, #28]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3724      	adds	r7, #36	@ 0x24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bc80      	pop	{r7}
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	200003e4 	.word	0x200003e4
 8005c40:	200003c4 	.word	0x200003c4
 8005c44:	200002ac 	.word	0x200002ac
 8005c48:	2000037c 	.word	0x2000037c
 8005c4c:	200002a8 	.word	0x200002a8
 8005c50:	200003d0 	.word	0x200003d0

08005c54 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c5c:	4b06      	ldr	r3, [pc, #24]	@ (8005c78 <vTaskInternalSetTimeOutState+0x24>)
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005c64:	4b05      	ldr	r3, [pc, #20]	@ (8005c7c <vTaskInternalSetTimeOutState+0x28>)
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bc80      	pop	{r7}
 8005c74:	4770      	bx	lr
 8005c76:	bf00      	nop
 8005c78:	200003d4 	.word	0x200003d4
 8005c7c:	200003c0 	.word	0x200003c0

08005c80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
 8005c8a:	f000 fccd 	bl	8006628 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8005d0c <xTaskCheckForTimeOut+0x8c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca6:	d102      	bne.n	8005cae <xTaskCheckForTimeOut+0x2e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	e026      	b.n	8005cfc <xTaskCheckForTimeOut+0x7c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	4b17      	ldr	r3, [pc, #92]	@ (8005d10 <xTaskCheckForTimeOut+0x90>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d00a      	beq.n	8005cd0 <xTaskCheckForTimeOut+0x50>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d305      	bcc.n	8005cd0 <xTaskCheckForTimeOut+0x50>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	e015      	b.n	8005cfc <xTaskCheckForTimeOut+0x7c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d20b      	bcs.n	8005cf2 <xTaskCheckForTimeOut+0x72>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	1ad2      	subs	r2, r2, r3
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7ff ffb4 	bl	8005c54 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005cec:	2300      	movs	r3, #0
 8005cee:	617b      	str	r3, [r7, #20]
 8005cf0:	e004      	b.n	8005cfc <xTaskCheckForTimeOut+0x7c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8005cfc:	f000 fcae 	bl	800665c <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8005d00:	697b      	ldr	r3, [r7, #20]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	200003c0 	.word	0x200003c0
 8005d10:	200003d4 	.word	0x200003d4

08005d14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8005d18:	4b03      	ldr	r3, [pc, #12]	@ (8005d28 <vTaskMissedYield+0x14>)
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8005d1e:	bf00      	nop
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bc80      	pop	{r7}
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	200003d0 	.word	0x200003d0

08005d2c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005d34:	f000 f852 	bl	8005ddc <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8005d38:	4b06      	ldr	r3, [pc, #24]	@ (8005d54 <prvIdleTask+0x28>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d9f9      	bls.n	8005d34 <prvIdleTask+0x8>
            {
                taskYIELD();
 8005d40:	4b05      	ldr	r3, [pc, #20]	@ (8005d58 <prvIdleTask+0x2c>)
 8005d42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d46:	601a      	str	r2, [r3, #0]
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005d50:	e7f0      	b.n	8005d34 <prvIdleTask+0x8>
 8005d52:	bf00      	nop
 8005d54:	200002ac 	.word	0x200002ac
 8005d58:	e000ed04 	.word	0xe000ed04

08005d5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b082      	sub	sp, #8
 8005d60:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d62:	2300      	movs	r3, #0
 8005d64:	607b      	str	r3, [r7, #4]
 8005d66:	e00c      	b.n	8005d82 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4a12      	ldr	r2, [pc, #72]	@ (8005dbc <prvInitialiseTaskLists+0x60>)
 8005d74:	4413      	add	r3, r2
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fe fd78 	bl	800486c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3301      	adds	r3, #1
 8005d80:	607b      	str	r3, [r7, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b07      	cmp	r3, #7
 8005d86:	d9ef      	bls.n	8005d68 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005d88:	480d      	ldr	r0, [pc, #52]	@ (8005dc0 <prvInitialiseTaskLists+0x64>)
 8005d8a:	f7fe fd6f 	bl	800486c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005d8e:	480d      	ldr	r0, [pc, #52]	@ (8005dc4 <prvInitialiseTaskLists+0x68>)
 8005d90:	f7fe fd6c 	bl	800486c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005d94:	480c      	ldr	r0, [pc, #48]	@ (8005dc8 <prvInitialiseTaskLists+0x6c>)
 8005d96:	f7fe fd69 	bl	800486c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005d9a:	480c      	ldr	r0, [pc, #48]	@ (8005dcc <prvInitialiseTaskLists+0x70>)
 8005d9c:	f7fe fd66 	bl	800486c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8005da0:	480b      	ldr	r0, [pc, #44]	@ (8005dd0 <prvInitialiseTaskLists+0x74>)
 8005da2:	f7fe fd63 	bl	800486c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005da6:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd4 <prvInitialiseTaskLists+0x78>)
 8005da8:	4a05      	ldr	r2, [pc, #20]	@ (8005dc0 <prvInitialiseTaskLists+0x64>)
 8005daa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dac:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd8 <prvInitialiseTaskLists+0x7c>)
 8005dae:	4a05      	ldr	r2, [pc, #20]	@ (8005dc4 <prvInitialiseTaskLists+0x68>)
 8005db0:	601a      	str	r2, [r3, #0]
}
 8005db2:	bf00      	nop
 8005db4:	3708      	adds	r7, #8
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	200002ac 	.word	0x200002ac
 8005dc0:	2000034c 	.word	0x2000034c
 8005dc4:	20000360 	.word	0x20000360
 8005dc8:	2000037c 	.word	0x2000037c
 8005dcc:	20000390 	.word	0x20000390
 8005dd0:	200003a8 	.word	0x200003a8
 8005dd4:	20000374 	.word	0x20000374
 8005dd8:	20000378 	.word	0x20000378

08005ddc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005de2:	e019      	b.n	8005e18 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8005de4:	f000 fc20 	bl	8006628 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005de8:	4b10      	ldr	r3, [pc, #64]	@ (8005e2c <prvCheckTasksWaitingTermination+0x50>)
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3304      	adds	r3, #4
 8005df4:	4618      	mov	r0, r3
 8005df6:	f7fe fd9c 	bl	8004932 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8005dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005e30 <prvCheckTasksWaitingTermination+0x54>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	4a0b      	ldr	r2, [pc, #44]	@ (8005e30 <prvCheckTasksWaitingTermination+0x54>)
 8005e02:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8005e04:	4b0b      	ldr	r3, [pc, #44]	@ (8005e34 <prvCheckTasksWaitingTermination+0x58>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e34 <prvCheckTasksWaitingTermination+0x58>)
 8005e0c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8005e0e:	f000 fc25 	bl	800665c <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f810 	bl	8005e38 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e18:	4b06      	ldr	r3, [pc, #24]	@ (8005e34 <prvCheckTasksWaitingTermination+0x58>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e1      	bne.n	8005de4 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8005e20:	bf00      	nop
 8005e22:	bf00      	nop
 8005e24:	3708      	adds	r7, #8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	20000390 	.word	0x20000390
 8005e30:	200003bc 	.word	0x200003bc
 8005e34:	200003a4 	.word	0x200003a4

08005e38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b082      	sub	sp, #8
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 fd31 	bl	80068ac <vPortFree>
            vPortFree( pxTCB );
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fd2e 	bl	80068ac <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005e50:	bf00      	nop
 8005e52:	3708      	adds	r7, #8
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e58:	b480      	push	{r7}
 8005e5a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e5c:	4b09      	ldr	r3, [pc, #36]	@ (8005e84 <prvResetNextTaskUnblockTime+0x2c>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d104      	bne.n	8005e70 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005e66:	4b08      	ldr	r3, [pc, #32]	@ (8005e88 <prvResetNextTaskUnblockTime+0x30>)
 8005e68:	f04f 32ff 	mov.w	r2, #4294967295
 8005e6c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005e6e:	e005      	b.n	8005e7c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005e70:	4b04      	ldr	r3, [pc, #16]	@ (8005e84 <prvResetNextTaskUnblockTime+0x2c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a03      	ldr	r2, [pc, #12]	@ (8005e88 <prvResetNextTaskUnblockTime+0x30>)
 8005e7a:	6013      	str	r3, [r2, #0]
}
 8005e7c:	bf00      	nop
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bc80      	pop	{r7}
 8005e82:	4770      	bx	lr
 8005e84:	20000374 	.word	0x20000374
 8005e88:	200003dc 	.word	0x200003dc

08005e8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d06c      	beq.n	8005f7c <xTaskPriorityDisinherit+0xf0>
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ea6:	1e5a      	subs	r2, r3, #1
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	649a      	str	r2, [r3, #72]	@ 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d061      	beq.n	8005f7c <xTaskPriorityDisinherit+0xf0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d15d      	bne.n	8005f7c <xTaskPriorityDisinherit+0xf0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fe fd34 	bl	8004932 <uxListRemove>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10a      	bne.n	8005ee6 <xTaskPriorityDisinherit+0x5a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eda:	43da      	mvns	r2, r3
 8005edc:	4b2a      	ldr	r3, [pc, #168]	@ (8005f88 <xTaskPriorityDisinherit+0xfc>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	4a29      	ldr	r2, [pc, #164]	@ (8005f88 <xTaskPriorityDisinherit+0xfc>)
 8005ee4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef2:	f1c3 0208 	rsb	r2, r3, #8
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005efe:	2201      	movs	r2, #1
 8005f00:	409a      	lsls	r2, r3
 8005f02:	4b21      	ldr	r3, [pc, #132]	@ (8005f88 <xTaskPriorityDisinherit+0xfc>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	4a1f      	ldr	r2, [pc, #124]	@ (8005f88 <xTaskPriorityDisinherit+0xfc>)
 8005f0a:	6013      	str	r3, [r2, #0]
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f10:	491e      	ldr	r1, [pc, #120]	@ (8005f8c <xTaskPriorityDisinherit+0x100>)
 8005f12:	4613      	mov	r3, r2
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	4413      	add	r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	440b      	add	r3, r1
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	60fb      	str	r3, [r7, #12]
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	609a      	str	r2, [r3, #8]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	689a      	ldr	r2, [r3, #8]
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	60da      	str	r2, [r3, #12]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	3204      	adds	r2, #4
 8005f38:	605a      	str	r2, [r3, #4]
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	1d1a      	adds	r2, r3, #4
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	609a      	str	r2, [r3, #8]
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4a0f      	ldr	r2, [pc, #60]	@ (8005f8c <xTaskPriorityDisinherit+0x100>)
 8005f50:	441a      	add	r2, r3
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	615a      	str	r2, [r3, #20]
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f5a:	490c      	ldr	r1, [pc, #48]	@ (8005f8c <xTaskPriorityDisinherit+0x100>)
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	440b      	add	r3, r1
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	1c59      	adds	r1, r3, #1
 8005f6a:	4808      	ldr	r0, [pc, #32]	@ (8005f8c <xTaskPriorityDisinherit+0x100>)
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	4403      	add	r3, r0
 8005f76:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8005f7c:	697b      	ldr	r3, [r7, #20]
    }
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	200003c4 	.word	0x200003c4
 8005f8c:	200002ac 	.word	0x200002ac

08005f90 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]

        traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        taskENTER_CRITICAL();
 8005f9c:	f000 fb44 	bl	8006628 <vPortEnterCritical>

        /* Only block if the notification count is not already non-zero. */
        if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0UL )
 8005fa0:	4b2f      	ldr	r3, [pc, #188]	@ (8006060 <ulTaskGenericNotifyTake+0xd0>)
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	3312      	adds	r3, #18
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d123      	bne.n	8005ffa <ulTaskGenericNotifyTake+0x6a>
        {
            /* Mark this task as waiting for a notification. */
            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8005fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8006060 <ulTaskGenericNotifyTake+0xd0>)
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	4413      	add	r3, r2
 8005fba:	3350      	adds	r3, #80	@ 0x50
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	701a      	strb	r2, [r3, #0]

            if( xTicksToWait > ( TickType_t ) 0 )
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d016      	beq.n	8005ff4 <ulTaskGenericNotifyTake+0x64>
                 *    adding the task to the pendingReady list. In other words,
                 *    the task still remains on the pendingReady list.
                 * 5. Resume scheduler moves the task from pendingReady list to
                 *    the Ready list.
                 */
                vTaskSuspendAll();
 8005fc6:	f7ff fb0d 	bl	80055e4 <vTaskSuspendAll>
                {
                    taskEXIT_CRITICAL();
 8005fca:	f000 fb47 	bl	800665c <vPortExitCritical>

                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005fce:	2101      	movs	r1, #1
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 fa0d 	bl	80063f0 <prvAddCurrentTaskToDelayedList>
                }
                xAlreadyYielded = xTaskResumeAll();
 8005fd6:	f7ff fb13 	bl	8005600 <xTaskResumeAll>
 8005fda:	6178      	str	r0, [r7, #20]

                if( xAlreadyYielded == pdFALSE )
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10d      	bne.n	8005ffe <ulTaskGenericNotifyTake+0x6e>
                {
                    taskYIELD_WITHIN_API();
 8005fe2:	4b20      	ldr	r3, [pc, #128]	@ (8006064 <ulTaskGenericNotifyTake+0xd4>)
 8005fe4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	f3bf 8f4f 	dsb	sy
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	e004      	b.n	8005ffe <ulTaskGenericNotifyTake+0x6e>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                taskEXIT_CRITICAL();
 8005ff4:	f000 fb32 	bl	800665c <vPortExitCritical>
 8005ff8:	e001      	b.n	8005ffe <ulTaskGenericNotifyTake+0x6e>
            }
        }
        else
        {
            taskEXIT_CRITICAL();
 8005ffa:	f000 fb2f 	bl	800665c <vPortExitCritical>
        }

        taskENTER_CRITICAL();
 8005ffe:	f000 fb13 	bl	8006628 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8006002:	4b17      	ldr	r3, [pc, #92]	@ (8006060 <ulTaskGenericNotifyTake+0xd0>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3312      	adds	r3, #18
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	613b      	str	r3, [r7, #16]

            if( ulReturn != 0UL )
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d014      	beq.n	8006042 <ulTaskGenericNotifyTake+0xb2>
            {
                if( xClearCountOnExit != pdFALSE )
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d008      	beq.n	8006030 <ulTaskGenericNotifyTake+0xa0>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0UL;
 800601e:	4b10      	ldr	r3, [pc, #64]	@ (8006060 <ulTaskGenericNotifyTake+0xd0>)
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	3312      	adds	r3, #18
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	2200      	movs	r2, #0
 800602c:	605a      	str	r2, [r3, #4]
 800602e:	e008      	b.n	8006042 <ulTaskGenericNotifyTake+0xb2>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 8006030:	4b0b      	ldr	r3, [pc, #44]	@ (8006060 <ulTaskGenericNotifyTake+0xd0>)
 8006032:	6819      	ldr	r1, [r3, #0]
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	1e5a      	subs	r2, r3, #1
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	3312      	adds	r3, #18
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	440b      	add	r3, r1
 8006040:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8006042:	4b07      	ldr	r3, [pc, #28]	@ (8006060 <ulTaskGenericNotifyTake+0xd0>)
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4413      	add	r3, r2
 800604a:	3350      	adds	r3, #80	@ 0x50
 800604c:	2200      	movs	r2, #0
 800604e:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006050:	f000 fb04 	bl	800665c <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
 8006054:	693b      	ldr	r3, [r7, #16]
    }
 8006056:	4618      	mov	r0, r3
 8006058:	3718      	adds	r7, #24
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	200002a8 	.word	0x200002a8
 8006064:	e000ed04 	.word	0xe000ed04

08006068 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006068:	b580      	push	{r7, lr}
 800606a:	b08a      	sub	sp, #40	@ 0x28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
 8006074:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006076:	2301      	movs	r3, #1
 8006078:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
        configASSERT( xTaskToNotify );
        pxTCB = xTaskToNotify;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	623b      	str	r3, [r7, #32]

        taskENTER_CRITICAL();
 800607e:	f000 fad3 	bl	8006628 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006084:	2b00      	cmp	r3, #0
 8006086:	d007      	beq.n	8006098 <xTaskGenericNotify+0x30>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006088:	6a3a      	ldr	r2, [r7, #32]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	3312      	adds	r3, #18
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4413      	add	r3, r2
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006096:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006098:	6a3a      	ldr	r2, [r7, #32]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	4413      	add	r3, r2
 800609e:	3350      	adds	r3, #80	@ 0x50
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	77fb      	strb	r3, [r7, #31]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80060a4:	6a3a      	ldr	r2, [r7, #32]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	4413      	add	r3, r2
 80060aa:	3350      	adds	r3, #80	@ 0x50
 80060ac:	2202      	movs	r2, #2
 80060ae:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	2b04      	cmp	r3, #4
 80060b4:	d83f      	bhi.n	8006136 <xTaskGenericNotify+0xce>
 80060b6:	a201      	add	r2, pc, #4	@ (adr r2, 80060bc <xTaskGenericNotify+0x54>)
 80060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060bc:	08006137 	.word	0x08006137
 80060c0:	080060d1 	.word	0x080060d1
 80060c4:	080060ef 	.word	0x080060ef
 80060c8:	0800610b 	.word	0x0800610b
 80060cc:	0800611b 	.word	0x0800611b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80060d0:	6a3a      	ldr	r2, [r7, #32]
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	3312      	adds	r3, #18
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	431a      	orrs	r2, r3
 80060e0:	6a39      	ldr	r1, [r7, #32]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	3312      	adds	r3, #18
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	440b      	add	r3, r1
 80060ea:	605a      	str	r2, [r3, #4]
                    break;
 80060ec:	e024      	b.n	8006138 <xTaskGenericNotify+0xd0>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80060ee:	6a3a      	ldr	r2, [r7, #32]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	3312      	adds	r3, #18
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	1c5a      	adds	r2, r3, #1
 80060fc:	6a39      	ldr	r1, [r7, #32]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	3312      	adds	r3, #18
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	440b      	add	r3, r1
 8006106:	605a      	str	r2, [r3, #4]
                    break;
 8006108:	e016      	b.n	8006138 <xTaskGenericNotify+0xd0>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800610a:	6a3a      	ldr	r2, [r7, #32]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	3312      	adds	r3, #18
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	605a      	str	r2, [r3, #4]
                    break;
 8006118:	e00e      	b.n	8006138 <xTaskGenericNotify+0xd0>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800611a:	7ffb      	ldrb	r3, [r7, #31]
 800611c:	2b02      	cmp	r3, #2
 800611e:	d007      	beq.n	8006130 <xTaskGenericNotify+0xc8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006120:	6a3a      	ldr	r2, [r7, #32]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	3312      	adds	r3, #18
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800612e:	e003      	b.n	8006138 <xTaskGenericNotify+0xd0>
                        xReturn = pdFAIL;
 8006130:	2300      	movs	r3, #0
 8006132:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8006134:	e000      	b.n	8006138 <xTaskGenericNotify+0xd0>
                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );

                    break;
 8006136:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006138:	7ffb      	ldrb	r3, [r7, #31]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d16c      	bne.n	8006218 <xTaskGenericNotify+0x1b0>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	61bb      	str	r3, [r7, #24]
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	6a3a      	ldr	r2, [r7, #32]
 800614a:	68d2      	ldr	r2, [r2, #12]
 800614c:	609a      	str	r2, [r3, #8]
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	6a3a      	ldr	r2, [r7, #32]
 8006154:	6892      	ldr	r2, [r2, #8]
 8006156:	605a      	str	r2, [r3, #4]
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	3304      	adds	r3, #4
 8006160:	429a      	cmp	r2, r3
 8006162:	d103      	bne.n	800616c <xTaskGenericNotify+0x104>
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	68da      	ldr	r2, [r3, #12]
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	605a      	str	r2, [r3, #4]
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	2200      	movs	r2, #0
 8006170:	615a      	str	r2, [r3, #20]
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	1e5a      	subs	r2, r3, #1
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006180:	2201      	movs	r2, #1
 8006182:	409a      	lsls	r2, r3
 8006184:	4b28      	ldr	r3, [pc, #160]	@ (8006228 <xTaskGenericNotify+0x1c0>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4313      	orrs	r3, r2
 800618a:	4a27      	ldr	r2, [pc, #156]	@ (8006228 <xTaskGenericNotify+0x1c0>)
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006192:	4926      	ldr	r1, [pc, #152]	@ (800622c <xTaskGenericNotify+0x1c4>)
 8006194:	4613      	mov	r3, r2
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	440b      	add	r3, r1
 800619e:	3304      	adds	r3, #4
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	6a3b      	ldr	r3, [r7, #32]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	609a      	str	r2, [r3, #8]
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	689a      	ldr	r2, [r3, #8]
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	60da      	str	r2, [r3, #12]
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	6a3a      	ldr	r2, [r7, #32]
 80061b8:	3204      	adds	r2, #4
 80061ba:	605a      	str	r2, [r3, #4]
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	1d1a      	adds	r2, r3, #4
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	609a      	str	r2, [r3, #8]
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4a16      	ldr	r2, [pc, #88]	@ (800622c <xTaskGenericNotify+0x1c4>)
 80061d2:	441a      	add	r2, r3
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	615a      	str	r2, [r3, #20]
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061dc:	4913      	ldr	r1, [pc, #76]	@ (800622c <xTaskGenericNotify+0x1c4>)
 80061de:	4613      	mov	r3, r2
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	4413      	add	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	440b      	add	r3, r1
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	1c59      	adds	r1, r3, #1
 80061ec:	480f      	ldr	r0, [pc, #60]	@ (800622c <xTaskGenericNotify+0x1c4>)
 80061ee:	4613      	mov	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4403      	add	r3, r0
 80061f8:	6019      	str	r1, [r3, #0]
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 80061fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006230 <xTaskGenericNotify+0x1c8>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006204:	429a      	cmp	r2, r3
 8006206:	d207      	bcs.n	8006218 <xTaskGenericNotify+0x1b0>
 8006208:	4b0a      	ldr	r3, [pc, #40]	@ (8006234 <xTaskGenericNotify+0x1cc>)
 800620a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800620e:	601a      	str	r2, [r3, #0]
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006218:	f000 fa20 	bl	800665c <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 800621c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800621e:	4618      	mov	r0, r3
 8006220:	3728      	adds	r7, #40	@ 0x28
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	200003c4 	.word	0x200003c4
 800622c:	200002ac 	.word	0x200002ac
 8006230:	200002a8 	.word	0x200002a8
 8006234:	e000ed04 	.word	0xe000ed04

08006238 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006238:	b480      	push	{r7}
 800623a:	b08f      	sub	sp, #60	@ 0x3c
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

        pxTCB = xTaskToNotify;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm volatile
 8006248:	f3ef 8211 	mrs	r2, BASEPRI
 800624c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	61fa      	str	r2, [r7, #28]
 800625e:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 8006260:	69fb      	ldr	r3, [r7, #28]

        uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
 8006262:	633b      	str	r3, [r7, #48]	@ 0x30
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006264:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	4413      	add	r3, r2
 800626a:	3350      	adds	r3, #80	@ 0x50
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006272:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	4413      	add	r3, r2
 8006278:	3350      	adds	r3, #80	@ 0x50
 800627a:	2202      	movs	r2, #2
 800627c:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800627e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	3312      	adds	r3, #18
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	3312      	adds	r3, #18
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	440b      	add	r3, r1
 8006296:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006298:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800629c:	2b01      	cmp	r3, #1
 800629e:	f040 808f 	bne.w	80063c0 <vTaskGenericNotifyGiveFromISR+0x188>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80062a2:	4b4d      	ldr	r3, [pc, #308]	@ (80063d8 <vTaskGenericNotifyGiveFromISR+0x1a0>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d15e      	bne.n	8006368 <vTaskGenericNotifyGiveFromISR+0x130>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80062aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80062b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062b6:	68d2      	ldr	r2, [r2, #12]
 80062b8:	609a      	str	r2, [r3, #8]
 80062ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062c0:	6892      	ldr	r2, [r2, #8]
 80062c2:	605a      	str	r2, [r3, #4]
 80062c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ca:	3304      	adds	r3, #4
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d103      	bne.n	80062d8 <vTaskGenericNotifyGiveFromISR+0xa0>
 80062d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d6:	605a      	str	r2, [r3, #4]
 80062d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062da:	2200      	movs	r2, #0
 80062dc:	615a      	str	r2, [r3, #20]
 80062de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	1e5a      	subs	r2, r3, #1
 80062e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80062e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ec:	2201      	movs	r2, #1
 80062ee:	409a      	lsls	r2, r3
 80062f0:	4b3a      	ldr	r3, [pc, #232]	@ (80063dc <vTaskGenericNotifyGiveFromISR+0x1a4>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	4a39      	ldr	r2, [pc, #228]	@ (80063dc <vTaskGenericNotifyGiveFromISR+0x1a4>)
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062fe:	4938      	ldr	r1, [pc, #224]	@ (80063e0 <vTaskGenericNotifyGiveFromISR+0x1a8>)
 8006300:	4613      	mov	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	440b      	add	r3, r1
 800630a:	3304      	adds	r3, #4
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	623b      	str	r3, [r7, #32]
 8006310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006312:	6a3a      	ldr	r2, [r7, #32]
 8006314:	609a      	str	r2, [r3, #8]
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	689a      	ldr	r2, [r3, #8]
 800631a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800631c:	60da      	str	r2, [r3, #12]
 800631e:	6a3b      	ldr	r3, [r7, #32]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006324:	3204      	adds	r2, #4
 8006326:	605a      	str	r2, [r3, #4]
 8006328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800632a:	1d1a      	adds	r2, r3, #4
 800632c:	6a3b      	ldr	r3, [r7, #32]
 800632e:	609a      	str	r2, [r3, #8]
 8006330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006334:	4613      	mov	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	4413      	add	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4a28      	ldr	r2, [pc, #160]	@ (80063e0 <vTaskGenericNotifyGiveFromISR+0x1a8>)
 800633e:	441a      	add	r2, r3
 8006340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006342:	615a      	str	r2, [r3, #20]
 8006344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006348:	4925      	ldr	r1, [pc, #148]	@ (80063e0 <vTaskGenericNotifyGiveFromISR+0x1a8>)
 800634a:	4613      	mov	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	440b      	add	r3, r1
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	1c59      	adds	r1, r3, #1
 8006358:	4821      	ldr	r0, [pc, #132]	@ (80063e0 <vTaskGenericNotifyGiveFromISR+0x1a8>)
 800635a:	4613      	mov	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4403      	add	r3, r0
 8006364:	6019      	str	r1, [r3, #0]
 8006366:	e01b      	b.n	80063a0 <vTaskGenericNotifyGiveFromISR+0x168>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006368:	4b1e      	ldr	r3, [pc, #120]	@ (80063e4 <vTaskGenericNotifyGiveFromISR+0x1ac>)
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800636e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006370:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006372:	61da      	str	r2, [r3, #28]
 8006374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800637a:	621a      	str	r2, [r3, #32]
 800637c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006382:	3218      	adds	r2, #24
 8006384:	605a      	str	r2, [r3, #4]
 8006386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006388:	f103 0218 	add.w	r2, r3, #24
 800638c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800638e:	609a      	str	r2, [r3, #8]
 8006390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006392:	4a14      	ldr	r2, [pc, #80]	@ (80063e4 <vTaskGenericNotifyGiveFromISR+0x1ac>)
 8006394:	629a      	str	r2, [r3, #40]	@ 0x28
 8006396:	4b13      	ldr	r3, [pc, #76]	@ (80063e4 <vTaskGenericNotifyGiveFromISR+0x1ac>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3301      	adds	r3, #1
 800639c:	4a11      	ldr	r2, [pc, #68]	@ (80063e4 <vTaskGenericNotifyGiveFromISR+0x1ac>)
 800639e:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063a4:	4b10      	ldr	r3, [pc, #64]	@ (80063e8 <vTaskGenericNotifyGiveFromISR+0x1b0>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d908      	bls.n	80063c0 <vTaskGenericNotifyGiveFromISR+0x188>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d002      	beq.n	80063ba <vTaskGenericNotifyGiveFromISR+0x182>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 80063ba:	4b0c      	ldr	r3, [pc, #48]	@ (80063ec <vTaskGenericNotifyGiveFromISR+0x1b4>)
 80063bc:	2201      	movs	r2, #1
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c2:	617b      	str	r3, [r7, #20]
    __asm volatile
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	f383 8811 	msr	BASEPRI, r3
}
 80063ca:	bf00      	nop
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
 80063cc:	bf00      	nop
 80063ce:	373c      	adds	r7, #60	@ 0x3c
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bc80      	pop	{r7}
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	200003e4 	.word	0x200003e4
 80063dc:	200003c4 	.word	0x200003c4
 80063e0:	200002ac 	.word	0x200002ac
 80063e4:	2000037c 	.word	0x2000037c
 80063e8:	200002a8 	.word	0x200002a8
 80063ec:	200003d0 	.word	0x200003d0

080063f0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b088      	sub	sp, #32
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80063fa:	4b37      	ldr	r3, [pc, #220]	@ (80064d8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8006400:	4b36      	ldr	r3, [pc, #216]	@ (80064dc <prvAddCurrentTaskToDelayedList+0xec>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8006406:	4b36      	ldr	r3, [pc, #216]	@ (80064e0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800640c:	4b35      	ldr	r3, [pc, #212]	@ (80064e4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3304      	adds	r3, #4
 8006412:	4618      	mov	r0, r3
 8006414:	f7fe fa8d 	bl	8004932 <uxListRemove>
 8006418:	4603      	mov	r3, r0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10b      	bne.n	8006436 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800641e:	4b31      	ldr	r3, [pc, #196]	@ (80064e4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006424:	2201      	movs	r2, #1
 8006426:	fa02 f303 	lsl.w	r3, r2, r3
 800642a:	43da      	mvns	r2, r3
 800642c:	4b2e      	ldr	r3, [pc, #184]	@ (80064e8 <prvAddCurrentTaskToDelayedList+0xf8>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4013      	ands	r3, r2
 8006432:	4a2d      	ldr	r2, [pc, #180]	@ (80064e8 <prvAddCurrentTaskToDelayedList+0xf8>)
 8006434:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643c:	d124      	bne.n	8006488 <prvAddCurrentTaskToDelayedList+0x98>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d021      	beq.n	8006488 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006444:	4b29      	ldr	r3, [pc, #164]	@ (80064ec <prvAddCurrentTaskToDelayedList+0xfc>)
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	613b      	str	r3, [r7, #16]
 800644a:	4b26      	ldr	r3, [pc, #152]	@ (80064e4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	609a      	str	r2, [r3, #8]
 8006452:	4b24      	ldr	r3, [pc, #144]	@ (80064e4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	6892      	ldr	r2, [r2, #8]
 800645a:	60da      	str	r2, [r3, #12]
 800645c:	4b21      	ldr	r3, [pc, #132]	@ (80064e4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	3204      	adds	r2, #4
 8006466:	605a      	str	r2, [r3, #4]
 8006468:	4b1e      	ldr	r3, [pc, #120]	@ (80064e4 <prvAddCurrentTaskToDelayedList+0xf4>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	1d1a      	adds	r2, r3, #4
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	609a      	str	r2, [r3, #8]
 8006472:	4b1c      	ldr	r3, [pc, #112]	@ (80064e4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a1d      	ldr	r2, [pc, #116]	@ (80064ec <prvAddCurrentTaskToDelayedList+0xfc>)
 8006478:	615a      	str	r2, [r3, #20]
 800647a:	4b1c      	ldr	r3, [pc, #112]	@ (80064ec <prvAddCurrentTaskToDelayedList+0xfc>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	3301      	adds	r3, #1
 8006480:	4a1a      	ldr	r2, [pc, #104]	@ (80064ec <prvAddCurrentTaskToDelayedList+0xfc>)
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006486:	e022      	b.n	80064ce <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006488:	69fa      	ldr	r2, [r7, #28]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4413      	add	r3, r2
 800648e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006490:	4b14      	ldr	r3, [pc, #80]	@ (80064e4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	429a      	cmp	r2, r3
 800649e:	d207      	bcs.n	80064b0 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80064a0:	4b10      	ldr	r3, [pc, #64]	@ (80064e4 <prvAddCurrentTaskToDelayedList+0xf4>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3304      	adds	r3, #4
 80064a6:	4619      	mov	r1, r3
 80064a8:	6978      	ldr	r0, [r7, #20]
 80064aa:	f7fe fa0a 	bl	80048c2 <vListInsert>
}
 80064ae:	e00e      	b.n	80064ce <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80064b0:	4b0c      	ldr	r3, [pc, #48]	@ (80064e4 <prvAddCurrentTaskToDelayedList+0xf4>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3304      	adds	r3, #4
 80064b6:	4619      	mov	r1, r3
 80064b8:	69b8      	ldr	r0, [r7, #24]
 80064ba:	f7fe fa02 	bl	80048c2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80064be:	4b0c      	ldr	r3, [pc, #48]	@ (80064f0 <prvAddCurrentTaskToDelayedList+0x100>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d202      	bcs.n	80064ce <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 80064c8:	4a09      	ldr	r2, [pc, #36]	@ (80064f0 <prvAddCurrentTaskToDelayedList+0x100>)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6013      	str	r3, [r2, #0]
}
 80064ce:	bf00      	nop
 80064d0:	3720      	adds	r7, #32
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	200003c0 	.word	0x200003c0
 80064dc:	20000374 	.word	0x20000374
 80064e0:	20000378 	.word	0x20000378
 80064e4:	200002a8 	.word	0x200002a8
 80064e8:	200003c4 	.word	0x200003c4
 80064ec:	200003a8 	.word	0x200003a8
 80064f0:	200003dc 	.word	0x200003dc

080064f4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3b04      	subs	r3, #4
 8006504:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800650c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	3b04      	subs	r3, #4
 8006512:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f023 0201 	bic.w	r2, r3, #1
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3b04      	subs	r3, #4
 8006522:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006524:	4a08      	ldr	r2, [pc, #32]	@ (8006548 <pxPortInitialiseStack+0x54>)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3b14      	subs	r3, #20
 800652e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	3b20      	subs	r3, #32
 800653a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800653c:	68fb      	ldr	r3, [r7, #12]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	bc80      	pop	{r7}
 8006546:	4770      	bx	lr
 8006548:	0800654d 	.word	0x0800654d

0800654c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8006552:	2300      	movs	r3, #0
 8006554:	603b      	str	r3, [r7, #0]
    __asm volatile
 8006556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800655a:	f383 8811 	msr	BASEPRI, r3
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	607b      	str	r3, [r7, #4]
}
 8006568:	bf00      	nop
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800656a:	bf00      	nop
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d0fc      	beq.n	800656c <prvTaskExitError+0x20>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006572:	bf00      	nop
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	bc80      	pop	{r7}
 800657c:	4770      	bx	lr
	...

08006580 <vPortSVCHandler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006580:	4b07      	ldr	r3, [pc, #28]	@ (80065a0 <pxCurrentTCBConst2>)
 8006582:	6819      	ldr	r1, [r3, #0]
 8006584:	6808      	ldr	r0, [r1, #0]
 8006586:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800658a:	f380 8809 	msr	PSP, r0
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f04f 0000 	mov.w	r0, #0
 8006596:	f380 8811 	msr	BASEPRI, r0
 800659a:	f04e 0e0d 	orr.w	lr, lr, #13
 800659e:	4770      	bx	lr

080065a0 <pxCurrentTCBConst2>:
 80065a0:	200002a8 	.word	0x200002a8
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop

080065a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 80065a8:	4806      	ldr	r0, [pc, #24]	@ (80065c4 <prvPortStartFirstTask+0x1c>)
 80065aa:	6800      	ldr	r0, [r0, #0]
 80065ac:	6800      	ldr	r0, [r0, #0]
 80065ae:	f380 8808 	msr	MSP, r0
 80065b2:	b662      	cpsie	i
 80065b4:	b661      	cpsie	f
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	df00      	svc	0
 80065c0:	bf00      	nop
 80065c2:	0000      	.short	0x0000
 80065c4:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80065c8:	bf00      	nop
 80065ca:	bf00      	nop

080065cc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80065d2:	4b11      	ldr	r3, [pc, #68]	@ (8006618 <xPortStartScheduler+0x4c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	607b      	str	r3, [r7, #4]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80065d8:	4b10      	ldr	r3, [pc, #64]	@ (800661c <xPortStartScheduler+0x50>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a0f      	ldr	r2, [pc, #60]	@ (800661c <xPortStartScheduler+0x50>)
 80065de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065e2:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80065e4:	4b0d      	ldr	r3, [pc, #52]	@ (800661c <xPortStartScheduler+0x50>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a0c      	ldr	r2, [pc, #48]	@ (800661c <xPortStartScheduler+0x50>)
 80065ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ee:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80065f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006620 <xPortStartScheduler+0x54>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80065f6:	f000 f891 	bl	800671c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80065fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006624 <xPortStartScheduler+0x58>)
 80065fc:	2200      	movs	r2, #0
 80065fe:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006600:	f7ff ffd2 	bl	80065a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006604:	f7ff fa02 	bl	8005a0c <vTaskSwitchContext>
    prvTaskExitError();
 8006608:	f7ff ffa0 	bl	800654c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	e000ed08 	.word	0xe000ed08
 800661c:	e000ed20 	.word	0xe000ed20
 8006620:	e000ed1c 	.word	0xe000ed1c
 8006624:	20000014 	.word	0x20000014

08006628 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
    __asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	607b      	str	r3, [r7, #4]
}
 8006640:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006642:	4b05      	ldr	r3, [pc, #20]	@ (8006658 <vPortEnterCritical+0x30>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	3301      	adds	r3, #1
 8006648:	4a03      	ldr	r2, [pc, #12]	@ (8006658 <vPortEnterCritical+0x30>)
 800664a:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	bc80      	pop	{r7}
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	20000014 	.word	0x20000014

0800665c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8006662:	4b0a      	ldr	r3, [pc, #40]	@ (800668c <vPortExitCritical+0x30>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	3b01      	subs	r3, #1
 8006668:	4a08      	ldr	r2, [pc, #32]	@ (800668c <vPortExitCritical+0x30>)
 800666a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800666c:	4b07      	ldr	r3, [pc, #28]	@ (800668c <vPortExitCritical+0x30>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d105      	bne.n	8006680 <vPortExitCritical+0x24>
 8006674:	2300      	movs	r3, #0
 8006676:	607b      	str	r3, [r7, #4]
    __asm volatile
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f383 8811 	msr	BASEPRI, r3
}
 800667e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	bc80      	pop	{r7}
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	20000014 	.word	0x20000014

08006690 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006690:	f3ef 8009 	mrs	r0, PSP
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	4b0d      	ldr	r3, [pc, #52]	@ (80066d0 <pxCurrentTCBConst>)
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066a0:	6010      	str	r0, [r2, #0]
 80066a2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80066a6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80066aa:	f380 8811 	msr	BASEPRI, r0
 80066ae:	f7ff f9ad 	bl	8005a0c <vTaskSwitchContext>
 80066b2:	f04f 0000 	mov.w	r0, #0
 80066b6:	f380 8811 	msr	BASEPRI, r0
 80066ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80066be:	6819      	ldr	r1, [r3, #0]
 80066c0:	6808      	ldr	r0, [r1, #0]
 80066c2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80066c6:	f380 8809 	msr	PSP, r0
 80066ca:	f3bf 8f6f 	isb	sy
 80066ce:	4770      	bx	lr

080066d0 <pxCurrentTCBConst>:
 80066d0:	200002a8 	.word	0x200002a8
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop

080066d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
    __asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
}
 80066f0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80066f2:	f7ff f885 	bl	8005800 <xTaskIncrementTick>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <xPortSysTickHandler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066fc:	4b06      	ldr	r3, [pc, #24]	@ (8006718 <xPortSysTickHandler+0x40>)
 80066fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	2300      	movs	r3, #0
 8006706:	603b      	str	r3, [r7, #0]
    __asm volatile
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f383 8811 	msr	BASEPRI, r3
}
 800670e:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006720:	4b08      	ldr	r3, [pc, #32]	@ (8006744 <vPortSetupTimerInterrupt+0x28>)
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006726:	4b08      	ldr	r3, [pc, #32]	@ (8006748 <vPortSetupTimerInterrupt+0x2c>)
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800672c:	4b07      	ldr	r3, [pc, #28]	@ (800674c <vPortSetupTimerInterrupt+0x30>)
 800672e:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8006732:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006734:	4b03      	ldr	r3, [pc, #12]	@ (8006744 <vPortSetupTimerInterrupt+0x28>)
 8006736:	2207      	movs	r2, #7
 8006738:	601a      	str	r2, [r3, #0]
}
 800673a:	bf00      	nop
 800673c:	46bd      	mov	sp, r7
 800673e:	bc80      	pop	{r7}
 8006740:	4770      	bx	lr
 8006742:	bf00      	nop
 8006744:	e000e010 	.word	0xe000e010
 8006748:	e000e018 	.word	0xe000e018
 800674c:	e000e014 	.word	0xe000e014

08006750 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b088      	sub	sp, #32
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8006758:	2300      	movs	r3, #0
 800675a:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d022      	beq.n	80067a8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8006762:	2308      	movs	r3, #8
 8006764:	43db      	mvns	r3, r3
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	429a      	cmp	r2, r3
 800676a:	d81b      	bhi.n	80067a4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800676c:	2208      	movs	r2, #8
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4413      	add	r3, r2
 8006772:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f003 0307 	and.w	r3, r3, #7
 800677a:	2b00      	cmp	r3, #0
 800677c:	d014      	beq.n	80067a8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f003 0307 	and.w	r3, r3, #7
 8006784:	f1c3 0308 	rsb	r3, r3, #8
 8006788:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	43db      	mvns	r3, r3
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	429a      	cmp	r2, r3
 8006792:	d804      	bhi.n	800679e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	4413      	add	r3, r2
 800679a:	607b      	str	r3, [r7, #4]
 800679c:	e004      	b.n	80067a8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800679e:	2300      	movs	r3, #0
 80067a0:	607b      	str	r3, [r7, #4]
 80067a2:	e001      	b.n	80067a8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80067a4:	2300      	movs	r3, #0
 80067a6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80067a8:	f7fe ff1c 	bl	80055e4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80067ac:	4b3a      	ldr	r3, [pc, #232]	@ (8006898 <pvPortMalloc+0x148>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80067b4:	f000 f8b8 	bl	8006928 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	db64      	blt.n	8006888 <pvPortMalloc+0x138>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d061      	beq.n	8006888 <pvPortMalloc+0x138>
 80067c4:	4b35      	ldr	r3, [pc, #212]	@ (800689c <pvPortMalloc+0x14c>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d85c      	bhi.n	8006888 <pvPortMalloc+0x138>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80067ce:	4b34      	ldr	r3, [pc, #208]	@ (80068a0 <pvPortMalloc+0x150>)
 80067d0:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80067d2:	4b33      	ldr	r3, [pc, #204]	@ (80068a0 <pvPortMalloc+0x150>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80067d8:	e004      	b.n	80067e4 <pvPortMalloc+0x94>
                {
                    pxPreviousBlock = pxBlock;
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d903      	bls.n	80067f6 <pvPortMalloc+0xa6>
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1f1      	bne.n	80067da <pvPortMalloc+0x8a>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80067f6:	4b28      	ldr	r3, [pc, #160]	@ (8006898 <pvPortMalloc+0x148>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	69fa      	ldr	r2, [r7, #28]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d043      	beq.n	8006888 <pvPortMalloc+0x138>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2208      	movs	r2, #8
 8006806:	4413      	add	r3, r2
 8006808:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	1ad2      	subs	r2, r2, r3
 800681a:	2308      	movs	r3, #8
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	429a      	cmp	r2, r3
 8006820:	d913      	bls.n	800684a <pvPortMalloc+0xfa>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006822:	69fa      	ldr	r2, [r7, #28]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4413      	add	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	685a      	ldr	r2, [r3, #4]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	1ad2      	subs	r2, r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800684a:	4b14      	ldr	r3, [pc, #80]	@ (800689c <pvPortMalloc+0x14c>)
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	4a11      	ldr	r2, [pc, #68]	@ (800689c <pvPortMalloc+0x14c>)
 8006856:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006858:	4b10      	ldr	r3, [pc, #64]	@ (800689c <pvPortMalloc+0x14c>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	4b11      	ldr	r3, [pc, #68]	@ (80068a4 <pvPortMalloc+0x154>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	429a      	cmp	r2, r3
 8006862:	d203      	bcs.n	800686c <pvPortMalloc+0x11c>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006864:	4b0d      	ldr	r3, [pc, #52]	@ (800689c <pvPortMalloc+0x14c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a0e      	ldr	r2, [pc, #56]	@ (80068a4 <pvPortMalloc+0x154>)
 800686a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800687e:	4b0a      	ldr	r3, [pc, #40]	@ (80068a8 <pvPortMalloc+0x158>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3301      	adds	r3, #1
 8006884:	4a08      	ldr	r2, [pc, #32]	@ (80068a8 <pvPortMalloc+0x158>)
 8006886:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006888:	f7fe feba 	bl	8005600 <xTaskResumeAll>
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
 800688c:	697b      	ldr	r3, [r7, #20]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3720      	adds	r7, #32
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20004bf0 	.word	0x20004bf0
 800689c:	20004bf4 	.word	0x20004bf4
 80068a0:	20004be8 	.word	0x20004be8
 80068a4:	20004bf8 	.word	0x20004bf8
 80068a8:	20004bfc 	.word	0x20004bfc

080068ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d02b      	beq.n	8006916 <vPortFree+0x6a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80068be:	2308      	movs	r3, #8
 80068c0:	425b      	negs	r3, r3
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	4413      	add	r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	0fdb      	lsrs	r3, r3, #31
 80068d2:	f003 0301 	and.w	r3, r3, #1
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d01c      	beq.n	8006916 <vPortFree+0x6a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d118      	bne.n	8006916 <vPortFree+0x6a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80068f0:	f7fe fe78 	bl	80055e4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	4b09      	ldr	r3, [pc, #36]	@ (8006920 <vPortFree+0x74>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4413      	add	r3, r2
 80068fe:	4a08      	ldr	r2, [pc, #32]	@ (8006920 <vPortFree+0x74>)
 8006900:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006902:	68b8      	ldr	r0, [r7, #8]
 8006904:	f000 f86a 	bl	80069dc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006908:	4b06      	ldr	r3, [pc, #24]	@ (8006924 <vPortFree+0x78>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	3301      	adds	r3, #1
 800690e:	4a05      	ldr	r2, [pc, #20]	@ (8006924 <vPortFree+0x78>)
 8006910:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006912:	f7fe fe75 	bl	8005600 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006916:	bf00      	nop
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20004bf4 	.word	0x20004bf4
 8006924:	20004c00 	.word	0x20004c00

08006928 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800692e:	f44f 4390 	mov.w	r3, #18432	@ 0x4800
 8006932:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8006934:	4b24      	ldr	r3, [pc, #144]	@ (80069c8 <prvHeapInit+0xa0>)
 8006936:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f003 0307 	and.w	r3, r3, #7
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00c      	beq.n	800695c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3307      	adds	r3, #7
 8006946:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0307 	bic.w	r3, r3, #7
 800694e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	4a1c      	ldr	r2, [pc, #112]	@ (80069c8 <prvHeapInit+0xa0>)
 8006958:	4413      	add	r3, r2
 800695a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4a1b      	ldr	r2, [pc, #108]	@ (80069cc <prvHeapInit+0xa4>)
 8006960:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8006962:	4b1a      	ldr	r3, [pc, #104]	@ (80069cc <prvHeapInit+0xa4>)
 8006964:	2200      	movs	r2, #0
 8006966:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	4413      	add	r3, r2
 800696e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8006970:	2208      	movs	r2, #8
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	1a9b      	subs	r3, r3, r2
 8006976:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f023 0307 	bic.w	r3, r3, #7
 800697e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a13      	ldr	r2, [pc, #76]	@ (80069d0 <prvHeapInit+0xa8>)
 8006984:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8006986:	4b12      	ldr	r3, [pc, #72]	@ (80069d0 <prvHeapInit+0xa8>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2200      	movs	r2, #0
 800698c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800698e:	4b10      	ldr	r3, [pc, #64]	@ (80069d0 <prvHeapInit+0xa8>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2200      	movs	r2, #0
 8006994:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	1ad2      	subs	r2, r2, r3
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80069a4:	4b0a      	ldr	r3, [pc, #40]	@ (80069d0 <prvHeapInit+0xa8>)
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	4a08      	ldr	r2, [pc, #32]	@ (80069d4 <prvHeapInit+0xac>)
 80069b2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	4a07      	ldr	r2, [pc, #28]	@ (80069d8 <prvHeapInit+0xb0>)
 80069ba:	6013      	str	r3, [r2, #0]
}
 80069bc:	bf00      	nop
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bc80      	pop	{r7}
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	200003e8 	.word	0x200003e8
 80069cc:	20004be8 	.word	0x20004be8
 80069d0:	20004bf0 	.word	0x20004bf0
 80069d4:	20004bf8 	.word	0x20004bf8
 80069d8:	20004bf4 	.word	0x20004bf4

080069dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80069e4:	4b27      	ldr	r3, [pc, #156]	@ (8006a84 <prvInsertBlockIntoFreeList+0xa8>)
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	e002      	b.n	80069f0 <prvInsertBlockIntoFreeList+0x14>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d8f7      	bhi.n	80069ea <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	68ba      	ldr	r2, [r7, #8]
 8006a04:	4413      	add	r3, r2
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d108      	bne.n	8006a1e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	441a      	add	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	441a      	add	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d118      	bne.n	8006a64 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	4b14      	ldr	r3, [pc, #80]	@ (8006a88 <prvInsertBlockIntoFreeList+0xac>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d00d      	beq.n	8006a5a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	441a      	add	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	e008      	b.n	8006a6c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8006a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006a88 <prvInsertBlockIntoFreeList+0xac>)
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	601a      	str	r2, [r3, #0]
 8006a62:	e003      	b.n	8006a6c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d002      	beq.n	8006a7a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006a7a:	bf00      	nop
 8006a7c:	3714      	adds	r7, #20
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bc80      	pop	{r7}
 8006a82:	4770      	bx	lr
 8006a84:	20004be8 	.word	0x20004be8
 8006a88:	20004bf0 	.word	0x20004bf0

08006a8c <Delay_Init>:
#ifdef DELAY_USE_TIMER
    TIM_HandleTypeDef* delay_timer_us_handle;
    TIM_HandleTypeDef* delay_timer_ms_handle;

    void Delay_Init(TIM_HandleTypeDef* us_handle, TIM_HandleTypeDef* ms_handle)
    {
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
        delay_timer_us_handle = us_handle;
 8006a96:	4a05      	ldr	r2, [pc, #20]	@ (8006aac <Delay_Init+0x20>)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6013      	str	r3, [r2, #0]
        delay_timer_ms_handle = ms_handle;
 8006a9c:	4a04      	ldr	r2, [pc, #16]	@ (8006ab0 <Delay_Init+0x24>)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	6013      	str	r3, [r2, #0]
    }
 8006aa2:	bf00      	nop
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bc80      	pop	{r7}
 8006aaa:	4770      	bx	lr
 8006aac:	20004c04 	.word	0x20004c04
 8006ab0:	20004c08 	.word	0x20004c08

08006ab4 <delay_us>:
#endif

void delay_us(uint32_t delay_time_us)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
        HAL_SYSTICK_Config(systick_load);
        while (delay_update_flag == 0);
    #endif

    #ifdef DELAY_USE_TIMER
        delay_timer_us_handle->Instance->CNT = 0;
 8006abc:	4b1b      	ldr	r3, [pc, #108]	@ (8006b2c <delay_us+0x78>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	625a      	str	r2, [r3, #36]	@ 0x24
        __HAL_TIM_ENABLE(delay_timer_us_handle);
 8006ac6:	4b19      	ldr	r3, [pc, #100]	@ (8006b2c <delay_us+0x78>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	4b17      	ldr	r3, [pc, #92]	@ (8006b2c <delay_us+0x78>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f042 0201 	orr.w	r2, r2, #1
 8006ad8:	601a      	str	r2, [r3, #0]
        while (delay_timer_us_handle->Instance->CNT < delay_time_us);
 8006ada:	bf00      	nop
 8006adc:	4b13      	ldr	r3, [pc, #76]	@ (8006b2c <delay_us+0x78>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae4:	687a      	ldr	r2, [r7, #4]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d8f8      	bhi.n	8006adc <delay_us+0x28>
        __HAL_TIM_DISABLE(delay_timer_us_handle);
 8006aea:	4b10      	ldr	r3, [pc, #64]	@ (8006b2c <delay_us+0x78>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6a1a      	ldr	r2, [r3, #32]
 8006af2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006af6:	4013      	ands	r3, r2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d112      	bne.n	8006b22 <delay_us+0x6e>
 8006afc:	4b0b      	ldr	r3, [pc, #44]	@ (8006b2c <delay_us+0x78>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6a1a      	ldr	r2, [r3, #32]
 8006b04:	f240 4344 	movw	r3, #1092	@ 0x444
 8006b08:	4013      	ands	r3, r2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d109      	bne.n	8006b22 <delay_us+0x6e>
 8006b0e:	4b07      	ldr	r3, [pc, #28]	@ (8006b2c <delay_us+0x78>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	4b05      	ldr	r3, [pc, #20]	@ (8006b2c <delay_us+0x78>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0201 	bic.w	r2, r2, #1
 8006b20:	601a      	str	r2, [r3, #0]

    #endif
}
 8006b22:	bf00      	nop
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bc80      	pop	{r7}
 8006b2a:	4770      	bx	lr
 8006b2c:	20004c04 	.word	0x20004c04

08006b30 <delay_ms>:

void delay_ms(uint32_t delay_time_ms)
{   
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
        HAL_SYSTICK_Config(systick_load);
        while (delay_update_flag == 0);
    #endif

    #ifdef DELAY_USE_TIMER
        delay_timer_ms_handle->Instance->CNT = 0;
 8006b38:	4b1b      	ldr	r3, [pc, #108]	@ (8006ba8 <delay_ms+0x78>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	625a      	str	r2, [r3, #36]	@ 0x24
        __HAL_TIM_ENABLE(delay_timer_ms_handle);
 8006b42:	4b19      	ldr	r3, [pc, #100]	@ (8006ba8 <delay_ms+0x78>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	4b17      	ldr	r3, [pc, #92]	@ (8006ba8 <delay_ms+0x78>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f042 0201 	orr.w	r2, r2, #1
 8006b54:	601a      	str	r2, [r3, #0]
        while (delay_timer_ms_handle->Instance->CNT < delay_time_ms);
 8006b56:	bf00      	nop
 8006b58:	4b13      	ldr	r3, [pc, #76]	@ (8006ba8 <delay_ms+0x78>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d8f8      	bhi.n	8006b58 <delay_ms+0x28>
        __HAL_TIM_DISABLE(delay_timer_ms_handle);
 8006b66:	4b10      	ldr	r3, [pc, #64]	@ (8006ba8 <delay_ms+0x78>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6a1a      	ldr	r2, [r3, #32]
 8006b6e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006b72:	4013      	ands	r3, r2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d112      	bne.n	8006b9e <delay_ms+0x6e>
 8006b78:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba8 <delay_ms+0x78>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6a1a      	ldr	r2, [r3, #32]
 8006b80:	f240 4344 	movw	r3, #1092	@ 0x444
 8006b84:	4013      	ands	r3, r2
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d109      	bne.n	8006b9e <delay_ms+0x6e>
 8006b8a:	4b07      	ldr	r3, [pc, #28]	@ (8006ba8 <delay_ms+0x78>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	4b05      	ldr	r3, [pc, #20]	@ (8006ba8 <delay_ms+0x78>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 0201 	bic.w	r2, r2, #1
 8006b9c:	601a      	str	r2, [r3, #0]

    #endif
}
 8006b9e:	bf00      	nop
 8006ba0:	370c      	adds	r7, #12
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bc80      	pop	{r7}
 8006ba6:	4770      	bx	lr
 8006ba8:	20004c08 	.word	0x20004c08

08006bac <capture_bit_0_1_for>:


static inline uint8_t capture_bit_0_1_for(uint16_t bit_0_time, uint16_t bit_1_time, uint8_t return_data);

static inline uint8_t capture_bit_0_1_for(uint16_t bit_0_time_us, uint16_t bit_1_time_us, uint8_t return_data)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	80fb      	strh	r3, [r7, #6]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	80bb      	strh	r3, [r7, #4]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	70fb      	strb	r3, [r7, #3]
	dht_device.delay_handle_us->Instance->CNT = 0;
 8006bbe:	4b53      	ldr	r3, [pc, #332]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(dht_device.delay_handle_us);
 8006bc8:	4b50      	ldr	r3, [pc, #320]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	4b4e      	ldr	r3, [pc, #312]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f042 0201 	orr.w	r2, r2, #1
 8006bda:	601a      	str	r2, [r3, #0]
	while ((dht_device.port->IDR & dht_device.pin) == 0)
 8006bdc:	e032      	b.n	8006c44 <capture_bit_0_1_for+0x98>
	{
		if (dht_device.delay_handle_us->Instance->CNT > bit_0_time_us)
 8006bde:	4b4b      	ldr	r3, [pc, #300]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006be6:	88fb      	ldrh	r3, [r7, #6]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d92b      	bls.n	8006c44 <capture_bit_0_1_for+0x98>
		{
			__HAL_TIM_DISABLE(dht_device.delay_handle_us);
 8006bec:	4b47      	ldr	r3, [pc, #284]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6a1a      	ldr	r2, [r3, #32]
 8006bf4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d112      	bne.n	8006c24 <capture_bit_0_1_for+0x78>
 8006bfe:	4b43      	ldr	r3, [pc, #268]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006c00:	689b      	ldr	r3, [r3, #8]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	6a1a      	ldr	r2, [r3, #32]
 8006c06:	f240 4344 	movw	r3, #1092	@ 0x444
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d109      	bne.n	8006c24 <capture_bit_0_1_for+0x78>
 8006c10:	4b3e      	ldr	r3, [pc, #248]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	4b3c      	ldr	r3, [pc, #240]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 0201 	bic.w	r2, r2, #1
 8006c22:	601a      	str	r2, [r3, #0]
			HAL_GPIO_Init(dht_device.port, &GPIO_output);
 8006c24:	4b39      	ldr	r3, [pc, #228]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4939      	ldr	r1, [pc, #228]	@ (8006d10 <capture_bit_0_1_for+0x164>)
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fb fa9a 	bl	8002164 <HAL_GPIO_Init>
			HAL_GPIO_WritePin(dht_device.port, dht_device.pin, GPIO_PIN_SET);
 8006c30:	4b36      	ldr	r3, [pc, #216]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a35      	ldr	r2, [pc, #212]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006c36:	8891      	ldrh	r1, [r2, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fb fc3d 	bl	80024ba <HAL_GPIO_WritePin>
			return return_data;
 8006c40:	78fb      	ldrb	r3, [r7, #3]
 8006c42:	e05f      	b.n	8006d04 <capture_bit_0_1_for+0x158>
	while ((dht_device.port->IDR & dht_device.pin) == 0)
 8006c44:	4b31      	ldr	r3, [pc, #196]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	4a30      	ldr	r2, [pc, #192]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006c4c:	8892      	ldrh	r2, [r2, #4]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0c4      	beq.n	8006bde <capture_bit_0_1_for+0x32>
		}
	}

	while ((dht_device.port->IDR & dht_device.pin) != 0)
 8006c54:	e032      	b.n	8006cbc <capture_bit_0_1_for+0x110>
	{
		if (dht_device.delay_handle_us->Instance->CNT > bit_1_time_us)
 8006c56:	4b2d      	ldr	r3, [pc, #180]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c5e:	88bb      	ldrh	r3, [r7, #4]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d92b      	bls.n	8006cbc <capture_bit_0_1_for+0x110>
		{
			__HAL_TIM_DISABLE(dht_device.delay_handle_us);
 8006c64:	4b29      	ldr	r3, [pc, #164]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6a1a      	ldr	r2, [r3, #32]
 8006c6c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006c70:	4013      	ands	r3, r2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d112      	bne.n	8006c9c <capture_bit_0_1_for+0xf0>
 8006c76:	4b25      	ldr	r3, [pc, #148]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6a1a      	ldr	r2, [r3, #32]
 8006c7e:	f240 4344 	movw	r3, #1092	@ 0x444
 8006c82:	4013      	ands	r3, r2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d109      	bne.n	8006c9c <capture_bit_0_1_for+0xf0>
 8006c88:	4b20      	ldr	r3, [pc, #128]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	4b1e      	ldr	r3, [pc, #120]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 0201 	bic.w	r2, r2, #1
 8006c9a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_Init(dht_device.port, &GPIO_output);
 8006c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	491b      	ldr	r1, [pc, #108]	@ (8006d10 <capture_bit_0_1_for+0x164>)
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7fb fa5e 	bl	8002164 <HAL_GPIO_Init>
			HAL_GPIO_WritePin(dht_device.port, dht_device.pin, GPIO_PIN_SET);
 8006ca8:	4b18      	ldr	r3, [pc, #96]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a17      	ldr	r2, [pc, #92]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006cae:	8891      	ldrh	r1, [r2, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7fb fc01 	bl	80024ba <HAL_GPIO_WritePin>
			return return_data;	
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	e023      	b.n	8006d04 <capture_bit_0_1_for+0x158>
	while ((dht_device.port->IDR & dht_device.pin) != 0)
 8006cbc:	4b13      	ldr	r3, [pc, #76]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	4a12      	ldr	r2, [pc, #72]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006cc4:	8892      	ldrh	r2, [r2, #4]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1c4      	bne.n	8006c56 <capture_bit_0_1_for+0xaa>
		}	
	}
	__HAL_TIM_DISABLE(dht_device.delay_handle_us);
 8006ccc:	4b0f      	ldr	r3, [pc, #60]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6a1a      	ldr	r2, [r3, #32]
 8006cd4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006cd8:	4013      	ands	r3, r2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d112      	bne.n	8006d04 <capture_bit_0_1_for+0x158>
 8006cde:	4b0b      	ldr	r3, [pc, #44]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6a1a      	ldr	r2, [r3, #32]
 8006ce6:	f240 4344 	movw	r3, #1092	@ 0x444
 8006cea:	4013      	ands	r3, r2
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d109      	bne.n	8006d04 <capture_bit_0_1_for+0x158>
 8006cf0:	4b06      	ldr	r3, [pc, #24]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	4b04      	ldr	r3, [pc, #16]	@ (8006d0c <capture_bit_0_1_for+0x160>)
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0201 	bic.w	r2, r2, #1
 8006d02:	601a      	str	r2, [r3, #0]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	20004c0c 	.word	0x20004c0c
 8006d10:	20000018 	.word	0x20000018

08006d14 <DHT_Init>:

void DHT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TIM_HandleTypeDef* timer_handle_us)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	817b      	strh	r3, [r7, #10]
	dht_device.port 			= GPIOx;
 8006d22:	4a0a      	ldr	r2, [pc, #40]	@ (8006d4c <DHT_Init+0x38>)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6013      	str	r3, [r2, #0]
	dht_device.pin 				= GPIO_Pin;
 8006d28:	4a08      	ldr	r2, [pc, #32]	@ (8006d4c <DHT_Init+0x38>)
 8006d2a:	897b      	ldrh	r3, [r7, #10]
 8006d2c:	8093      	strh	r3, [r2, #4]
	dht_device.delay_handle_us 	= timer_handle_us;
 8006d2e:	4a07      	ldr	r2, [pc, #28]	@ (8006d4c <DHT_Init+0x38>)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6093      	str	r3, [r2, #8]

	GPIO_output.Pin = GPIO_Pin;
 8006d34:	897b      	ldrh	r3, [r7, #10]
 8006d36:	4a06      	ldr	r2, [pc, #24]	@ (8006d50 <DHT_Init+0x3c>)
 8006d38:	6013      	str	r3, [r2, #0]
	GPIO_input.Pin = GPIO_Pin;
 8006d3a:	897b      	ldrh	r3, [r7, #10]
 8006d3c:	4a05      	ldr	r2, [pc, #20]	@ (8006d54 <DHT_Init+0x40>)
 8006d3e:	6013      	str	r3, [r2, #0]
}
 8006d40:	bf00      	nop
 8006d42:	3714      	adds	r7, #20
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bc80      	pop	{r7}
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	20004c0c 	.word	0x20004c0c
 8006d50:	20000018 	.word	0x20000018
 8006d54:	20000028 	.word	0x20000028

08006d58 <dht_get_data>:

uint8_t dht_get_data(uint8_t* data)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
	uint8_t checksum = 0;
 8006d60:	2300      	movs	r3, #0
 8006d62:	73fb      	strb	r3, [r7, #15]
	uint8_t i = 0;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73bb      	strb	r3, [r7, #14]
	int bit_pos = 0;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	60bb      	str	r3, [r7, #8]
	
	//MCU send request to DHT
	HAL_GPIO_Init(dht_device.port, &GPIO_output);
 8006d6c:	4b5b      	ldr	r3, [pc, #364]	@ (8006edc <dht_get_data+0x184>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	495b      	ldr	r1, [pc, #364]	@ (8006ee0 <dht_get_data+0x188>)
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fb f9f6 	bl	8002164 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(dht_device.port, dht_device.pin, GPIO_PIN_RESET);
 8006d78:	4b58      	ldr	r3, [pc, #352]	@ (8006edc <dht_get_data+0x184>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a57      	ldr	r2, [pc, #348]	@ (8006edc <dht_get_data+0x184>)
 8006d7e:	8891      	ldrh	r1, [r2, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fb fb99 	bl	80024ba <HAL_GPIO_WritePin>
	delay_ms(20);
 8006d88:	2014      	movs	r0, #20
 8006d8a:	f7ff fed1 	bl	8006b30 <delay_ms>
	HAL_GPIO_WritePin(dht_device.port, dht_device.pin, GPIO_PIN_SET);
 8006d8e:	4b53      	ldr	r3, [pc, #332]	@ (8006edc <dht_get_data+0x184>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a52      	ldr	r2, [pc, #328]	@ (8006edc <dht_get_data+0x184>)
 8006d94:	8891      	ldrh	r1, [r2, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7fb fb8e 	bl	80024ba <HAL_GPIO_WritePin>
	delay_us(30);
 8006d9e:	201e      	movs	r0, #30
 8006da0:	f7ff fe88 	bl	8006ab4 <delay_us>
	HAL_GPIO_Init(dht_device.port, &GPIO_input);
 8006da4:	4b4d      	ldr	r3, [pc, #308]	@ (8006edc <dht_get_data+0x184>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	494e      	ldr	r1, [pc, #312]	@ (8006ee4 <dht_get_data+0x18c>)
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fb f9da 	bl	8002164 <HAL_GPIO_Init>

	//DHT send respond to MCU
	capture_bit_0_1_for(90, 170, DHT_ERROR_RESPONSE);
 8006db0:	2200      	movs	r2, #0
 8006db2:	21aa      	movs	r1, #170	@ 0xaa
 8006db4:	205a      	movs	r0, #90	@ 0x5a
 8006db6:	f7ff fef9 	bl	8006bac <capture_bit_0_1_for>

	//DHT send 40 bits to MCU
	for (i = 0; i<= 4; i++)
 8006dba:	2300      	movs	r3, #0
 8006dbc:	73bb      	strb	r3, [r7, #14]
 8006dbe:	e03b      	b.n	8006e38 <dht_get_data+0xe0>
	{
		for (bit_pos = 7; bit_pos >= 0; bit_pos--)
 8006dc0:	2307      	movs	r3, #7
 8006dc2:	60bb      	str	r3, [r7, #8]
 8006dc4:	e032      	b.n	8006e2c <dht_get_data+0xd4>
		{
			capture_bit_0_1_for(50, 250, DHT_ERROR_40_BITS);
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	21fa      	movs	r1, #250	@ 0xfa
 8006dca:	2032      	movs	r0, #50	@ 0x32
 8006dcc:	f7ff feee 	bl	8006bac <capture_bit_0_1_for>

			if (dht_device.delay_handle_us->Instance->CNT < 90)
 8006dd0:	4b42      	ldr	r3, [pc, #264]	@ (8006edc <dht_get_data+0x184>)
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd8:	2b59      	cmp	r3, #89	@ 0x59
 8006dda:	d813      	bhi.n	8006e04 <dht_get_data+0xac>
				data[i] &= ~(1 << bit_pos);
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	4413      	add	r3, r2
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	b25a      	sxtb	r2, r3
 8006de6:	2101      	movs	r1, #1
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	fa01 f303 	lsl.w	r3, r1, r3
 8006dee:	b25b      	sxtb	r3, r3
 8006df0:	43db      	mvns	r3, r3
 8006df2:	b25b      	sxtb	r3, r3
 8006df4:	4013      	ands	r3, r2
 8006df6:	b259      	sxtb	r1, r3
 8006df8:	7bbb      	ldrb	r3, [r7, #14]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	b2ca      	uxtb	r2, r1
 8006e00:	701a      	strb	r2, [r3, #0]
 8006e02:	e010      	b.n	8006e26 <dht_get_data+0xce>
			else
				data[i] |= 1 << bit_pos;
 8006e04:	7bbb      	ldrb	r3, [r7, #14]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	4413      	add	r3, r2
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	b25a      	sxtb	r2, r3
 8006e0e:	2101      	movs	r1, #1
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	fa01 f303 	lsl.w	r3, r1, r3
 8006e16:	b25b      	sxtb	r3, r3
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	b259      	sxtb	r1, r3
 8006e1c:	7bbb      	ldrb	r3, [r7, #14]
 8006e1e:	687a      	ldr	r2, [r7, #4]
 8006e20:	4413      	add	r3, r2
 8006e22:	b2ca      	uxtb	r2, r1
 8006e24:	701a      	strb	r2, [r3, #0]
		for (bit_pos = 7; bit_pos >= 0; bit_pos--)
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	60bb      	str	r3, [r7, #8]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	dac9      	bge.n	8006dc6 <dht_get_data+0x6e>
	for (i = 0; i<= 4; i++)
 8006e32:	7bbb      	ldrb	r3, [r7, #14]
 8006e34:	3301      	adds	r3, #1
 8006e36:	73bb      	strb	r3, [r7, #14]
 8006e38:	7bbb      	ldrb	r3, [r7, #14]
 8006e3a:	2b04      	cmp	r3, #4
 8006e3c:	d9c0      	bls.n	8006dc0 <dht_get_data+0x68>
		}
	}

	for (i = 0; i <= 3; i++)
 8006e3e:	2300      	movs	r3, #0
 8006e40:	73bb      	strb	r3, [r7, #14]
 8006e42:	e009      	b.n	8006e58 <dht_get_data+0x100>
	{
		checksum += data[i];
 8006e44:	7bbb      	ldrb	r3, [r7, #14]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	4413      	add	r3, r2
 8006e4a:	781a      	ldrb	r2, [r3, #0]
 8006e4c:	7bfb      	ldrb	r3, [r7, #15]
 8006e4e:	4413      	add	r3, r2
 8006e50:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i <= 3; i++)
 8006e52:	7bbb      	ldrb	r3, [r7, #14]
 8006e54:	3301      	adds	r3, #1
 8006e56:	73bb      	strb	r3, [r7, #14]
 8006e58:	7bbb      	ldrb	r3, [r7, #14]
 8006e5a:	2b03      	cmp	r3, #3
 8006e5c:	d9f2      	bls.n	8006e44 <dht_get_data+0xec>
	}

	if (checksum != data[4])
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3304      	adds	r3, #4
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	7bfa      	ldrb	r2, [r7, #15]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d011      	beq.n	8006e8e <dht_get_data+0x136>
	{
		HAL_GPIO_Init(dht_device.port, &GPIO_output);
 8006e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8006edc <dht_get_data+0x184>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	491c      	ldr	r1, [pc, #112]	@ (8006ee0 <dht_get_data+0x188>)
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fb f977 	bl	8002164 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(dht_device.port, dht_device.pin, GPIO_PIN_SET);
 8006e76:	4b19      	ldr	r3, [pc, #100]	@ (8006edc <dht_get_data+0x184>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a18      	ldr	r2, [pc, #96]	@ (8006edc <dht_get_data+0x184>)
 8006e7c:	8891      	ldrh	r1, [r2, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fb fb1a 	bl	80024ba <HAL_GPIO_WritePin>
		data[4] = DHT_ERROR_CHECKSUM;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	3304      	adds	r3, #4
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	701a      	strb	r2, [r3, #0]
	}

	if(data[3] > 9)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3303      	adds	r3, #3
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	2b09      	cmp	r3, #9
 8006e96:	d90a      	bls.n	8006eae <dht_get_data+0x156>
		data[3] /= 10;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	3303      	adds	r3, #3
 8006e9c:	781a      	ldrb	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	3303      	adds	r3, #3
 8006ea2:	4911      	ldr	r1, [pc, #68]	@ (8006ee8 <dht_get_data+0x190>)
 8006ea4:	fba1 1202 	umull	r1, r2, r1, r2
 8006ea8:	08d2      	lsrs	r2, r2, #3
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	701a      	strb	r2, [r3, #0]
	
	HAL_GPIO_Init(dht_device.port, &GPIO_output);
 8006eae:	4b0b      	ldr	r3, [pc, #44]	@ (8006edc <dht_get_data+0x184>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	490b      	ldr	r1, [pc, #44]	@ (8006ee0 <dht_get_data+0x188>)
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fb f955 	bl	8002164 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(dht_device.port, dht_device.pin, GPIO_PIN_SET);
 8006eba:	4b08      	ldr	r3, [pc, #32]	@ (8006edc <dht_get_data+0x184>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a07      	ldr	r2, [pc, #28]	@ (8006edc <dht_get_data+0x184>)
 8006ec0:	8891      	ldrh	r1, [r2, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f7fb faf8 	bl	80024ba <HAL_GPIO_WritePin>
	data[4] = DHT_OK;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	3304      	adds	r3, #4
 8006ece:	2203      	movs	r2, #3
 8006ed0:	701a      	strb	r2, [r3, #0]
}
 8006ed2:	bf00      	nop
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3710      	adds	r7, #16
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	20004c0c 	.word	0x20004c0c
 8006ee0:	20000018 	.word	0x20000018
 8006ee4:	20000028 	.word	0x20000028
 8006ee8:	cccccccd 	.word	0xcccccccd

08006eec <LM393_Init>:
	GPIO_TypeDef* port;
	uint16_t pin;
}lm393_device;

void LM393_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	807b      	strh	r3, [r7, #2]
    lm393_device.port = GPIOx;
 8006ef8:	4a05      	ldr	r2, [pc, #20]	@ (8006f10 <LM393_Init+0x24>)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6013      	str	r3, [r2, #0]
    lm393_device.pin = GPIO_Pin;
 8006efe:	4a04      	ldr	r2, [pc, #16]	@ (8006f10 <LM393_Init+0x24>)
 8006f00:	887b      	ldrh	r3, [r7, #2]
 8006f02:	8093      	strh	r3, [r2, #4]
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bc80      	pop	{r7}
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	20004c18 	.word	0x20004c18

08006f14 <lm393_get_data>:

uint8_t lm393_get_data(void)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	af00      	add	r7, sp, #0
    // Đọc giá trị từ chân kết nối cảm biến
    if (HAL_GPIO_ReadPin(lm393_device.port, lm393_device.pin) == 0)
 8006f18:	4b07      	ldr	r3, [pc, #28]	@ (8006f38 <lm393_get_data+0x24>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a06      	ldr	r2, [pc, #24]	@ (8006f38 <lm393_get_data+0x24>)
 8006f1e:	8892      	ldrh	r2, [r2, #4]
 8006f20:	4611      	mov	r1, r2
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fb fab2 	bl	800248c <HAL_GPIO_ReadPin>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <lm393_get_data+0x1e>
        return 1;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e000      	b.n	8006f34 <lm393_get_data+0x20>
    else
        return 0;
 8006f32:	2300      	movs	r3, #0
 8006f34:	4618      	mov	r0, r3
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	20004c18 	.word	0x20004c18

08006f3c <PIR_AM312_Init>:
	GPIO_TypeDef* port;
	uint16_t pin;
}pir_am312_device;

void PIR_AM312_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	807b      	strh	r3, [r7, #2]
    pir_am312_device.port = GPIOx;
 8006f48:	4a05      	ldr	r2, [pc, #20]	@ (8006f60 <PIR_AM312_Init+0x24>)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6013      	str	r3, [r2, #0]
    pir_am312_device.pin = GPIO_Pin;
 8006f4e:	4a04      	ldr	r2, [pc, #16]	@ (8006f60 <PIR_AM312_Init+0x24>)
 8006f50:	887b      	ldrh	r3, [r7, #2]
 8006f52:	8093      	strh	r3, [r2, #4]
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bc80      	pop	{r7}
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	20004c20 	.word	0x20004c20

08006f64 <pir_am312_get_data>:

uint8_t pir_am312_get_data(void)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	af00      	add	r7, sp, #0
    // Đọc giá trị từ chân kết nối cảm biến
    return HAL_GPIO_ReadPin(pir_am312_device.port, pir_am312_device.pin);
 8006f68:	4b05      	ldr	r3, [pc, #20]	@ (8006f80 <pir_am312_get_data+0x1c>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a04      	ldr	r2, [pc, #16]	@ (8006f80 <pir_am312_get_data+0x1c>)
 8006f6e:	8892      	ldrh	r2, [r2, #4]
 8006f70:	4611      	mov	r1, r2
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fb fa8a 	bl	800248c <HAL_GPIO_ReadPin>
 8006f78:	4603      	mov	r3, r0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20004c20 	.word	0x20004c20

08006f84 <ILI9341_ConfigPrint>:
static const char * const g_pc_Hex = "0123456789abcdef";

void ILI9341_ConfigPrint(	const uint8_t* _font,
							uint16_t _X, uint16_t _Y,
							uint16_t _print_color, uint16_t _bg_color)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	4608      	mov	r0, r1
 8006f8e:	4611      	mov	r1, r2
 8006f90:	461a      	mov	r2, r3
 8006f92:	4603      	mov	r3, r0
 8006f94:	817b      	strh	r3, [r7, #10]
 8006f96:	460b      	mov	r3, r1
 8006f98:	813b      	strh	r3, [r7, #8]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	80fb      	strh	r3, [r7, #6]
	print_config.font = _font;
 8006f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8006fc8 <ILI9341_ConfigPrint+0x44>)
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6013      	str	r3, [r2, #0]
	print_config.X = _X;
 8006fa4:	4a08      	ldr	r2, [pc, #32]	@ (8006fc8 <ILI9341_ConfigPrint+0x44>)
 8006fa6:	897b      	ldrh	r3, [r7, #10]
 8006fa8:	8093      	strh	r3, [r2, #4]
	print_config.Y = _Y;
 8006faa:	4a07      	ldr	r2, [pc, #28]	@ (8006fc8 <ILI9341_ConfigPrint+0x44>)
 8006fac:	893b      	ldrh	r3, [r7, #8]
 8006fae:	80d3      	strh	r3, [r2, #6]
	print_config.print_color = _print_color;
 8006fb0:	4a05      	ldr	r2, [pc, #20]	@ (8006fc8 <ILI9341_ConfigPrint+0x44>)
 8006fb2:	88fb      	ldrh	r3, [r7, #6]
 8006fb4:	8193      	strh	r3, [r2, #12]
	print_config.bg_color = _bg_color;
 8006fb6:	4a04      	ldr	r2, [pc, #16]	@ (8006fc8 <ILI9341_ConfigPrint+0x44>)
 8006fb8:	8b3b      	ldrh	r3, [r7, #24]
 8006fba:	81d3      	strh	r3, [r2, #14]
}
 8006fbc:	bf00      	nop
 8006fbe:	3714      	adds	r7, #20
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bc80      	pop	{r7}
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	20004c28 	.word	0x20004c28

08006fcc <ILI9341_PrintChar>:

void ILI9341_PrintChar(const char Char)
{
 8006fcc:	b590      	push	{r4, r7, lr}
 8006fce:	b08b      	sub	sp, #44	@ 0x2c
 8006fd0:	af02      	add	r7, sp, #8
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	71fb      	strb	r3, [r7, #7]
    if (Char == '\n')
 8006fd6:	79fb      	ldrb	r3, [r7, #7]
 8006fd8:	2b0a      	cmp	r3, #10
 8006fda:	d106      	bne.n	8006fea <ILI9341_PrintChar+0x1e>
    {
        print_config.Y += 19;
 8006fdc:	4b3e      	ldr	r3, [pc, #248]	@ (80070d8 <ILI9341_PrintChar+0x10c>)
 8006fde:	88db      	ldrh	r3, [r3, #6]
 8006fe0:	3313      	adds	r3, #19
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	4b3c      	ldr	r3, [pc, #240]	@ (80070d8 <ILI9341_PrintChar+0x10c>)
 8006fe6:	80da      	strh	r2, [r3, #6]
        return;
 8006fe8:	e073      	b.n	80070d2 <ILI9341_PrintChar+0x106>
    }

	if ((Char < 31) || (Char > 127))
 8006fea:	79fb      	ldrb	r3, [r7, #7]
 8006fec:	2b1e      	cmp	r3, #30
 8006fee:	d96f      	bls.n	80070d0 <ILI9341_PrintChar+0x104>
 8006ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	db6b      	blt.n	80070d0 <ILI9341_PrintChar+0x104>
        return;

	uint8_t font_offset, font_width, font_height, font_BPL;
	uint8_t *temp_char;

	font_offset = print_config.font[0];
 8006ff8:	4b37      	ldr	r3, [pc, #220]	@ (80070d8 <ILI9341_PrintChar+0x10c>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	75fb      	strb	r3, [r7, #23]
	font_width = print_config.font[1];
 8007000:	4b35      	ldr	r3, [pc, #212]	@ (80070d8 <ILI9341_PrintChar+0x10c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	3301      	adds	r3, #1
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	75bb      	strb	r3, [r7, #22]
	font_height = print_config.font[2];
 800700a:	4b33      	ldr	r3, [pc, #204]	@ (80070d8 <ILI9341_PrintChar+0x10c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3302      	adds	r3, #2
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	757b      	strb	r3, [r7, #21]
	font_BPL = print_config.font[3];
 8007014:	4b30      	ldr	r3, [pc, #192]	@ (80070d8 <ILI9341_PrintChar+0x10c>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	3303      	adds	r3, #3
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	753b      	strb	r3, [r7, #20]
    * 
    * Meta = 4:         Inside the font array consist of 4 bytes for the meta of the
    * fonts such as: font_offset, font_width, font_height, font_BPL, so to get the
    * correct index of the font array, you need to offset by 4.
    */
	temp_char = (uint8_t*)&print_config.font[((Char - 0x20) * font_offset) + 4];
 800701e:	4b2e      	ldr	r3, [pc, #184]	@ (80070d8 <ILI9341_PrintChar+0x10c>)
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	79fb      	ldrb	r3, [r7, #7]
 8007024:	3b20      	subs	r3, #32
 8007026:	7df9      	ldrb	r1, [r7, #23]
 8007028:	fb01 f303 	mul.w	r3, r1, r3
 800702c:	3304      	adds	r3, #4
 800702e:	4413      	add	r3, r2
 8007030:	613b      	str	r3, [r7, #16]

	/* Clear background first */
	ILI9341_DrawRectangle(  print_config.X, print_config.Y, 
 8007032:	4b29      	ldr	r3, [pc, #164]	@ (80070d8 <ILI9341_PrintChar+0x10c>)
 8007034:	8898      	ldrh	r0, [r3, #4]
 8007036:	4b28      	ldr	r3, [pc, #160]	@ (80070d8 <ILI9341_PrintChar+0x10c>)
 8007038:	88d9      	ldrh	r1, [r3, #6]
 800703a:	7dbb      	ldrb	r3, [r7, #22]
 800703c:	b29a      	uxth	r2, r3
 800703e:	7d7b      	ldrb	r3, [r7, #21]
 8007040:	b29c      	uxth	r4, r3
 8007042:	4b25      	ldr	r3, [pc, #148]	@ (80070d8 <ILI9341_PrintChar+0x10c>)
 8007044:	89db      	ldrh	r3, [r3, #14]
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	4623      	mov	r3, r4
 800704a:	f000 fe31 	bl	8007cb0 <ILI9341_DrawRectangle>
                            font_width, font_height, 
                            print_config.bg_color);

	for (int height = 0; height < font_height; height++)
 800704e:	2300      	movs	r3, #0
 8007050:	61fb      	str	r3, [r7, #28]
 8007052:	e038      	b.n	80070c6 <ILI9341_PrintChar+0xfa>
	{
		for (int width=0; width < font_width; width++)
 8007054:	2300      	movs	r3, #0
 8007056:	61bb      	str	r3, [r7, #24]
 8007058:	e02e      	b.n	80070b8 <ILI9341_PrintChar+0xec>
		{
            /* (height & 0xF8) >> 3, increase one by 8-bits */
			uint8_t z =  temp_char[font_BPL * width + ((height & 0xF8) >> 3) + 1];
 800705a:	7d3b      	ldrb	r3, [r7, #20]
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	fb03 f202 	mul.w	r2, r3, r2
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	10db      	asrs	r3, r3, #3
 8007066:	f003 031f 	and.w	r3, r3, #31
 800706a:	4413      	add	r3, r2
 800706c:	3301      	adds	r3, #1
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	4413      	add	r3, r2
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	73fb      	strb	r3, [r7, #15]

			uint8_t b = 1 << (height & 0x07);
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	f003 0307 	and.w	r3, r3, #7
 800707c:	2201      	movs	r2, #1
 800707e:	fa02 f303 	lsl.w	r3, r2, r3
 8007082:	73bb      	strb	r3, [r7, #14]
			if (( z & b ) != 0x00)
 8007084:	7bfa      	ldrb	r2, [r7, #15]
 8007086:	7bbb      	ldrb	r3, [r7, #14]
 8007088:	4013      	ands	r3, r2
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d010      	beq.n	80070b2 <ILI9341_PrintChar+0xe6>
			{
				ILI9341_DrawPixel(  print_config.X + width, 
 8007090:	4b11      	ldr	r3, [pc, #68]	@ (80070d8 <ILI9341_PrintChar+0x10c>)
 8007092:	889a      	ldrh	r2, [r3, #4]
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	b29b      	uxth	r3, r3
 8007098:	4413      	add	r3, r2
 800709a:	b298      	uxth	r0, r3
                                    print_config.Y + height, 
 800709c:	4b0e      	ldr	r3, [pc, #56]	@ (80070d8 <ILI9341_PrintChar+0x10c>)
 800709e:	88da      	ldrh	r2, [r3, #6]
				ILI9341_DrawPixel(  print_config.X + width, 
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	4413      	add	r3, r2
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	4a0b      	ldr	r2, [pc, #44]	@ (80070d8 <ILI9341_PrintChar+0x10c>)
 80070aa:	8992      	ldrh	r2, [r2, #12]
 80070ac:	4619      	mov	r1, r3
 80070ae:	f000 fd99 	bl	8007be4 <ILI9341_DrawPixel>
		for (int width=0; width < font_width; width++)
 80070b2:	69bb      	ldr	r3, [r7, #24]
 80070b4:	3301      	adds	r3, #1
 80070b6:	61bb      	str	r3, [r7, #24]
 80070b8:	7dbb      	ldrb	r3, [r7, #22]
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	429a      	cmp	r2, r3
 80070be:	dbcc      	blt.n	800705a <ILI9341_PrintChar+0x8e>
	for (int height = 0; height < font_height; height++)
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	3301      	adds	r3, #1
 80070c4:	61fb      	str	r3, [r7, #28]
 80070c6:	7d7b      	ldrb	r3, [r7, #21]
 80070c8:	69fa      	ldr	r2, [r7, #28]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	dbc2      	blt.n	8007054 <ILI9341_PrintChar+0x88>
 80070ce:	e000      	b.n	80070d2 <ILI9341_PrintChar+0x106>
        return;
 80070d0:	bf00      	nop
                                    print_config.print_color);
			}
		}
	}
}
 80070d2:	3724      	adds	r7, #36	@ 0x24
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd90      	pop	{r4, r7, pc}
 80070d8:	20004c28 	.word	0x20004c28

080070dc <ILI9341_PrintBuffer>:

void ILI9341_PrintBuffer(const char* pc_string, uint16_t length)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b086      	sub	sp, #24
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	807b      	strh	r3, [r7, #2]
    /* Width of character */
	uint8_t char_width;
    /* Offset of character */
	uint8_t font_offset = print_config.font[0];
 80070e8:	4b22      	ldr	r3, [pc, #136]	@ (8007174 <ILI9341_PrintBuffer+0x98>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	757b      	strb	r3, [r7, #21]
    /* Width of font */
	uint8_t font_width = print_config.font[1];
 80070f0:	4b20      	ldr	r3, [pc, #128]	@ (8007174 <ILI9341_PrintBuffer+0x98>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3301      	adds	r3, #1
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	753b      	strb	r3, [r7, #20]

	uint16_t print_index;

	for(print_index = 0; print_index < length; print_index++)
 80070fa:	2300      	movs	r3, #0
 80070fc:	82fb      	strh	r3, [r7, #22]
 80070fe:	e030      	b.n	8007162 <ILI9341_PrintBuffer+0x86>
	{
		ILI9341_PrintChar(*pc_string);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff ff61 	bl	8006fcc <ILI9341_PrintChar>

		/* Check character width and calculate proper position */
		uint8_t *temp_char = (uint8_t*)&print_config.font[((*pc_string - 0x20) * font_offset) + 4];
 800710a:	4b1a      	ldr	r3, [pc, #104]	@ (8007174 <ILI9341_PrintBuffer+0x98>)
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	3b20      	subs	r3, #32
 8007114:	7d79      	ldrb	r1, [r7, #21]
 8007116:	fb01 f303 	mul.w	r3, r1, r3
 800711a:	3304      	adds	r3, #4
 800711c:	4413      	add	r3, r2
 800711e:	613b      	str	r3, [r7, #16]
		char_width = temp_char[0];
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	73fb      	strb	r3, [r7, #15]

		if(char_width + 2 < font_width)
 8007126:	7bfb      	ldrb	r3, [r7, #15]
 8007128:	1c9a      	adds	r2, r3, #2
 800712a:	7d3b      	ldrb	r3, [r7, #20]
 800712c:	429a      	cmp	r2, r3
 800712e:	da0a      	bge.n	8007146 <ILI9341_PrintBuffer+0x6a>
		{
			/* If character width is smaller than font width */
			print_config.X += (char_width + 2);
 8007130:	4b10      	ldr	r3, [pc, #64]	@ (8007174 <ILI9341_PrintBuffer+0x98>)
 8007132:	889a      	ldrh	r2, [r3, #4]
 8007134:	7bfb      	ldrb	r3, [r7, #15]
 8007136:	b29b      	uxth	r3, r3
 8007138:	4413      	add	r3, r2
 800713a:	b29b      	uxth	r3, r3
 800713c:	3302      	adds	r3, #2
 800713e:	b29a      	uxth	r2, r3
 8007140:	4b0c      	ldr	r3, [pc, #48]	@ (8007174 <ILI9341_PrintBuffer+0x98>)
 8007142:	809a      	strh	r2, [r3, #4]
 8007144:	e007      	b.n	8007156 <ILI9341_PrintBuffer+0x7a>
		}
		else
		{
			print_config.X += font_width;
 8007146:	4b0b      	ldr	r3, [pc, #44]	@ (8007174 <ILI9341_PrintBuffer+0x98>)
 8007148:	889a      	ldrh	r2, [r3, #4]
 800714a:	7d3b      	ldrb	r3, [r7, #20]
 800714c:	b29b      	uxth	r3, r3
 800714e:	4413      	add	r3, r2
 8007150:	b29a      	uxth	r2, r3
 8007152:	4b08      	ldr	r3, [pc, #32]	@ (8007174 <ILI9341_PrintBuffer+0x98>)
 8007154:	809a      	strh	r2, [r3, #4]
		}

		pc_string++;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	3301      	adds	r3, #1
 800715a:	607b      	str	r3, [r7, #4]
	for(print_index = 0; print_index < length; print_index++)
 800715c:	8afb      	ldrh	r3, [r7, #22]
 800715e:	3301      	adds	r3, #1
 8007160:	82fb      	strh	r3, [r7, #22]
 8007162:	8afa      	ldrh	r2, [r7, #22]
 8007164:	887b      	ldrh	r3, [r7, #2]
 8007166:	429a      	cmp	r2, r3
 8007168:	d3ca      	bcc.n	8007100 <ILI9341_PrintBuffer+0x24>
	}
}
 800716a:	bf00      	nop
 800716c:	bf00      	nop
 800716e:	3718      	adds	r7, #24
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	20004c28 	.word	0x20004c28

08007178 <ILI9341_Print>:

uint8_t ILI9341_Print(const char* pc_string, ...)
{
 8007178:	b40f      	push	{r0, r1, r2, r3}
 800717a:	b580      	push	{r7, lr}
 800717c:	b08e      	sub	sp, #56	@ 0x38
 800717e:	af00      	add	r7, sp, #0
	uint32_t ui32_index, ui32_value, ui32_pos, ui32_count, ui32_base, ui32_is_neg;
    char *pc_temp_string, pc_buffer[16], c_fill;

    va_list vaArgP;

    va_start(vaArgP, pc_string);
 8007180:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8007184:	607b      	str	r3, [r7, #4]

	//
    // Loop while there are more characters in the string.
    //
	while (*pc_string)
 8007186:	e1e3      	b.n	8007550 <ILI9341_Print+0x3d8>
	{
		 //
        // Find the first non-% character, or the end of the string.
        //
        for(ui32_index = 0;
 8007188:	2300      	movs	r3, #0
 800718a:	637b      	str	r3, [r7, #52]	@ 0x34
 800718c:	e002      	b.n	8007194 <ILI9341_Print+0x1c>
            (pc_string[ui32_index] != '%') && (pc_string[ui32_index] != '\0');
            ui32_index++)
 800718e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007190:	3301      	adds	r3, #1
 8007192:	637b      	str	r3, [r7, #52]	@ 0x34
            (pc_string[ui32_index] != '%') && (pc_string[ui32_index] != '\0');
 8007194:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007198:	4413      	add	r3, r2
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	2b25      	cmp	r3, #37	@ 0x25
 800719e:	d005      	beq.n	80071ac <ILI9341_Print+0x34>
 80071a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071a4:	4413      	add	r3, r2
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d1f0      	bne.n	800718e <ILI9341_Print+0x16>
        }

		//
        // Write this portion of the string.
        //
        ILI9341_PrintBuffer(pc_string, ui32_index);
 80071ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	4619      	mov	r1, r3
 80071b2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80071b4:	f7ff ff92 	bl	80070dc <ILI9341_PrintBuffer>

		//
        // Skip the portion of the string that was written.
        //
        pc_string += ui32_index;
 80071b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071bc:	4413      	add	r3, r2
 80071be:	643b      	str	r3, [r7, #64]	@ 0x40

        //
        // See if the next character is a %.
        //
        if(*pc_string == '%')
 80071c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	2b25      	cmp	r3, #37	@ 0x25
 80071c6:	f040 81c3 	bne.w	8007550 <ILI9341_Print+0x3d8>
        {
            //
            // Skip the %.
            //
            pc_string++;
 80071ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071cc:	3301      	adds	r3, #1
 80071ce:	643b      	str	r3, [r7, #64]	@ 0x40

            //
            // Set the digit count to zero, and the fill character to space
            // (in other words, to the defaults).
            //
            ui32_count = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            c_fill = ' ';
 80071d4:	2320      	movs	r3, #32
 80071d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			again:

            //
            // Determine how to handle the next character.
            //
            switch(*pc_string++)
 80071da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071dc:	1c5a      	adds	r2, r3, #1
 80071de:	643a      	str	r2, [r7, #64]	@ 0x40
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	3b25      	subs	r3, #37	@ 0x25
 80071e4:	2b53      	cmp	r3, #83	@ 0x53
 80071e6:	f200 81ad 	bhi.w	8007544 <ILI9341_Print+0x3cc>
 80071ea:	a201      	add	r2, pc, #4	@ (adr r2, 80071f0 <ILI9341_Print+0x78>)
 80071ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f0:	08007537 	.word	0x08007537
 80071f4:	08007545 	.word	0x08007545
 80071f8:	08007545 	.word	0x08007545
 80071fc:	08007545 	.word	0x08007545
 8007200:	08007545 	.word	0x08007545
 8007204:	08007545 	.word	0x08007545
 8007208:	08007545 	.word	0x08007545
 800720c:	08007545 	.word	0x08007545
 8007210:	08007545 	.word	0x08007545
 8007214:	08007545 	.word	0x08007545
 8007218:	08007545 	.word	0x08007545
 800721c:	08007341 	.word	0x08007341
 8007220:	08007341 	.word	0x08007341
 8007224:	08007341 	.word	0x08007341
 8007228:	08007341 	.word	0x08007341
 800722c:	08007341 	.word	0x08007341
 8007230:	08007341 	.word	0x08007341
 8007234:	08007341 	.word	0x08007341
 8007238:	08007341 	.word	0x08007341
 800723c:	08007341 	.word	0x08007341
 8007240:	08007341 	.word	0x08007341
 8007244:	08007545 	.word	0x08007545
 8007248:	08007545 	.word	0x08007545
 800724c:	08007545 	.word	0x08007545
 8007250:	08007545 	.word	0x08007545
 8007254:	08007545 	.word	0x08007545
 8007258:	08007545 	.word	0x08007545
 800725c:	08007545 	.word	0x08007545
 8007260:	08007545 	.word	0x08007545
 8007264:	08007545 	.word	0x08007545
 8007268:	08007545 	.word	0x08007545
 800726c:	08007545 	.word	0x08007545
 8007270:	08007545 	.word	0x08007545
 8007274:	08007545 	.word	0x08007545
 8007278:	08007545 	.word	0x08007545
 800727c:	08007545 	.word	0x08007545
 8007280:	08007545 	.word	0x08007545
 8007284:	08007545 	.word	0x08007545
 8007288:	08007545 	.word	0x08007545
 800728c:	08007545 	.word	0x08007545
 8007290:	08007545 	.word	0x08007545
 8007294:	08007545 	.word	0x08007545
 8007298:	08007545 	.word	0x08007545
 800729c:	08007545 	.word	0x08007545
 80072a0:	08007545 	.word	0x08007545
 80072a4:	08007545 	.word	0x08007545
 80072a8:	08007545 	.word	0x08007545
 80072ac:	08007545 	.word	0x08007545
 80072b0:	08007545 	.word	0x08007545
 80072b4:	08007545 	.word	0x08007545
 80072b8:	08007545 	.word	0x08007545
 80072bc:	08007425 	.word	0x08007425
 80072c0:	08007545 	.word	0x08007545
 80072c4:	08007545 	.word	0x08007545
 80072c8:	08007545 	.word	0x08007545
 80072cc:	08007545 	.word	0x08007545
 80072d0:	08007545 	.word	0x08007545
 80072d4:	08007545 	.word	0x08007545
 80072d8:	08007545 	.word	0x08007545
 80072dc:	08007545 	.word	0x08007545
 80072e0:	08007545 	.word	0x08007545
 80072e4:	08007545 	.word	0x08007545
 80072e8:	08007375 	.word	0x08007375
 80072ec:	0800738d 	.word	0x0800738d
 80072f0:	08007545 	.word	0x08007545
 80072f4:	08007545 	.word	0x08007545
 80072f8:	08007545 	.word	0x08007545
 80072fc:	08007545 	.word	0x08007545
 8007300:	0800738d 	.word	0x0800738d
 8007304:	08007545 	.word	0x08007545
 8007308:	08007545 	.word	0x08007545
 800730c:	08007545 	.word	0x08007545
 8007310:	08007545 	.word	0x08007545
 8007314:	08007545 	.word	0x08007545
 8007318:	08007545 	.word	0x08007545
 800731c:	08007425 	.word	0x08007425
 8007320:	08007545 	.word	0x08007545
 8007324:	08007545 	.word	0x08007545
 8007328:	080073b7 	.word	0x080073b7
 800732c:	08007545 	.word	0x08007545
 8007330:	0800740d 	.word	0x0800740d
 8007334:	08007545 	.word	0x08007545
 8007338:	08007545 	.word	0x08007545
 800733c:	08007425 	.word	0x08007425
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pc_string[-1] == '0') && (ui32_count == 0))
 8007340:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007342:	3b01      	subs	r3, #1
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	2b30      	cmp	r3, #48	@ 0x30
 8007348:	d105      	bne.n	8007356 <ILI9341_Print+0x1de>
 800734a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734c:	2b00      	cmp	r3, #0
 800734e:	d102      	bne.n	8007356 <ILI9341_Print+0x1de>
                    {
                        c_fill = '0';
 8007350:	2330      	movs	r3, #48	@ 0x30
 8007352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                    }

                    //
                    // Update the digit count.
                    //
                    ui32_count *= 10;
 8007356:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007358:	4613      	mov	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    ui32_count += pc_string[-1] - '0';
 8007362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007364:	3b01      	subs	r3, #1
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	461a      	mov	r2, r3
 800736a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800736c:	4413      	add	r3, r2
 800736e:	3b30      	subs	r3, #48	@ 0x30
 8007370:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    //
                    // Get the next character.
                    //
                    goto again;
 8007372:	e732      	b.n	80071da <ILI9341_Print+0x62>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32_value = va_arg(vaArgP, uint32_t);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	1d1a      	adds	r2, r3, #4
 8007378:	607a      	str	r2, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	61bb      	str	r3, [r7, #24]

                    //
                    // Print out the character.
                    //
                    ILI9341_PrintBuffer((char *)&ui32_value, 1);
 800737e:	f107 0318 	add.w	r3, r7, #24
 8007382:	2101      	movs	r1, #1
 8007384:	4618      	mov	r0, r3
 8007386:	f7ff fea9 	bl	80070dc <ILI9341_PrintBuffer>

                    //
                    // This command has been handled.
                    //
                    break;
 800738a:	e0e1      	b.n	8007550 <ILI9341_Print+0x3d8>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32_value = va_arg(vaArgP, uint32_t);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	1d1a      	adds	r2, r3, #4
 8007390:	607a      	str	r2, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	61bb      	str	r3, [r7, #24]

                    //
                    // Reset the buffer position.
                    //
                    ui32_pos = 0;
 8007396:	2300      	movs	r3, #0
 8007398:	633b      	str	r3, [r7, #48]	@ 0x30

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((int32_t)ui32_value < 0)
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	2b00      	cmp	r3, #0
 800739e:	da05      	bge.n	80073ac <ILI9341_Print+0x234>
                    {
                        //
                        // Make the value positive.
                        //
                        ui32_value = -(int32_t)ui32_value;
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	425b      	negs	r3, r3
 80073a4:	61bb      	str	r3, [r7, #24]

                        //
                        // Indicate that the value is negative.
                        //
                        ui32_is_neg = 1;
 80073a6:	2301      	movs	r3, #1
 80073a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80073aa:	e001      	b.n	80073b0 <ILI9341_Print+0x238>
                    {
                        //
                        // Indicate that the value is positive so that a minus
                        // sign isn't inserted.
                        //
                        ui32_is_neg = 0;
 80073ac:	2300      	movs	r3, #0
 80073ae:	627b      	str	r3, [r7, #36]	@ 0x24
                    }

                    //
                    // Set the base to 10.
                    //
                    ui32_base = 10;
 80073b0:	230a      	movs	r3, #10
 80073b2:	62bb      	str	r3, [r7, #40]	@ 0x28

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 80073b4:	e041      	b.n	800743a <ILI9341_Print+0x2c2>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pc_temp_string = va_arg(vaArgP, char *);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	1d1a      	adds	r2, r3, #4
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	61fb      	str	r3, [r7, #28]

                    //
                    // Determine the length of the string.
                    //
                    for(ui32_index = 0; pc_temp_string[ui32_index] != '\0'; ui32_index++)
 80073c0:	2300      	movs	r3, #0
 80073c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c4:	e002      	b.n	80073cc <ILI9341_Print+0x254>
 80073c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073c8:	3301      	adds	r3, #1
 80073ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80073cc:	69fa      	ldr	r2, [r7, #28]
 80073ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073d0:	4413      	add	r3, r2
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1f6      	bne.n	80073c6 <ILI9341_Print+0x24e>
                    }

                    //
                    // Write the string.
                    //
                    ILI9341_PrintBuffer(pc_temp_string, ui32_index);
 80073d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073da:	b29b      	uxth	r3, r3
 80073dc:	4619      	mov	r1, r3
 80073de:	69f8      	ldr	r0, [r7, #28]
 80073e0:	f7ff fe7c 	bl	80070dc <ILI9341_PrintBuffer>

                    //
                    // Write any required padding spaces
                    //
                    if(ui32_count > ui32_index)
 80073e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e8:	429a      	cmp	r2, r3
 80073ea:	f240 80b0 	bls.w	800754e <ILI9341_Print+0x3d6>
                    {
                        ui32_count -= ui32_index;
 80073ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        while(ui32_count--)
 80073f6:	e003      	b.n	8007400 <ILI9341_Print+0x288>
                        {
                            ILI9341_PrintBuffer(" ", 1);
 80073f8:	2101      	movs	r1, #1
 80073fa:	485d      	ldr	r0, [pc, #372]	@ (8007570 <ILI9341_Print+0x3f8>)
 80073fc:	f7ff fe6e 	bl	80070dc <ILI9341_PrintBuffer>
                        while(ui32_count--)
 8007400:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007402:	1e5a      	subs	r2, r3, #1
 8007404:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007406:	2b00      	cmp	r3, #0
 8007408:	d1f6      	bne.n	80073f8 <ILI9341_Print+0x280>
                    }

                    //
                    // This command has been handled.
                    //
                    break;
 800740a:	e0a0      	b.n	800754e <ILI9341_Print+0x3d6>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32_value = va_arg(vaArgP, uint32_t);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	1d1a      	adds	r2, r3, #4
 8007410:	607a      	str	r2, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	61bb      	str	r3, [r7, #24]

                    //
                    // Reset the buffer position.
                    //
                    ui32_pos = 0;
 8007416:	2300      	movs	r3, #0
 8007418:	633b      	str	r3, [r7, #48]	@ 0x30

                    //
                    // Set the base to 10.
                    //
                    ui32_base = 10;
 800741a:	230a      	movs	r3, #10
 800741c:	62bb      	str	r3, [r7, #40]	@ 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32_is_neg = 0;
 800741e:	2300      	movs	r3, #0
 8007420:	627b      	str	r3, [r7, #36]	@ 0x24

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 8007422:	e00a      	b.n	800743a <ILI9341_Print+0x2c2>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui32_value = va_arg(vaArgP, uint32_t);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	1d1a      	adds	r2, r3, #4
 8007428:	607a      	str	r2, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	61bb      	str	r3, [r7, #24]

                    //
                    // Reset the buffer position.
                    //
                    ui32_pos = 0;
 800742e:	2300      	movs	r3, #0
 8007430:	633b      	str	r3, [r7, #48]	@ 0x30

                    //
                    // Set the base to 16.
                    //
                    ui32_base = 16;
 8007432:	2310      	movs	r3, #16
 8007434:	62bb      	str	r3, [r7, #40]	@ 0x28

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui32_is_neg = 0;
 8007436:	2300      	movs	r3, #0
 8007438:	627b      	str	r3, [r7, #36]	@ 0x24
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui32_index = 1;
 800743a:	2301      	movs	r3, #1
 800743c:	637b      	str	r3, [r7, #52]	@ 0x34
 800743e:	e007      	b.n	8007450 <ILI9341_Print+0x2d8>
                        (((ui32_index * ui32_base) <= ui32_value) &&
                         (((ui32_index * ui32_base) / ui32_base) == ui32_index));
                        ui32_index *= ui32_base, ui32_count--)
 8007440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007442:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007444:	fb02 f303 	mul.w	r3, r2, r3
 8007448:	637b      	str	r3, [r7, #52]	@ 0x34
 800744a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800744c:	3b01      	subs	r3, #1
 800744e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        (((ui32_index * ui32_base) <= ui32_value) &&
 8007450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007452:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007454:	fb03 f202 	mul.w	r2, r3, r2
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	429a      	cmp	r2, r3
 800745c:	d809      	bhi.n	8007472 <ILI9341_Print+0x2fa>
                         (((ui32_index * ui32_base) / ui32_base) == ui32_index));
 800745e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007460:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007462:	fb03 f202 	mul.w	r2, r3, r2
 8007466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007468:	fbb2 f3f3 	udiv	r3, r2, r3
                        (((ui32_index * ui32_base) <= ui32_value) &&
 800746c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800746e:	429a      	cmp	r2, r3
 8007470:	d0e6      	beq.n	8007440 <ILI9341_Print+0x2c8>

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ui32_is_neg)
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	2b00      	cmp	r3, #0
 8007476:	d002      	beq.n	800747e <ILI9341_Print+0x306>
                    {
                        ui32_count--;
 8007478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800747a:	3b01      	subs	r3, #1
 800747c:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ui32_is_neg && (c_fill == '0'))
 800747e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00d      	beq.n	80074a0 <ILI9341_Print+0x328>
 8007484:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007488:	2b30      	cmp	r3, #48	@ 0x30
 800748a:	d109      	bne.n	80074a0 <ILI9341_Print+0x328>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pc_buffer[ui32_pos++] = '-';
 800748c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	633a      	str	r2, [r7, #48]	@ 0x30
 8007492:	3338      	adds	r3, #56	@ 0x38
 8007494:	443b      	add	r3, r7
 8007496:	222d      	movs	r2, #45	@ 0x2d
 8007498:	f803 2c30 	strb.w	r2, [r3, #-48]

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ui32_is_neg = 0;
 800749c:	2300      	movs	r3, #0
 800749e:	627b      	str	r3, [r7, #36]	@ 0x24

                    //
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui32_count > 1) && (ui32_count < 16))
 80074a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d915      	bls.n	80074d2 <ILI9341_Print+0x35a>
 80074a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a8:	2b0f      	cmp	r3, #15
 80074aa:	d812      	bhi.n	80074d2 <ILI9341_Print+0x35a>
                    {
                        for(ui32_count--; ui32_count; ui32_count--)
 80074ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ae:	3b01      	subs	r3, #1
 80074b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074b2:	e00b      	b.n	80074cc <ILI9341_Print+0x354>
                        {
                            pc_buffer[ui32_pos++] = c_fill;
 80074b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074b6:	1c5a      	adds	r2, r3, #1
 80074b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80074ba:	3338      	adds	r3, #56	@ 0x38
 80074bc:	443b      	add	r3, r7
 80074be:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80074c2:	f803 2c30 	strb.w	r2, [r3, #-48]
                        for(ui32_count--; ui32_count; ui32_count--)
 80074c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c8:	3b01      	subs	r3, #1
 80074ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80074cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1f0      	bne.n	80074b4 <ILI9341_Print+0x33c>

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ui32_is_neg)
 80074d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d022      	beq.n	800751e <ILI9341_Print+0x3a6>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pc_buffer[ui32_pos++] = '-';
 80074d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	633a      	str	r2, [r7, #48]	@ 0x30
 80074de:	3338      	adds	r3, #56	@ 0x38
 80074e0:	443b      	add	r3, r7
 80074e2:	222d      	movs	r2, #45	@ 0x2d
 80074e4:	f803 2c30 	strb.w	r2, [r3, #-48]
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ui32_index; ui32_index /= ui32_base)
 80074e8:	e019      	b.n	800751e <ILI9341_Print+0x3a6>
                    {
                        pc_buffer[ui32_pos++] =
                            g_pc_Hex[(ui32_value / ui32_index) % ui32_base];
 80074ea:	4822      	ldr	r0, [pc, #136]	@ (8007574 <ILI9341_Print+0x3fc>)
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80074fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074fc:	fb01 f202 	mul.w	r2, r1, r2
 8007500:	1a9b      	subs	r3, r3, r2
 8007502:	18c2      	adds	r2, r0, r3
                        pc_buffer[ui32_pos++] =
 8007504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007506:	1c59      	adds	r1, r3, #1
 8007508:	6339      	str	r1, [r7, #48]	@ 0x30
                            g_pc_Hex[(ui32_value / ui32_index) % ui32_base];
 800750a:	7812      	ldrb	r2, [r2, #0]
                        pc_buffer[ui32_pos++] =
 800750c:	3338      	adds	r3, #56	@ 0x38
 800750e:	443b      	add	r3, r7
 8007510:	f803 2c30 	strb.w	r2, [r3, #-48]
                    for(; ui32_index; ui32_index /= ui32_base)
 8007514:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007518:	fbb2 f3f3 	udiv	r3, r2, r3
 800751c:	637b      	str	r3, [r7, #52]	@ 0x34
 800751e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1e2      	bne.n	80074ea <ILI9341_Print+0x372>
                    }

                    //
                    // Write the string.
                    //
                    ILI9341_PrintBuffer(pc_buffer, ui32_pos);
 8007524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007526:	b29a      	uxth	r2, r3
 8007528:	f107 0308 	add.w	r3, r7, #8
 800752c:	4611      	mov	r1, r2
 800752e:	4618      	mov	r0, r3
 8007530:	f7ff fdd4 	bl	80070dc <ILI9341_PrintBuffer>

                    //
                    // This command has been handled.
                    //
                    break;
 8007534:	e00c      	b.n	8007550 <ILI9341_Print+0x3d8>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    ILI9341_PrintBuffer(pc_string - 1, 1);
 8007536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007538:	3b01      	subs	r3, #1
 800753a:	2101      	movs	r1, #1
 800753c:	4618      	mov	r0, r3
 800753e:	f7ff fdcd 	bl	80070dc <ILI9341_PrintBuffer>

                    //
                    // This command has been handled.
                    //
                    break;
 8007542:	e005      	b.n	8007550 <ILI9341_Print+0x3d8>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    ILI9341_PrintBuffer("ERROR", 5);
 8007544:	2105      	movs	r1, #5
 8007546:	480c      	ldr	r0, [pc, #48]	@ (8007578 <ILI9341_Print+0x400>)
 8007548:	f7ff fdc8 	bl	80070dc <ILI9341_PrintBuffer>

                    //
                    // This command has been handled.
                    //
                    break;
 800754c:	e000      	b.n	8007550 <ILI9341_Print+0x3d8>
                    break;
 800754e:	bf00      	nop
	while (*pc_string)
 8007550:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	f47f ae17 	bne.w	8007188 <ILI9341_Print+0x10>
                }
            }
        }
	}

    print_config.X = 0;
 800755a:	4b08      	ldr	r3, [pc, #32]	@ (800757c <ILI9341_Print+0x404>)
 800755c:	2200      	movs	r2, #0
 800755e:	809a      	strh	r2, [r3, #4]
	va_end(vaArgP);
    return 1;
 8007560:	2301      	movs	r3, #1
}
 8007562:	4618      	mov	r0, r3
 8007564:	3738      	adds	r7, #56	@ 0x38
 8007566:	46bd      	mov	sp, r7
 8007568:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800756c:	b004      	add	sp, #16
 800756e:	4770      	bx	lr
 8007570:	080088a0 	.word	0x080088a0
 8007574:	0800888c 	.word	0x0800888c
 8007578:	080088a4 	.word	0x080088a4
 800757c:	20004c28 	.word	0x20004c28

08007580 <HAL_SPI_TxCpltCallback>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;
volatile uint8_t is_finished_sending = 1;

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
	/* Deselect when Tx Complete */
	if(hspi == HSPI_INSTANCE)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a09      	ldr	r2, [pc, #36]	@ (80075b0 <HAL_SPI_TxCpltCallback+0x30>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d10a      	bne.n	80075a6 <HAL_SPI_TxCpltCallback+0x26>
	{
		if (is_finished_sending == 1)
 8007590:	4b08      	ldr	r3, [pc, #32]	@ (80075b4 <HAL_SPI_TxCpltCallback+0x34>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b01      	cmp	r3, #1
 8007598:	d105      	bne.n	80075a6 <HAL_SPI_TxCpltCallback+0x26>
		{
			HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800759a:	2201      	movs	r2, #1
 800759c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80075a0:	4805      	ldr	r0, [pc, #20]	@ (80075b8 <HAL_SPI_TxCpltCallback+0x38>)
 80075a2:	f7fa ff8a 	bl	80024ba <HAL_GPIO_WritePin>
		}
	}
}
 80075a6:	bf00      	nop
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	200000e0 	.word	0x200000e0
 80075b4:	2000003c 	.word	0x2000003c
 80075b8:	40011000 	.word	0x40011000

080075bc <ILI9341_SPI_Tx>:

static void ILI9341_SPI_Tx(uint8_t data)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	4603      	mov	r3, r0
 80075c4:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80075c6:	bf00      	nop
 80075c8:	4b08      	ldr	r3, [pc, #32]	@ (80075ec <ILI9341_SPI_Tx+0x30>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d1f8      	bne.n	80075c8 <ILI9341_SPI_Tx+0xc>
	//HAL_SPI_Transmit_DMA(HSPI_INSTANCE, &data, 1);
	HAL_SPI_Transmit_IT(HSPI_INSTANCE, &data, 1);
 80075d6:	1dfb      	adds	r3, r7, #7
 80075d8:	2201      	movs	r2, #1
 80075da:	4619      	mov	r1, r3
 80075dc:	4803      	ldr	r0, [pc, #12]	@ (80075ec <ILI9341_SPI_Tx+0x30>)
 80075de:	f7fb fc61 	bl	8002ea4 <HAL_SPI_Transmit_IT>
	//HAL_SPI_Transmit(HSPI_INSTANCE, &data, 1, 10);
}
 80075e2:	bf00      	nop
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	200000e0 	.word	0x200000e0

080075f0 <ILI9341_SPI_TxBuffer>:

static void ILI9341_SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_INSTANCE, SPI_FLAG_TXE));
 80075fc:	bf00      	nop
 80075fe:	4b08      	ldr	r3, [pc, #32]	@ (8007620 <ILI9341_SPI_TxBuffer+0x30>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f003 0302 	and.w	r3, r3, #2
 8007608:	2b02      	cmp	r3, #2
 800760a:	d1f8      	bne.n	80075fe <ILI9341_SPI_TxBuffer+0xe>
	//HAL_SPI_Transmit_DMA(HSPI_INSTANCE, buffer, len);
	HAL_SPI_Transmit_IT(HSPI_INSTANCE, buffer, len);
 800760c:	887b      	ldrh	r3, [r7, #2]
 800760e:	461a      	mov	r2, r3
 8007610:	6879      	ldr	r1, [r7, #4]
 8007612:	4803      	ldr	r0, [pc, #12]	@ (8007620 <ILI9341_SPI_TxBuffer+0x30>)
 8007614:	f7fb fc46 	bl	8002ea4 <HAL_SPI_Transmit_IT>
	//HAL_SPI_Transmit(HSPI_INSTANCE, buffer, len, 10);
}
 8007618:	bf00      	nop
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	200000e0 	.word	0x200000e0

08007624 <ILI9341_WriteCommand>:

void ILI9341_WriteCommand(uint8_t cmd)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
 800762a:	4603      	mov	r3, r0
 800762c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	//command
 800762e:	2200      	movs	r2, #0
 8007630:	2140      	movs	r1, #64	@ 0x40
 8007632:	4808      	ldr	r0, [pc, #32]	@ (8007654 <ILI9341_WriteCommand+0x30>)
 8007634:	f7fa ff41 	bl	80024ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 8007638:	2200      	movs	r2, #0
 800763a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800763e:	4805      	ldr	r0, [pc, #20]	@ (8007654 <ILI9341_WriteCommand+0x30>)
 8007640:	f7fa ff3b 	bl	80024ba <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(cmd);
 8007644:	79fb      	ldrb	r3, [r7, #7]
 8007646:	4618      	mov	r0, r3
 8007648:	f7ff ffb8 	bl	80075bc <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 800764c:	bf00      	nop
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	40011000 	.word	0x40011000

08007658 <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	4603      	mov	r3, r0
 8007660:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8007662:	2201      	movs	r2, #1
 8007664:	2140      	movs	r1, #64	@ 0x40
 8007666:	4808      	ldr	r0, [pc, #32]	@ (8007688 <ILI9341_WriteData+0x30>)
 8007668:	f7fa ff27 	bl	80024ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 800766c:	2200      	movs	r2, #0
 800766e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007672:	4805      	ldr	r0, [pc, #20]	@ (8007688 <ILI9341_WriteData+0x30>)
 8007674:	f7fa ff21 	bl	80024ba <HAL_GPIO_WritePin>
	ILI9341_SPI_Tx(data);
 8007678:	79fb      	ldrb	r3, [r7, #7]
 800767a:	4618      	mov	r0, r3
 800767c:	f7ff ff9e 	bl	80075bc <ILI9341_SPI_Tx>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 8007680:	bf00      	nop
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}
 8007688:	40011000 	.word	0x40011000

0800768c <ILI9341_WriteBuffer>:

void ILI9341_WriteBuffer(uint8_t *buffer, uint16_t len)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8007698:	2201      	movs	r2, #1
 800769a:	2140      	movs	r1, #64	@ 0x40
 800769c:	4808      	ldr	r0, [pc, #32]	@ (80076c0 <ILI9341_WriteBuffer+0x34>)
 800769e:	f7fa ff0c 	bl	80024ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//select
 80076a2:	2200      	movs	r2, #0
 80076a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80076a8:	4805      	ldr	r0, [pc, #20]	@ (80076c0 <ILI9341_WriteBuffer+0x34>)
 80076aa:	f7fa ff06 	bl	80024ba <HAL_GPIO_WritePin>
	ILI9341_SPI_TxBuffer(buffer, len);
 80076ae:	887b      	ldrh	r3, [r7, #2]
 80076b0:	4619      	mov	r1, r3
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f7ff ff9c 	bl	80075f0 <ILI9341_SPI_TxBuffer>
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);	//deselect
}
 80076b8:	bf00      	nop
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	40011000 	.word	0x40011000

080076c4 <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80076c4:	b590      	push	{r4, r7, lr}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	4604      	mov	r4, r0
 80076cc:	4608      	mov	r0, r1
 80076ce:	4611      	mov	r1, r2
 80076d0:	461a      	mov	r2, r3
 80076d2:	4623      	mov	r3, r4
 80076d4:	80fb      	strh	r3, [r7, #6]
 80076d6:	4603      	mov	r3, r0
 80076d8:	80bb      	strh	r3, [r7, #4]
 80076da:	460b      	mov	r3, r1
 80076dc:	807b      	strh	r3, [r7, #2]
 80076de:	4613      	mov	r3, r2
 80076e0:	803b      	strh	r3, [r7, #0]
	uint8_t buffer[4];
	buffer[0] = x1 >> 8;
 80076e2:	88fb      	ldrh	r3, [r7, #6]
 80076e4:	0a1b      	lsrs	r3, r3, #8
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	733b      	strb	r3, [r7, #12]
	buffer[1] = x1;
 80076ec:	88fb      	ldrh	r3, [r7, #6]
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	737b      	strb	r3, [r7, #13]
	buffer[2] = x2 >> 8;
 80076f2:	887b      	ldrh	r3, [r7, #2]
 80076f4:	0a1b      	lsrs	r3, r3, #8
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	73bb      	strb	r3, [r7, #14]
	buffer[3] = x2;
 80076fc:	887b      	ldrh	r3, [r7, #2]
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2A);
 8007702:	202a      	movs	r0, #42	@ 0x2a
 8007704:	f7ff ff8e 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 8007708:	f107 030c 	add.w	r3, r7, #12
 800770c:	2104      	movs	r1, #4
 800770e:	4618      	mov	r0, r3
 8007710:	f7ff ffbc 	bl	800768c <ILI9341_WriteBuffer>

	buffer[0] = y1 >> 8;
 8007714:	88bb      	ldrh	r3, [r7, #4]
 8007716:	0a1b      	lsrs	r3, r3, #8
 8007718:	b29b      	uxth	r3, r3
 800771a:	b2db      	uxtb	r3, r3
 800771c:	733b      	strb	r3, [r7, #12]
	buffer[1] = y1;
 800771e:	88bb      	ldrh	r3, [r7, #4]
 8007720:	b2db      	uxtb	r3, r3
 8007722:	737b      	strb	r3, [r7, #13]
	buffer[2] = y2 >> 8;
 8007724:	883b      	ldrh	r3, [r7, #0]
 8007726:	0a1b      	lsrs	r3, r3, #8
 8007728:	b29b      	uxth	r3, r3
 800772a:	b2db      	uxtb	r3, r3
 800772c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = y2;
 800772e:	883b      	ldrh	r3, [r7, #0]
 8007730:	b2db      	uxtb	r3, r3
 8007732:	73fb      	strb	r3, [r7, #15]

	ILI9341_WriteCommand(0x2B);
 8007734:	202b      	movs	r0, #43	@ 0x2b
 8007736:	f7ff ff75 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
 800773a:	f107 030c 	add.w	r3, r7, #12
 800773e:	2104      	movs	r1, #4
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff ffa3 	bl	800768c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);
 8007746:	202c      	movs	r0, #44	@ 0x2c
 8007748:	f7ff ff6c 	bl	8007624 <ILI9341_WriteCommand>
}
 800774c:	bf00      	nop
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	bd90      	pop	{r4, r7, pc}

08007754 <ILI9341_Reset>:

void ILI9341_Reset(void)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);	//Disable
 8007758:	2200      	movs	r2, #0
 800775a:	2180      	movs	r1, #128	@ 0x80
 800775c:	480d      	ldr	r0, [pc, #52]	@ (8007794 <ILI9341_Reset+0x40>)
 800775e:	f7fa feac 	bl	80024ba <HAL_GPIO_WritePin>
	delay_ms(10);
 8007762:	200a      	movs	r0, #10
 8007764:	f7ff f9e4 	bl	8006b30 <delay_ms>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);		//Select
 8007768:	2200      	movs	r2, #0
 800776a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800776e:	4809      	ldr	r0, [pc, #36]	@ (8007794 <ILI9341_Reset+0x40>)
 8007770:	f7fa fea3 	bl	80024ba <HAL_GPIO_WritePin>
	delay_ms(10);
 8007774:	200a      	movs	r0, #10
 8007776:	f7ff f9db 	bl	8006b30 <delay_ms>
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 800777a:	2201      	movs	r2, #1
 800777c:	2180      	movs	r1, #128	@ 0x80
 800777e:	4805      	ldr	r0, [pc, #20]	@ (8007794 <ILI9341_Reset+0x40>)
 8007780:	f7fa fe9b 	bl	80024ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET); 		//Deselect
 8007784:	2201      	movs	r2, #1
 8007786:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800778a:	4802      	ldr	r0, [pc, #8]	@ (8007794 <ILI9341_Reset+0x40>)
 800778c:	f7fa fe95 	bl	80024ba <HAL_GPIO_WritePin>
}
 8007790:	bf00      	nop
 8007792:	bd80      	pop	{r7, pc}
 8007794:	40011000 	.word	0x40011000

08007798 <ILI9341_Enable>:

void ILI9341_Enable(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);		//Enable
 800779c:	2201      	movs	r2, #1
 800779e:	2180      	movs	r1, #128	@ 0x80
 80077a0:	4802      	ldr	r0, [pc, #8]	@ (80077ac <ILI9341_Enable+0x14>)
 80077a2:	f7fa fe8a 	bl	80024ba <HAL_GPIO_WritePin>
}
 80077a6:	bf00      	nop
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	40011000 	.word	0x40011000

080077b0 <ILI9341_Init>:

void ILI9341_Init(void)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	af00      	add	r7, sp, #0
	ILI9341_Enable();
 80077b4:	f7ff fff0 	bl	8007798 <ILI9341_Enable>
	ILI9341_Reset();
 80077b8:	f7ff ffcc 	bl	8007754 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_WriteCommand(0x01);
 80077bc:	2001      	movs	r0, #1
 80077be:	f7ff ff31 	bl	8007624 <ILI9341_WriteCommand>
	delay_ms(10);
 80077c2:	200a      	movs	r0, #10
 80077c4:	f7ff f9b4 	bl	8006b30 <delay_ms>

	//POWER CONTROL A
	ILI9341_WriteCommand(0xCB);
 80077c8:	20cb      	movs	r0, #203	@ 0xcb
 80077ca:	f7ff ff2b 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x39);
 80077ce:	2039      	movs	r0, #57	@ 0x39
 80077d0:	f7ff ff42 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x2C);
 80077d4:	202c      	movs	r0, #44	@ 0x2c
 80077d6:	f7ff ff3f 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 80077da:	2000      	movs	r0, #0
 80077dc:	f7ff ff3c 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x34);
 80077e0:	2034      	movs	r0, #52	@ 0x34
 80077e2:	f7ff ff39 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x02);
 80077e6:	2002      	movs	r0, #2
 80077e8:	f7ff ff36 	bl	8007658 <ILI9341_WriteData>

	//POWER CONTROL B
	ILI9341_WriteCommand(0xCF);
 80077ec:	20cf      	movs	r0, #207	@ 0xcf
 80077ee:	f7ff ff19 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80077f2:	2000      	movs	r0, #0
 80077f4:	f7ff ff30 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 80077f8:	20c1      	movs	r0, #193	@ 0xc1
 80077fa:	f7ff ff2d 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x30);
 80077fe:	2030      	movs	r0, #48	@ 0x30
 8007800:	f7ff ff2a 	bl	8007658 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL A
	ILI9341_WriteCommand(0xE8);
 8007804:	20e8      	movs	r0, #232	@ 0xe8
 8007806:	f7ff ff0d 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x85);
 800780a:	2085      	movs	r0, #133	@ 0x85
 800780c:	f7ff ff24 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8007810:	2000      	movs	r0, #0
 8007812:	f7ff ff21 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x78);
 8007816:	2078      	movs	r0, #120	@ 0x78
 8007818:	f7ff ff1e 	bl	8007658 <ILI9341_WriteData>

	//DRIVER TIMING CONTROL B
	ILI9341_WriteCommand(0xEA);
 800781c:	20ea      	movs	r0, #234	@ 0xea
 800781e:	f7ff ff01 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 8007822:	2000      	movs	r0, #0
 8007824:	f7ff ff18 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8007828:	2000      	movs	r0, #0
 800782a:	f7ff ff15 	bl	8007658 <ILI9341_WriteData>

	//POWER ON SEQUENCE CONTROL
	ILI9341_WriteCommand(0xED);
 800782e:	20ed      	movs	r0, #237	@ 0xed
 8007830:	f7ff fef8 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x64);
 8007834:	2064      	movs	r0, #100	@ 0x64
 8007836:	f7ff ff0f 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 800783a:	2003      	movs	r0, #3
 800783c:	f7ff ff0c 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x12);
 8007840:	2012      	movs	r0, #18
 8007842:	f7ff ff09 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x81);
 8007846:	2081      	movs	r0, #129	@ 0x81
 8007848:	f7ff ff06 	bl	8007658 <ILI9341_WriteData>

	//PUMP RATIO CONTROL
	ILI9341_WriteCommand(0xF7);
 800784c:	20f7      	movs	r0, #247	@ 0xf7
 800784e:	f7ff fee9 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x20);
 8007852:	2020      	movs	r0, #32
 8007854:	f7ff ff00 	bl	8007658 <ILI9341_WriteData>

	//POWER CONTROL,VRH[5:0]
	ILI9341_WriteCommand(0xC0);
 8007858:	20c0      	movs	r0, #192	@ 0xc0
 800785a:	f7ff fee3 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x23);
 800785e:	2023      	movs	r0, #35	@ 0x23
 8007860:	f7ff fefa 	bl	8007658 <ILI9341_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_WriteCommand(0xC1);
 8007864:	20c1      	movs	r0, #193	@ 0xc1
 8007866:	f7ff fedd 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x10);
 800786a:	2010      	movs	r0, #16
 800786c:	f7ff fef4 	bl	8007658 <ILI9341_WriteData>

	//VCM CONTROL
	ILI9341_WriteCommand(0xC5);
 8007870:	20c5      	movs	r0, #197	@ 0xc5
 8007872:	f7ff fed7 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x3E);
 8007876:	203e      	movs	r0, #62	@ 0x3e
 8007878:	f7ff feee 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x28);
 800787c:	2028      	movs	r0, #40	@ 0x28
 800787e:	f7ff feeb 	bl	8007658 <ILI9341_WriteData>

	//VCM CONTROL 2
	ILI9341_WriteCommand(0xC7);
 8007882:	20c7      	movs	r0, #199	@ 0xc7
 8007884:	f7ff fece 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x86);
 8007888:	2086      	movs	r0, #134	@ 0x86
 800788a:	f7ff fee5 	bl	8007658 <ILI9341_WriteData>

	//MEMORY ACCESS CONTROL
	ILI9341_WriteCommand(0x36);
 800788e:	2036      	movs	r0, #54	@ 0x36
 8007890:	f7ff fec8 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x48);
 8007894:	2048      	movs	r0, #72	@ 0x48
 8007896:	f7ff fedf 	bl	8007658 <ILI9341_WriteData>

	//PIXEL FORMAT
	ILI9341_WriteCommand(0x3A);
 800789a:	203a      	movs	r0, #58	@ 0x3a
 800789c:	f7ff fec2 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x55);
 80078a0:	2055      	movs	r0, #85	@ 0x55
 80078a2:	f7ff fed9 	bl	8007658 <ILI9341_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_WriteCommand(0xB1);
 80078a6:	20b1      	movs	r0, #177	@ 0xb1
 80078a8:	f7ff febc 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80078ac:	2000      	movs	r0, #0
 80078ae:	f7ff fed3 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x18);
 80078b2:	2018      	movs	r0, #24
 80078b4:	f7ff fed0 	bl	8007658 <ILI9341_WriteData>

	//DISPLAY FUNCTION CONTROL
	ILI9341_WriteCommand(0xB6);
 80078b8:	20b6      	movs	r0, #182	@ 0xb6
 80078ba:	f7ff feb3 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x08);
 80078be:	2008      	movs	r0, #8
 80078c0:	f7ff feca 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x82);
 80078c4:	2082      	movs	r0, #130	@ 0x82
 80078c6:	f7ff fec7 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x27);
 80078ca:	2027      	movs	r0, #39	@ 0x27
 80078cc:	f7ff fec4 	bl	8007658 <ILI9341_WriteData>

	//3GAMMA FUNCTION DISABLE
	ILI9341_WriteCommand(0xF2);
 80078d0:	20f2      	movs	r0, #242	@ 0xf2
 80078d2:	f7ff fea7 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 80078d6:	2000      	movs	r0, #0
 80078d8:	f7ff febe 	bl	8007658 <ILI9341_WriteData>

	//GAMMA CURVE SELECTED
	ILI9341_WriteCommand(0x26);
 80078dc:	2026      	movs	r0, #38	@ 0x26
 80078de:	f7ff fea1 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x01);
 80078e2:	2001      	movs	r0, #1
 80078e4:	f7ff feb8 	bl	8007658 <ILI9341_WriteData>

	//POSITIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE0);
 80078e8:	20e0      	movs	r0, #224	@ 0xe0
 80078ea:	f7ff fe9b 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x0F);
 80078ee:	200f      	movs	r0, #15
 80078f0:	f7ff feb2 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 80078f4:	2031      	movs	r0, #49	@ 0x31
 80078f6:	f7ff feaf 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x2B);
 80078fa:	202b      	movs	r0, #43	@ 0x2b
 80078fc:	f7ff feac 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8007900:	200c      	movs	r0, #12
 8007902:	f7ff fea9 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8007906:	200e      	movs	r0, #14
 8007908:	f7ff fea6 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 800790c:	2008      	movs	r0, #8
 800790e:	f7ff fea3 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x4E);
 8007912:	204e      	movs	r0, #78	@ 0x4e
 8007914:	f7ff fea0 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0xF1);
 8007918:	20f1      	movs	r0, #241	@ 0xf1
 800791a:	f7ff fe9d 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x37);
 800791e:	2037      	movs	r0, #55	@ 0x37
 8007920:	f7ff fe9a 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 8007924:	2007      	movs	r0, #7
 8007926:	f7ff fe97 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x10);
 800792a:	2010      	movs	r0, #16
 800792c:	f7ff fe94 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8007930:	2003      	movs	r0, #3
 8007932:	f7ff fe91 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8007936:	200e      	movs	r0, #14
 8007938:	f7ff fe8e 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x09);
 800793c:	2009      	movs	r0, #9
 800793e:	f7ff fe8b 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x00);
 8007942:	2000      	movs	r0, #0
 8007944:	f7ff fe88 	bl	8007658 <ILI9341_WriteData>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_WriteCommand(0xE1);
 8007948:	20e1      	movs	r0, #225	@ 0xe1
 800794a:	f7ff fe6b 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteData(0x00);
 800794e:	2000      	movs	r0, #0
 8007950:	f7ff fe82 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x0E);
 8007954:	200e      	movs	r0, #14
 8007956:	f7ff fe7f 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x14);
 800795a:	2014      	movs	r0, #20
 800795c:	f7ff fe7c 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x03);
 8007960:	2003      	movs	r0, #3
 8007962:	f7ff fe79 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x11);
 8007966:	2011      	movs	r0, #17
 8007968:	f7ff fe76 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x07);
 800796c:	2007      	movs	r0, #7
 800796e:	f7ff fe73 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8007972:	2031      	movs	r0, #49	@ 0x31
 8007974:	f7ff fe70 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0xC1);
 8007978:	20c1      	movs	r0, #193	@ 0xc1
 800797a:	f7ff fe6d 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x48);
 800797e:	2048      	movs	r0, #72	@ 0x48
 8007980:	f7ff fe6a 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x08);
 8007984:	2008      	movs	r0, #8
 8007986:	f7ff fe67 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 800798a:	200f      	movs	r0, #15
 800798c:	f7ff fe64 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x0C);
 8007990:	200c      	movs	r0, #12
 8007992:	f7ff fe61 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x31);
 8007996:	2031      	movs	r0, #49	@ 0x31
 8007998:	f7ff fe5e 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x36);
 800799c:	2036      	movs	r0, #54	@ 0x36
 800799e:	f7ff fe5b 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(0x0F);
 80079a2:	200f      	movs	r0, #15
 80079a4:	f7ff fe58 	bl	8007658 <ILI9341_WriteData>

	//EXIT SLEEP
	ILI9341_WriteCommand(0x11);
 80079a8:	2011      	movs	r0, #17
 80079aa:	f7ff fe3b 	bl	8007624 <ILI9341_WriteCommand>
	delay_ms(100);
 80079ae:	2064      	movs	r0, #100	@ 0x64
 80079b0:	f7ff f8be 	bl	8006b30 <delay_ms>

	//TURN ON DISPLAY
	ILI9341_WriteCommand(0x29);
 80079b4:	2029      	movs	r0, #41	@ 0x29
 80079b6:	f7ff fe35 	bl	8007624 <ILI9341_WriteCommand>

	//STARTING ROTATION
	ILI9341_SetRotation(SCREEN_VERTICAL_1);
 80079ba:	2000      	movs	r0, #0
 80079bc:	f000 f802 	bl	80079c4 <ILI9341_SetRotation>
}
 80079c0:	bf00      	nop
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <ILI9341_SetRotation>:

void ILI9341_SetRotation(uint8_t rotation)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	4603      	mov	r3, r0
 80079cc:	71fb      	strb	r3, [r7, #7]
	ILI9341_WriteCommand(0x36);
 80079ce:	2036      	movs	r0, #54	@ 0x36
 80079d0:	f7ff fe28 	bl	8007624 <ILI9341_WriteCommand>
	delay_ms(1);
 80079d4:	2001      	movs	r0, #1
 80079d6:	f7ff f8ab 	bl	8006b30 <delay_ms>

	switch(rotation)
 80079da:	79fb      	ldrb	r3, [r7, #7]
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d837      	bhi.n	8007a50 <ILI9341_SetRotation+0x8c>
 80079e0:	a201      	add	r2, pc, #4	@ (adr r2, 80079e8 <ILI9341_SetRotation+0x24>)
 80079e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e6:	bf00      	nop
 80079e8:	080079f9 	.word	0x080079f9
 80079ec:	08007a0f 	.word	0x08007a0f
 80079f0:	08007a25 	.word	0x08007a25
 80079f4:	08007a3b 	.word	0x08007a3b
	{
	case SCREEN_VERTICAL_1:
		ILI9341_WriteData(0x40|0x08);
 80079f8:	2048      	movs	r0, #72	@ 0x48
 80079fa:	f7ff fe2d 	bl	8007658 <ILI9341_WriteData>
		LCD_WIDTH = 240;
 80079fe:	4b17      	ldr	r3, [pc, #92]	@ (8007a5c <ILI9341_SetRotation+0x98>)
 8007a00:	22f0      	movs	r2, #240	@ 0xf0
 8007a02:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8007a04:	4b16      	ldr	r3, [pc, #88]	@ (8007a60 <ILI9341_SetRotation+0x9c>)
 8007a06:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8007a0a:	801a      	strh	r2, [r3, #0]
		break;
 8007a0c:	e021      	b.n	8007a52 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_1:
		ILI9341_WriteData(0x20|0x08);
 8007a0e:	2028      	movs	r0, #40	@ 0x28
 8007a10:	f7ff fe22 	bl	8007658 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8007a14:	4b11      	ldr	r3, [pc, #68]	@ (8007a5c <ILI9341_SetRotation+0x98>)
 8007a16:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8007a1a:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8007a1c:	4b10      	ldr	r3, [pc, #64]	@ (8007a60 <ILI9341_SetRotation+0x9c>)
 8007a1e:	22f0      	movs	r2, #240	@ 0xf0
 8007a20:	801a      	strh	r2, [r3, #0]
		break;
 8007a22:	e016      	b.n	8007a52 <ILI9341_SetRotation+0x8e>
	case SCREEN_VERTICAL_2:
		ILI9341_WriteData(0x80|0x08);
 8007a24:	2088      	movs	r0, #136	@ 0x88
 8007a26:	f7ff fe17 	bl	8007658 <ILI9341_WriteData>
		LCD_WIDTH  = 240;
 8007a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8007a5c <ILI9341_SetRotation+0x98>)
 8007a2c:	22f0      	movs	r2, #240	@ 0xf0
 8007a2e:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 320;
 8007a30:	4b0b      	ldr	r3, [pc, #44]	@ (8007a60 <ILI9341_SetRotation+0x9c>)
 8007a32:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8007a36:	801a      	strh	r2, [r3, #0]
		break;
 8007a38:	e00b      	b.n	8007a52 <ILI9341_SetRotation+0x8e>
	case SCREEN_HORIZONTAL_2:
		ILI9341_WriteData(0x40|0x80|0x20|0x08);
 8007a3a:	20e8      	movs	r0, #232	@ 0xe8
 8007a3c:	f7ff fe0c 	bl	8007658 <ILI9341_WriteData>
		LCD_WIDTH  = 320;
 8007a40:	4b06      	ldr	r3, [pc, #24]	@ (8007a5c <ILI9341_SetRotation+0x98>)
 8007a42:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8007a46:	801a      	strh	r2, [r3, #0]
		LCD_HEIGHT = 240;
 8007a48:	4b05      	ldr	r3, [pc, #20]	@ (8007a60 <ILI9341_SetRotation+0x9c>)
 8007a4a:	22f0      	movs	r2, #240	@ 0xf0
 8007a4c:	801a      	strh	r2, [r3, #0]
		break;
 8007a4e:	e000      	b.n	8007a52 <ILI9341_SetRotation+0x8e>
	default:
		break;
 8007a50:	bf00      	nop
	}
}
 8007a52:	bf00      	nop
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	2000003a 	.word	0x2000003a
 8007a60:	20000038 	.word	0x20000038

08007a64 <ILI9341_DrawColorBurst>:
	uint8_t buffer[2] = {color>>8, color};
	ILI9341_WriteBuffer(buffer, sizeof(buffer));
}

void ILI9341_DrawColorBurst(uint16_t color, uint32_t size)
{
 8007a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a68:	b08d      	sub	sp, #52	@ 0x34
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	6039      	str	r1, [r7, #0]
 8007a70:	80fb      	strh	r3, [r7, #6]
 8007a72:	466b      	mov	r3, sp
 8007a74:	461e      	mov	r6, r3
	uint32_t BufferSize = 0;
 8007a76:	2300      	movs	r3, #0
 8007a78:	62fb      	str	r3, [r7, #44]	@ 0x2c

	if((size*2) < BURST_MAX_SIZE)
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	005b      	lsls	r3, r3, #1
 8007a7e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007a82:	d202      	bcs.n	8007a8a <ILI9341_DrawColorBurst+0x26>
	{
		BufferSize = size;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a88:	e002      	b.n	8007a90 <ILI9341_DrawColorBurst+0x2c>
	}
	else
	{
		BufferSize = BURST_MAX_SIZE;
 8007a8a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8007a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8007a90:	2201      	movs	r2, #1
 8007a92:	2140      	movs	r1, #64	@ 0x40
 8007a94:	483e      	ldr	r0, [pc, #248]	@ (8007b90 <ILI9341_DrawColorBurst+0x12c>)
 8007a96:	f7fa fd10 	bl	80024ba <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007aa0:	483b      	ldr	r0, [pc, #236]	@ (8007b90 <ILI9341_DrawColorBurst+0x12c>)
 8007aa2:	f7fa fd0a 	bl	80024ba <HAL_GPIO_WritePin>

	uint8_t chifted = color>>8;
 8007aa6:	88fb      	ldrh	r3, [r7, #6]
 8007aa8:	0a1b      	lsrs	r3, r3, #8
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint8_t BurstBuffer[BufferSize];
 8007ab0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	61fb      	str	r3, [r7, #28]
 8007ab8:	2300      	movs	r3, #0
 8007aba:	4688      	mov	r8, r1
 8007abc:	4699      	mov	r9, r3
 8007abe:	f04f 0200 	mov.w	r2, #0
 8007ac2:	f04f 0300 	mov.w	r3, #0
 8007ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	461d      	mov	r5, r3
 8007ad8:	f04f 0200 	mov.w	r2, #0
 8007adc:	f04f 0300 	mov.w	r3, #0
 8007ae0:	00eb      	lsls	r3, r5, #3
 8007ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ae6:	00e2      	lsls	r2, r4, #3
 8007ae8:	1dcb      	adds	r3, r1, #7
 8007aea:	08db      	lsrs	r3, r3, #3
 8007aec:	00db      	lsls	r3, r3, #3
 8007aee:	ebad 0d03 	sub.w	sp, sp, r3
 8007af2:	466b      	mov	r3, sp
 8007af4:	3300      	adds	r3, #0
 8007af6:	61bb      	str	r3, [r7, #24]

	for(uint32_t j = 0; j < BufferSize; j+=2)
 8007af8:	2300      	movs	r3, #0
 8007afa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007afc:	e00e      	b.n	8007b1c <ILI9341_DrawColorBurst+0xb8>
	{
		BurstBuffer[j] = chifted;
 8007afe:	69ba      	ldr	r2, [r7, #24]
 8007b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b02:	4413      	add	r3, r2
 8007b04:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8007b08:	701a      	strb	r2, [r3, #0]
		BurstBuffer[j+1] = color;
 8007b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	88fa      	ldrh	r2, [r7, #6]
 8007b10:	b2d1      	uxtb	r1, r2
 8007b12:	69ba      	ldr	r2, [r7, #24]
 8007b14:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < BufferSize; j+=2)
 8007b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b18:	3302      	adds	r3, #2
 8007b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d3ec      	bcc.n	8007afe <ILI9341_DrawColorBurst+0x9a>
	}

	uint32_t SendingSize = size * 2;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	005b      	lsls	r3, r3, #1
 8007b28:	617b      	str	r3, [r7, #20]
	uint32_t SendingInBlock = SendingSize / BufferSize;
 8007b2a:	697a      	ldr	r2, [r7, #20]
 8007b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b32:	613b      	str	r3, [r7, #16]
	uint32_t RemainderFromBlock = SendingSize % BufferSize;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b38:	fbb3 f2f2 	udiv	r2, r3, r2
 8007b3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b3e:	fb01 f202 	mul.w	r2, r1, r2
 8007b42:	1a9b      	subs	r3, r3, r2
 8007b44:	60fb      	str	r3, [r7, #12]

	is_finished_sending = 0;
 8007b46:	4b13      	ldr	r3, [pc, #76]	@ (8007b94 <ILI9341_DrawColorBurst+0x130>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	701a      	strb	r2, [r3, #0]
	if(SendingInBlock != 0)
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00f      	beq.n	8007b72 <ILI9341_DrawColorBurst+0x10e>
	{
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8007b52:	2300      	movs	r3, #0
 8007b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b56:	e008      	b.n	8007b6a <ILI9341_DrawColorBurst+0x106>
		{
			//HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, BufferSize, 10);
			ILI9341_SPI_TxBuffer(BurstBuffer, BufferSize);
 8007b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	69b8      	ldr	r0, [r7, #24]
 8007b60:	f7ff fd46 	bl	80075f0 <ILI9341_SPI_TxBuffer>
		for(uint32_t j = 0; j < (SendingInBlock); j++)
 8007b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b66:	3301      	adds	r3, #1
 8007b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d3f2      	bcc.n	8007b58 <ILI9341_DrawColorBurst+0xf4>
		}
	}

	is_finished_sending = 1;
 8007b72:	4b08      	ldr	r3, [pc, #32]	@ (8007b94 <ILI9341_DrawColorBurst+0x130>)
 8007b74:	2201      	movs	r2, #1
 8007b76:	701a      	strb	r2, [r3, #0]
	//HAL_SPI_Transmit(HSPI_INSTANCE, BurstBuffer, RemainderFromBlock, 10);
	//HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	ILI9341_SPI_TxBuffer(BurstBuffer, RemainderFromBlock);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	69b8      	ldr	r0, [r7, #24]
 8007b80:	f7ff fd36 	bl	80075f0 <ILI9341_SPI_TxBuffer>
 8007b84:	46b5      	mov	sp, r6
}
 8007b86:	bf00      	nop
 8007b88:	3734      	adds	r7, #52	@ 0x34
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b90:	40011000 	.word	0x40011000
 8007b94:	2000003c 	.word	0x2000003c

08007b98 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetAddress(0, 0, LCD_WIDTH, LCD_HEIGHT);
 8007ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8007bdc <ILI9341_FillScreen+0x44>)
 8007ba4:	881b      	ldrh	r3, [r3, #0]
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8007be0 <ILI9341_FillScreen+0x48>)
 8007baa:	881b      	ldrh	r3, [r3, #0]
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	2100      	movs	r1, #0
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	f7ff fd87 	bl	80076c4 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, LCD_WIDTH*LCD_HEIGHT);
 8007bb6:	4b09      	ldr	r3, [pc, #36]	@ (8007bdc <ILI9341_FillScreen+0x44>)
 8007bb8:	881b      	ldrh	r3, [r3, #0]
 8007bba:	b29b      	uxth	r3, r3
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	4b08      	ldr	r3, [pc, #32]	@ (8007be0 <ILI9341_FillScreen+0x48>)
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	fb02 f303 	mul.w	r3, r2, r3
 8007bc8:	461a      	mov	r2, r3
 8007bca:	88fb      	ldrh	r3, [r7, #6]
 8007bcc:	4611      	mov	r1, r2
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7ff ff48 	bl	8007a64 <ILI9341_DrawColorBurst>
}
 8007bd4:	bf00      	nop
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	2000003a 	.word	0x2000003a
 8007be0:	20000038 	.word	0x20000038

08007be4 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x,uint16_t y,uint16_t color)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b086      	sub	sp, #24
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	4603      	mov	r3, r0
 8007bec:	80fb      	strh	r3, [r7, #6]
 8007bee:	460b      	mov	r3, r1
 8007bf0:	80bb      	strh	r3, [r7, #4]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	807b      	strh	r3, [r7, #2]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8007bf6:	4b2c      	ldr	r3, [pc, #176]	@ (8007ca8 <ILI9341_DrawPixel+0xc4>)
 8007bf8:	881b      	ldrh	r3, [r3, #0]
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	88fa      	ldrh	r2, [r7, #6]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d24d      	bcs.n	8007c9e <ILI9341_DrawPixel+0xba>
 8007c02:	4b2a      	ldr	r3, [pc, #168]	@ (8007cac <ILI9341_DrawPixel+0xc8>)
 8007c04:	881b      	ldrh	r3, [r3, #0]
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	88ba      	ldrh	r2, [r7, #4]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d247      	bcs.n	8007c9e <ILI9341_DrawPixel+0xba>

	uint8_t bufferX[4] = {x>>8, x, (x+1)>>8, (x+1)};
 8007c0e:	88fb      	ldrh	r3, [r7, #6]
 8007c10:	0a1b      	lsrs	r3, r3, #8
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	753b      	strb	r3, [r7, #20]
 8007c18:	88fb      	ldrh	r3, [r7, #6]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	757b      	strb	r3, [r7, #21]
 8007c1e:	88fb      	ldrh	r3, [r7, #6]
 8007c20:	3301      	adds	r3, #1
 8007c22:	121b      	asrs	r3, r3, #8
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	75bb      	strb	r3, [r7, #22]
 8007c28:	88fb      	ldrh	r3, [r7, #6]
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	75fb      	strb	r3, [r7, #23]
	uint8_t bufferY[4] = {y>>8, y, (y+1)>>8, (y+1)};
 8007c32:	88bb      	ldrh	r3, [r7, #4]
 8007c34:	0a1b      	lsrs	r3, r3, #8
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	743b      	strb	r3, [r7, #16]
 8007c3c:	88bb      	ldrh	r3, [r7, #4]
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	747b      	strb	r3, [r7, #17]
 8007c42:	88bb      	ldrh	r3, [r7, #4]
 8007c44:	3301      	adds	r3, #1
 8007c46:	121b      	asrs	r3, r3, #8
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	74bb      	strb	r3, [r7, #18]
 8007c4c:	88bb      	ldrh	r3, [r7, #4]
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	3301      	adds	r3, #1
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	74fb      	strb	r3, [r7, #19]
	uint8_t bufferC[2] = {color>>8, color};
 8007c56:	887b      	ldrh	r3, [r7, #2]
 8007c58:	0a1b      	lsrs	r3, r3, #8
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	733b      	strb	r3, [r7, #12]
 8007c60:	887b      	ldrh	r3, [r7, #2]
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	737b      	strb	r3, [r7, #13]

	ILI9341_WriteCommand(0x2A);						//ADDRESS
 8007c66:	202a      	movs	r0, #42	@ 0x2a
 8007c68:	f7ff fcdc 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferX, sizeof(bufferX));	//XDATA
 8007c6c:	f107 0314 	add.w	r3, r7, #20
 8007c70:	2104      	movs	r1, #4
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7ff fd0a 	bl	800768c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2B);						//ADDRESS
 8007c78:	202b      	movs	r0, #43	@ 0x2b
 8007c7a:	f7ff fcd3 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferY, sizeof(bufferY));	//YDATA
 8007c7e:	f107 0310 	add.w	r3, r7, #16
 8007c82:	2104      	movs	r1, #4
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7ff fd01 	bl	800768c <ILI9341_WriteBuffer>

	ILI9341_WriteCommand(0x2C);						//ADDRESS
 8007c8a:	202c      	movs	r0, #44	@ 0x2c
 8007c8c:	f7ff fcca 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteBuffer(bufferC, sizeof(bufferC));	//COLOR
 8007c90:	f107 030c 	add.w	r3, r7, #12
 8007c94:	2102      	movs	r1, #2
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7ff fcf8 	bl	800768c <ILI9341_WriteBuffer>
 8007c9c:	e000      	b.n	8007ca0 <ILI9341_DrawPixel+0xbc>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8007c9e:	bf00      	nop
}
 8007ca0:	3718      	adds	r7, #24
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	2000003a 	.word	0x2000003a
 8007cac:	20000038 	.word	0x20000038

08007cb0 <ILI9341_DrawRectangle>:

void ILI9341_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 8007cb0:	b590      	push	{r4, r7, lr}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	4604      	mov	r4, r0
 8007cb8:	4608      	mov	r0, r1
 8007cba:	4611      	mov	r1, r2
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	4623      	mov	r3, r4
 8007cc0:	80fb      	strh	r3, [r7, #6]
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	80bb      	strh	r3, [r7, #4]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	807b      	strh	r3, [r7, #2]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	803b      	strh	r3, [r7, #0]
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8007cce:	4b24      	ldr	r3, [pc, #144]	@ (8007d60 <ILI9341_DrawRectangle+0xb0>)
 8007cd0:	881b      	ldrh	r3, [r3, #0]
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	88fa      	ldrh	r2, [r7, #6]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d23d      	bcs.n	8007d56 <ILI9341_DrawRectangle+0xa6>
 8007cda:	4b22      	ldr	r3, [pc, #136]	@ (8007d64 <ILI9341_DrawRectangle+0xb4>)
 8007cdc:	881b      	ldrh	r3, [r3, #0]
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	88ba      	ldrh	r2, [r7, #4]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d237      	bcs.n	8007d56 <ILI9341_DrawRectangle+0xa6>

	if((x+width-1)>=LCD_WIDTH)
 8007ce6:	88fa      	ldrh	r2, [r7, #6]
 8007ce8:	887b      	ldrh	r3, [r7, #2]
 8007cea:	4413      	add	r3, r2
 8007cec:	4a1c      	ldr	r2, [pc, #112]	@ (8007d60 <ILI9341_DrawRectangle+0xb0>)
 8007cee:	8812      	ldrh	r2, [r2, #0]
 8007cf0:	b292      	uxth	r2, r2
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	dd05      	ble.n	8007d02 <ILI9341_DrawRectangle+0x52>
	{
		width=LCD_WIDTH-x;
 8007cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8007d60 <ILI9341_DrawRectangle+0xb0>)
 8007cf8:	881b      	ldrh	r3, [r3, #0]
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	88fb      	ldrh	r3, [r7, #6]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	807b      	strh	r3, [r7, #2]
	}

	if((y+height-1)>=LCD_HEIGHT)
 8007d02:	88ba      	ldrh	r2, [r7, #4]
 8007d04:	883b      	ldrh	r3, [r7, #0]
 8007d06:	4413      	add	r3, r2
 8007d08:	4a16      	ldr	r2, [pc, #88]	@ (8007d64 <ILI9341_DrawRectangle+0xb4>)
 8007d0a:	8812      	ldrh	r2, [r2, #0]
 8007d0c:	b292      	uxth	r2, r2
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	dd05      	ble.n	8007d1e <ILI9341_DrawRectangle+0x6e>
	{
		height=LCD_HEIGHT-y;
 8007d12:	4b14      	ldr	r3, [pc, #80]	@ (8007d64 <ILI9341_DrawRectangle+0xb4>)
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	88bb      	ldrh	r3, [r7, #4]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	803b      	strh	r3, [r7, #0]
	}

	ILI9341_SetAddress(x, y, x+width-1, y+height-1);
 8007d1e:	88fa      	ldrh	r2, [r7, #6]
 8007d20:	887b      	ldrh	r3, [r7, #2]
 8007d22:	4413      	add	r3, r2
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	3b01      	subs	r3, #1
 8007d28:	b29c      	uxth	r4, r3
 8007d2a:	88ba      	ldrh	r2, [r7, #4]
 8007d2c:	883b      	ldrh	r3, [r7, #0]
 8007d2e:	4413      	add	r3, r2
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	3b01      	subs	r3, #1
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	88b9      	ldrh	r1, [r7, #4]
 8007d38:	88f8      	ldrh	r0, [r7, #6]
 8007d3a:	4622      	mov	r2, r4
 8007d3c:	f7ff fcc2 	bl	80076c4 <ILI9341_SetAddress>
	ILI9341_DrawColorBurst(color, height*width);
 8007d40:	883b      	ldrh	r3, [r7, #0]
 8007d42:	887a      	ldrh	r2, [r7, #2]
 8007d44:	fb02 f303 	mul.w	r3, r2, r3
 8007d48:	461a      	mov	r2, r3
 8007d4a:	8b3b      	ldrh	r3, [r7, #24]
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7ff fe88 	bl	8007a64 <ILI9341_DrawColorBurst>
 8007d54:	e000      	b.n	8007d58 <ILI9341_DrawRectangle+0xa8>
	if((x >=LCD_WIDTH) || (y >=LCD_HEIGHT)) return;
 8007d56:	bf00      	nop
}
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd90      	pop	{r4, r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	2000003a 	.word	0x2000003a
 8007d64:	20000038 	.word	0x20000038

08007d68 <ILI9341_Set_Window>:
	ILI9341_SetAddress(x, y, x, y+height-1);
	ILI9341_DrawColorBurst(color, height);
}

static void ILI9341_Set_Window(uint16_t xStart, uint16_t yStart, uint16_t xEnd, uint16_t yEnd)
{
 8007d68:	b590      	push	{r4, r7, lr}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	4604      	mov	r4, r0
 8007d70:	4608      	mov	r0, r1
 8007d72:	4611      	mov	r1, r2
 8007d74:	461a      	mov	r2, r3
 8007d76:	4623      	mov	r3, r4
 8007d78:	80fb      	strh	r3, [r7, #6]
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	80bb      	strh	r3, [r7, #4]
 8007d7e:	460b      	mov	r3, r1
 8007d80:	807b      	strh	r3, [r7, #2]
 8007d82:	4613      	mov	r3, r2
 8007d84:	803b      	strh	r3, [r7, #0]
	ILI9341_WriteCommand(0x2AU);
 8007d86:	202a      	movs	r0, #42	@ 0x2a
 8007d88:	f7ff fc4c 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteData(xStart >> 8);
 8007d8c:	88fb      	ldrh	r3, [r7, #6]
 8007d8e:	0a1b      	lsrs	r3, r3, #8
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	4618      	mov	r0, r3
 8007d96:	f7ff fc5f 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(xStart);
 8007d9a:	88fb      	ldrh	r3, [r7, #6]
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7ff fc5a 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(xEnd >> 8);
 8007da4:	887b      	ldrh	r3, [r7, #2]
 8007da6:	0a1b      	lsrs	r3, r3, #8
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	b2db      	uxtb	r3, r3
 8007dac:	4618      	mov	r0, r3
 8007dae:	f7ff fc53 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(xEnd);
 8007db2:	887b      	ldrh	r3, [r7, #2]
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7ff fc4e 	bl	8007658 <ILI9341_WriteData>

	ILI9341_WriteCommand(0x2BU);
 8007dbc:	202b      	movs	r0, #43	@ 0x2b
 8007dbe:	f7ff fc31 	bl	8007624 <ILI9341_WriteCommand>
	ILI9341_WriteData(yStart >> 8);
 8007dc2:	88bb      	ldrh	r3, [r7, #4]
 8007dc4:	0a1b      	lsrs	r3, r3, #8
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7ff fc44 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(yStart);
 8007dd0:	88bb      	ldrh	r3, [r7, #4]
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7ff fc3f 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(yEnd >> 8);
 8007dda:	883b      	ldrh	r3, [r7, #0]
 8007ddc:	0a1b      	lsrs	r3, r3, #8
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7ff fc38 	bl	8007658 <ILI9341_WriteData>
	ILI9341_WriteData(yEnd);
 8007de8:	883b      	ldrh	r3, [r7, #0]
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7ff fc33 	bl	8007658 <ILI9341_WriteData>

	ILI9341_WriteCommand(0x2CU);
 8007df2:	202c      	movs	r0, #44	@ 0x2c
 8007df4:	f7ff fc16 	bl	8007624 <ILI9341_WriteCommand>

	HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	//data
 8007df8:	2201      	movs	r2, #1
 8007dfa:	2140      	movs	r1, #64	@ 0x40
 8007dfc:	4803      	ldr	r0, [pc, #12]	@ (8007e0c <ILI9341_Set_Window+0xa4>)
 8007dfe:	f7fa fb5c 	bl	80024ba <HAL_GPIO_WritePin>
}
 8007e02:	bf00      	nop
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd90      	pop	{r4, r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	40011000 	.word	0x40011000

08007e10 <ILI9341_Draw_LVGL>:

void ILI9341_Draw_LVGL(uint16_t x, uint16_t y, uint16_t width, uint16_t height, const uint8_t *imageData)
{
 8007e10:	b590      	push	{r4, r7, lr}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	4604      	mov	r4, r0
 8007e18:	4608      	mov	r0, r1
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	4623      	mov	r3, r4
 8007e20:	80fb      	strh	r3, [r7, #6]
 8007e22:	4603      	mov	r3, r0
 8007e24:	80bb      	strh	r3, [r7, #4]
 8007e26:	460b      	mov	r3, r1
 8007e28:	807b      	strh	r3, [r7, #2]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	803b      	strh	r3, [r7, #0]
    uint16_t bytestToWrite;
    ILI9341_Set_Window(x, y, x + width - 1U, y + height - 1U);
 8007e2e:	88fa      	ldrh	r2, [r7, #6]
 8007e30:	887b      	ldrh	r3, [r7, #2]
 8007e32:	4413      	add	r3, r2
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	3b01      	subs	r3, #1
 8007e38:	b29c      	uxth	r4, r3
 8007e3a:	88ba      	ldrh	r2, [r7, #4]
 8007e3c:	883b      	ldrh	r3, [r7, #0]
 8007e3e:	4413      	add	r3, r2
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	3b01      	subs	r3, #1
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	88b9      	ldrh	r1, [r7, #4]
 8007e48:	88f8      	ldrh	r0, [r7, #6]
 8007e4a:	4622      	mov	r2, r4
 8007e4c:	f7ff ff8c 	bl	8007d68 <ILI9341_Set_Window>
    bytestToWrite = width * height * 2U;
 8007e50:	887b      	ldrh	r3, [r7, #2]
 8007e52:	883a      	ldrh	r2, [r7, #0]
 8007e54:	fb02 f303 	mul.w	r3, r2, r3
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	005b      	lsls	r3, r3, #1
 8007e5c:	81fb      	strh	r3, [r7, #14]

    ILI9341_WriteBuffer(imageData, bytestToWrite);
 8007e5e:	89fb      	ldrh	r3, [r7, #14]
 8007e60:	4619      	mov	r1, r3
 8007e62:	6a38      	ldr	r0, [r7, #32]
 8007e64:	f7ff fc12 	bl	800768c <ILI9341_WriteBuffer>
 8007e68:	bf00      	nop
 8007e6a:	3714      	adds	r7, #20
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd90      	pop	{r4, r7, pc}

08007e70 <is_buffer_full>:
//
//*****************************************************************************

static uint8_t is_buffer_full(volatile uint16_t *pui16Read,
             volatile uint16_t *pui16Write, uint16_t ui16Size)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b087      	sub	sp, #28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	80fb      	strh	r3, [r7, #6]
    uint16_t ui16Write;
    uint16_t ui16Read;

    ui16Write = *pui16Write;
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	881b      	ldrh	r3, [r3, #0]
 8007e82:	82fb      	strh	r3, [r7, #22]
    ui16Read = *pui16Read;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	82bb      	strh	r3, [r7, #20]

    //TODO: Sua lai khuc nay
    return((((ui16Write + 1) % ui16Size) == ui16Read) ? 1 : 0);
 8007e8a:	8afb      	ldrh	r3, [r7, #22]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	88fa      	ldrh	r2, [r7, #6]
 8007e90:	fb93 f1f2 	sdiv	r1, r3, r2
 8007e94:	fb01 f202 	mul.w	r2, r1, r2
 8007e98:	1a9a      	subs	r2, r3, r2
 8007e9a:	8abb      	ldrh	r3, [r7, #20]
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	bf0c      	ite	eq
 8007ea0:	2301      	moveq	r3, #1
 8007ea2:	2300      	movne	r3, #0
 8007ea4:	b2db      	uxtb	r3, r3
    //return((ui16Write == (ui16Size - 1)) ? 1 : 0);
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	371c      	adds	r7, #28
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bc80      	pop	{r7}
 8007eae:	4770      	bx	lr

08007eb0 <is_buffer_empty>:
//
//*****************************************************************************

static uint8_t is_buffer_empty(volatile uint16_t *pui16Read,
              volatile uint16_t *pui16Write)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
    uint16_t ui16Write;
    uint16_t ui16Read;

    ui16Write = *pui16Write;
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	881b      	ldrh	r3, [r3, #0]
 8007ebe:	81fb      	strh	r3, [r7, #14]
    ui16Read = *pui16Read;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	881b      	ldrh	r3, [r3, #0]
 8007ec4:	81bb      	strh	r3, [r7, #12]

    return((ui16Write == ui16Read) ? 1 : 0);
 8007ec6:	89fa      	ldrh	r2, [r7, #14]
 8007ec8:	89bb      	ldrh	r3, [r7, #12]
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	bf0c      	ite	eq
 8007ece:	2301      	moveq	r3, #1
 8007ed0:	2300      	movne	r3, #0
 8007ed2:	b2db      	uxtb	r3, r3
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bc80      	pop	{r7}
 8007edc:	4770      	bx	lr
	...

08007ee0 <UART_prime_transmit>:
// them into the UART transmit FIFO.
//
//*****************************************************************************

static void UART_prime_transmit()
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef UART_ret;
    //
    // Do we have any data to transmit?
    //
    if(!TX_BUFFER_EMPTY)
 8007ee6:	4915      	ldr	r1, [pc, #84]	@ (8007f3c <UART_prime_transmit+0x5c>)
 8007ee8:	4815      	ldr	r0, [pc, #84]	@ (8007f40 <UART_prime_transmit+0x60>)
 8007eea:	f7ff ffe1 	bl	8007eb0 <is_buffer_empty>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d11e      	bne.n	8007f32 <UART_prime_transmit+0x52>
        //HAL_UART_Transmit_IT(uartstdio_device.UART_handle, &UART_TX_buffer[UART_TX_read_index], 1);
        //while (!is_finished_sending);
    
        //is_finished_sending = 0;
        //HAL_UART_Transmit_DMA(uartstdio_device.UART_handle, &UART_TX_buffer[UART_TX_read_index], TX_count);
    	UART_ret = HAL_UART_Transmit_IT(uartstdio_device.UART_handle, &UART_TX_buffer[UART_TX_read_index], 1);
 8007ef4:	4b13      	ldr	r3, [pc, #76]	@ (8007f44 <UART_prime_transmit+0x64>)
 8007ef6:	6818      	ldr	r0, [r3, #0]
 8007ef8:	4b13      	ldr	r3, [pc, #76]	@ (8007f48 <UART_prime_transmit+0x68>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4a10      	ldr	r2, [pc, #64]	@ (8007f40 <UART_prime_transmit+0x60>)
 8007efe:	8812      	ldrh	r2, [r2, #0]
 8007f00:	b292      	uxth	r2, r2
 8007f02:	4413      	add	r3, r2
 8007f04:	2201      	movs	r2, #1
 8007f06:	4619      	mov	r1, r3
 8007f08:	f7fb ff4e 	bl	8003da8 <HAL_UART_Transmit_IT>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	71fb      	strb	r3, [r7, #7]
        if(UART_ret == HAL_OK)
 8007f10:	79fb      	ldrb	r3, [r7, #7]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10d      	bne.n	8007f32 <UART_prime_transmit+0x52>
            ADVANCE_TX_BUFFER_INDEX(UART_TX_read_index);
 8007f16:	4b0a      	ldr	r3, [pc, #40]	@ (8007f40 <UART_prime_transmit+0x60>)
 8007f18:	881b      	ldrh	r3, [r3, #0]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	4a09      	ldr	r2, [pc, #36]	@ (8007f44 <UART_prime_transmit+0x64>)
 8007f20:	88d2      	ldrh	r2, [r2, #6]
 8007f22:	fb93 f1f2 	sdiv	r1, r3, r2
 8007f26:	fb01 f202 	mul.w	r2, r1, r2
 8007f2a:	1a9b      	subs	r3, r3, r2
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	4b04      	ldr	r3, [pc, #16]	@ (8007f40 <UART_prime_transmit+0x60>)
 8007f30:	801a      	strh	r2, [r3, #0]
        //
        // Reenable the UART interrupt.
        //
        //NVIC_EnableIRQ(uartstdio_device.uart_irqn);
    }
}
 8007f32:	bf00      	nop
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20004c48 	.word	0x20004c48
 8007f40:	20004c4a 	.word	0x20004c4a
 8007f44:	20004c38 	.word	0x20004c38
 8007f48:	20004c44 	.word	0x20004c44

08007f4c <HAL_UART_TxCpltCallback>:

/*********************
 * INTERRUPT FUNCTION
 *********************/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
    if(huart->Instance == uartstdio_device.UART_handle->Instance)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	4b1c      	ldr	r3, [pc, #112]	@ (8007fcc <HAL_UART_TxCpltCallback+0x80>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d130      	bne.n	8007fc4 <HAL_UART_TxCpltCallback+0x78>
    {
         if (((READ_REG(huart->Instance->SR) & USART_SR_TC) != RESET))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d029      	beq.n	8007fc4 <HAL_UART_TxCpltCallback+0x78>
         {
            if(TX_BUFFER_EMPTY)
 8007f70:	4917      	ldr	r1, [pc, #92]	@ (8007fd0 <HAL_UART_TxCpltCallback+0x84>)
 8007f72:	4818      	ldr	r0, [pc, #96]	@ (8007fd4 <HAL_UART_TxCpltCallback+0x88>)
 8007f74:	f7ff ff9c 	bl	8007eb0 <is_buffer_empty>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d008      	beq.n	8007f90 <HAL_UART_TxCpltCallback+0x44>
            {
                // Buffer empty, so disable interrupts
                __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68da      	ldr	r2, [r3, #12]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f8c:	60da      	str	r2, [r3, #12]
                __HAL_UART_DISABLE_IT(uartstdio_device.UART_handle, UART_IT_TC);
            */
         }
            
    }
}
 8007f8e:	e019      	b.n	8007fc4 <HAL_UART_TxCpltCallback+0x78>
                HAL_UART_Transmit_IT(uartstdio_device.UART_handle, &UART_TX_buffer[UART_TX_read_index], 1);
 8007f90:	4b0e      	ldr	r3, [pc, #56]	@ (8007fcc <HAL_UART_TxCpltCallback+0x80>)
 8007f92:	6818      	ldr	r0, [r3, #0]
 8007f94:	4b10      	ldr	r3, [pc, #64]	@ (8007fd8 <HAL_UART_TxCpltCallback+0x8c>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a0e      	ldr	r2, [pc, #56]	@ (8007fd4 <HAL_UART_TxCpltCallback+0x88>)
 8007f9a:	8812      	ldrh	r2, [r2, #0]
 8007f9c:	b292      	uxth	r2, r2
 8007f9e:	4413      	add	r3, r2
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	f7fb ff00 	bl	8003da8 <HAL_UART_Transmit_IT>
                ADVANCE_TX_BUFFER_INDEX(UART_TX_read_index);
 8007fa8:	4b0a      	ldr	r3, [pc, #40]	@ (8007fd4 <HAL_UART_TxCpltCallback+0x88>)
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	3301      	adds	r3, #1
 8007fb0:	4a06      	ldr	r2, [pc, #24]	@ (8007fcc <HAL_UART_TxCpltCallback+0x80>)
 8007fb2:	88d2      	ldrh	r2, [r2, #6]
 8007fb4:	fb93 f1f2 	sdiv	r1, r3, r2
 8007fb8:	fb01 f202 	mul.w	r2, r1, r2
 8007fbc:	1a9b      	subs	r3, r3, r2
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	4b04      	ldr	r3, [pc, #16]	@ (8007fd4 <HAL_UART_TxCpltCallback+0x88>)
 8007fc2:	801a      	strh	r2, [r3, #0]
}
 8007fc4:	bf00      	nop
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}
 8007fcc:	20004c38 	.word	0x20004c38
 8007fd0:	20004c48 	.word	0x20004c48
 8007fd4:	20004c4a 	.word	0x20004c4a
 8007fd8:	20004c44 	.word	0x20004c44

08007fdc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
	if(huart->Instance == uartstdio_device.UART_handle->Instance)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	4b20      	ldr	r3, [pc, #128]	@ (800806c <HAL_UART_RxCpltCallback+0x90>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d138      	bne.n	8008064 <HAL_UART_RxCpltCallback+0x88>
    {
        if(!RX_BUFFER_FULL)
 8007ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800806c <HAL_UART_RxCpltCallback+0x90>)
 8007ff4:	891b      	ldrh	r3, [r3, #8]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	491d      	ldr	r1, [pc, #116]	@ (8008070 <HAL_UART_RxCpltCallback+0x94>)
 8007ffa:	481e      	ldr	r0, [pc, #120]	@ (8008074 <HAL_UART_RxCpltCallback+0x98>)
 8007ffc:	f7ff ff38 	bl	8007e70 <is_buffer_full>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d127      	bne.n	8008056 <HAL_UART_RxCpltCallback+0x7a>
        {
            if (RX_irq_char != '\n')
 8008006:	4b1c      	ldr	r3, [pc, #112]	@ (8008078 <HAL_UART_RxCpltCallback+0x9c>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b0a      	cmp	r3, #10
 800800e:	d022      	beq.n	8008056 <HAL_UART_RxCpltCallback+0x7a>
            {
                RX_irq_char -= 48;
 8008010:	4b19      	ldr	r3, [pc, #100]	@ (8008078 <HAL_UART_RxCpltCallback+0x9c>)
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	b2db      	uxtb	r3, r3
 8008016:	3b30      	subs	r3, #48	@ 0x30
 8008018:	b2da      	uxtb	r2, r3
 800801a:	4b17      	ldr	r3, [pc, #92]	@ (8008078 <HAL_UART_RxCpltCallback+0x9c>)
 800801c:	701a      	strb	r2, [r3, #0]
                xQueueSendFromISR(queue_UART_RX_data, &RX_irq_char, NULL);
 800801e:	4b17      	ldr	r3, [pc, #92]	@ (800807c <HAL_UART_RxCpltCallback+0xa0>)
 8008020:	6818      	ldr	r0, [r3, #0]
 8008022:	2300      	movs	r3, #0
 8008024:	2200      	movs	r2, #0
 8008026:	4914      	ldr	r1, [pc, #80]	@ (8008078 <HAL_UART_RxCpltCallback+0x9c>)
 8008028:	f7fc fe28 	bl	8004c7c <xQueueGenericSendFromISR>
                BaseType_t higher_task_awoken = pdFALSE;
 800802c:	2300      	movs	r3, #0
 800802e:	60fb      	str	r3, [r7, #12]
                vTaskNotifyGiveFromISR(Task_UART_RX_Handle, &higher_task_awoken);
 8008030:	4b13      	ldr	r3, [pc, #76]	@ (8008080 <HAL_UART_RxCpltCallback+0xa4>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f107 020c 	add.w	r2, r7, #12
 8008038:	2100      	movs	r1, #0
 800803a:	4618      	mov	r0, r3
 800803c:	f7fe f8fc 	bl	8006238 <vTaskGenericNotifyGiveFromISR>
                portYIELD_FROM_ISR(higher_task_awoken);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d007      	beq.n	8008056 <HAL_UART_RxCpltCallback+0x7a>
 8008046:	4b0f      	ldr	r3, [pc, #60]	@ (8008084 <HAL_UART_RxCpltCallback+0xa8>)
 8008048:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	f3bf 8f6f 	isb	sy
                vTaskNotifyGiveFromISR(Task_UART_RX_Handle, &higher_task_awoken);
                portYIELD_FROM_ISR(higher_task_awoken);
            }
            */
        }
        HAL_UART_Receive_IT(uartstdio_device.UART_handle, &RX_irq_char, 1);
 8008056:	4b05      	ldr	r3, [pc, #20]	@ (800806c <HAL_UART_RxCpltCallback+0x90>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2201      	movs	r2, #1
 800805c:	4906      	ldr	r1, [pc, #24]	@ (8008078 <HAL_UART_RxCpltCallback+0x9c>)
 800805e:	4618      	mov	r0, r3
 8008060:	f7fb fed7 	bl	8003e12 <HAL_UART_Receive_IT>
    }
}
 8008064:	bf00      	nop
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	20004c38 	.word	0x20004c38
 8008070:	20004c4c 	.word	0x20004c4c
 8008074:	20004c4e 	.word	0x20004c4e
 8008078:	20004c50 	.word	0x20004c50
 800807c:	200000b4 	.word	0x200000b4
 8008080:	200000cc 	.word	0x200000cc
 8008084:	e000ed04 	.word	0xe000ed04

08008088 <UART_Config>:
 * @param rx_buffer_size The `rx_buffer_size` parameter specifies the size of the receive buffer used
 * for storing incoming data in the UARTConfig function. This buffer will be initialized using the
 * QUEUE_Init function to manage incoming data efficiently.
 */
void UART_Config(UART_HandleTypeDef* p_UART_handle, uint16_t _TX_buffer_size ,uint16_t _RX_buffer_size, uint8_t _disable_echo)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b084      	sub	sp, #16
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	4608      	mov	r0, r1
 8008092:	4611      	mov	r1, r2
 8008094:	461a      	mov	r2, r3
 8008096:	4603      	mov	r3, r0
 8008098:	817b      	strh	r3, [r7, #10]
 800809a:	460b      	mov	r3, r1
 800809c:	813b      	strh	r3, [r7, #8]
 800809e:	4613      	mov	r3, r2
 80080a0:	71fb      	strb	r3, [r7, #7]
    uartstdio_device.UART_handle    = p_UART_handle;
 80080a2:	4a10      	ldr	r2, [pc, #64]	@ (80080e4 <UART_Config+0x5c>)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6013      	str	r3, [r2, #0]
    uartstdio_device.TX_buffer_size = _TX_buffer_size;
 80080a8:	4a0e      	ldr	r2, [pc, #56]	@ (80080e4 <UART_Config+0x5c>)
 80080aa:	897b      	ldrh	r3, [r7, #10]
 80080ac:	80d3      	strh	r3, [r2, #6]
    uartstdio_device.RX_buffer_size = _RX_buffer_size;
 80080ae:	4a0d      	ldr	r2, [pc, #52]	@ (80080e4 <UART_Config+0x5c>)
 80080b0:	893b      	ldrh	r3, [r7, #8]
 80080b2:	8113      	strh	r3, [r2, #8]
    uartstdio_device.disable_echo   = _disable_echo;
 80080b4:	4a0b      	ldr	r2, [pc, #44]	@ (80080e4 <UART_Config+0x5c>)
 80080b6:	79fb      	ldrb	r3, [r7, #7]
 80080b8:	7293      	strb	r3, [r2, #10]

    UART_TX_buffer = (uint8_t *)malloc(UART_TX_BUFFER_SIZE * sizeof(uint8_t));
 80080ba:	4b0a      	ldr	r3, [pc, #40]	@ (80080e4 <UART_Config+0x5c>)
 80080bc:	88db      	ldrh	r3, [r3, #6]
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 fa64 	bl	800858c <malloc>
 80080c4:	4603      	mov	r3, r0
 80080c6:	461a      	mov	r2, r3
 80080c8:	4b07      	ldr	r3, [pc, #28]	@ (80080e8 <UART_Config+0x60>)
 80080ca:	601a      	str	r2, [r3, #0]
    //UART_RX_buffer = (uint8_t *)malloc(UART_RX_BUFFER_SIZE * sizeof(uint8_t));

    HAL_UART_Receive_IT(uartstdio_device.UART_handle, &RX_irq_char, 1);
 80080cc:	4b05      	ldr	r3, [pc, #20]	@ (80080e4 <UART_Config+0x5c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2201      	movs	r2, #1
 80080d2:	4906      	ldr	r1, [pc, #24]	@ (80080ec <UART_Config+0x64>)
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fb fe9c 	bl	8003e12 <HAL_UART_Receive_IT>
    //QUEUE_Init(&rxBuffer, rx_buffer_size);
}
 80080da:	bf00      	nop
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	20004c38 	.word	0x20004c38
 80080e8:	20004c44 	.word	0x20004c44
 80080ec:	20004c50 	.word	0x20004c50

080080f0 <UART_write>:
//!
//! \return Returns the count of characters written.
//
//*****************************************************************************
uint16_t UART_write(const char *pcBuf, uint16_t ui16Len)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	460b      	mov	r3, r1
 80080fa:	807b      	strh	r3, [r7, #2]
    // Check for valid arguments.
    //
    //
    // Send the characters
    //
    for(uIdx = 0; uIdx < ui16Len; uIdx++)
 80080fc:	2300      	movs	r3, #0
 80080fe:	60fb      	str	r3, [r7, #12]
 8008100:	e025      	b.n	800814e <UART_write+0x5e>
        */

        //
        // Send the character to the UART output.
        //
        if(!TX_BUFFER_FULL)
 8008102:	4b23      	ldr	r3, [pc, #140]	@ (8008190 <UART_write+0xa0>)
 8008104:	88db      	ldrh	r3, [r3, #6]
 8008106:	461a      	mov	r2, r3
 8008108:	4922      	ldr	r1, [pc, #136]	@ (8008194 <UART_write+0xa4>)
 800810a:	4823      	ldr	r0, [pc, #140]	@ (8008198 <UART_write+0xa8>)
 800810c:	f7ff feb0 	bl	8007e70 <is_buffer_full>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d120      	bne.n	8008158 <UART_write+0x68>
        {
            UART_TX_buffer[UART_TX_write_index] = pcBuf[uIdx];
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	441a      	add	r2, r3
 800811c:	4b1f      	ldr	r3, [pc, #124]	@ (800819c <UART_write+0xac>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	491c      	ldr	r1, [pc, #112]	@ (8008194 <UART_write+0xa4>)
 8008122:	8809      	ldrh	r1, [r1, #0]
 8008124:	b289      	uxth	r1, r1
 8008126:	440b      	add	r3, r1
 8008128:	7812      	ldrb	r2, [r2, #0]
 800812a:	701a      	strb	r2, [r3, #0]
            ADVANCE_TX_BUFFER_INDEX(UART_TX_write_index);
 800812c:	4b19      	ldr	r3, [pc, #100]	@ (8008194 <UART_write+0xa4>)
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	b29b      	uxth	r3, r3
 8008132:	3301      	adds	r3, #1
 8008134:	4a16      	ldr	r2, [pc, #88]	@ (8008190 <UART_write+0xa0>)
 8008136:	88d2      	ldrh	r2, [r2, #6]
 8008138:	fb93 f1f2 	sdiv	r1, r3, r2
 800813c:	fb01 f202 	mul.w	r2, r1, r2
 8008140:	1a9b      	subs	r3, r3, r2
 8008142:	b29a      	uxth	r2, r3
 8008144:	4b13      	ldr	r3, [pc, #76]	@ (8008194 <UART_write+0xa4>)
 8008146:	801a      	strh	r2, [r3, #0]
    for(uIdx = 0; uIdx < ui16Len; uIdx++)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3301      	adds	r3, #1
 800814c:	60fb      	str	r3, [r7, #12]
 800814e:	887b      	ldrh	r3, [r7, #2]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	429a      	cmp	r2, r3
 8008154:	d3d5      	bcc.n	8008102 <UART_write+0x12>
 8008156:	e000      	b.n	800815a <UART_write+0x6a>
        else
        {
            //
            // Buffer is full - discard remaining characters and return.
            //
            break;
 8008158:	bf00      	nop
            UART_prime_transmit(uIdx+1);
        else
            UART_prime_transmit(uIdx);
    }
    */
    if(__HAL_UART_GET_IT_SOURCE(uartstdio_device.UART_handle, UART_IT_TC) == 0)
 800815a:	4b0d      	ldr	r3, [pc, #52]	@ (8008190 <UART_write+0xa0>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008166:	2b00      	cmp	r3, #0
 8008168:	d109      	bne.n	800817e <UART_write+0x8e>
        __HAL_UART_ENABLE_IT(uartstdio_device.UART_handle, UART_IT_TC);
 800816a:	4b09      	ldr	r3, [pc, #36]	@ (8008190 <UART_write+0xa0>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	4b07      	ldr	r3, [pc, #28]	@ (8008190 <UART_write+0xa0>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800817c:	60da      	str	r2, [r3, #12]
    UART_prime_transmit();
 800817e:	f7ff feaf 	bl	8007ee0 <UART_prime_transmit>

    //
    // Return the number of characters written.
    //
    return(uIdx);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	b29b      	uxth	r3, r3
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	20004c38 	.word	0x20004c38
 8008194:	20004c48 	.word	0x20004c48
 8008198:	20004c4a 	.word	0x20004c4a
 800819c:	20004c44 	.word	0x20004c44

080081a0 <UART_printf>:
//!
//! \return None.
//
//*****************************************************************************
void UART_printf(const char *pc_string, ...)
{
 80081a0:	b40f      	push	{r0, r1, r2, r3}
 80081a2:	b580      	push	{r7, lr}
 80081a4:	b08a      	sub	sp, #40	@ 0x28
 80081a6:	af00      	add	r7, sp, #0
    // Check the arguments.
    //

    va_list vaArgP;

    va_start(vaArgP, pc_string);
 80081a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80081ac:	603b      	str	r3, [r7, #0]

    //
    // Loop while there are more characters in the string.
    //
    while(*pc_string)
 80081ae:	e1d9      	b.n	8008564 <UART_printf+0x3c4>
    {
        //
        // Find the first non-% character, or the end of the string.
        //
        for(ui16Idx = 0;
 80081b0:	2300      	movs	r3, #0
 80081b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80081b4:	e002      	b.n	80081bc <UART_printf+0x1c>
            (pc_string[ui16Idx] != '%') && (pc_string[ui16Idx] != '\0');
            ui16Idx++)
 80081b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80081b8:	3301      	adds	r3, #1
 80081ba:	84fb      	strh	r3, [r7, #38]	@ 0x26
            (pc_string[ui16Idx] != '%') && (pc_string[ui16Idx] != '\0');
 80081bc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80081be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081c0:	4413      	add	r3, r2
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	2b25      	cmp	r3, #37	@ 0x25
 80081c6:	d005      	beq.n	80081d4 <UART_printf+0x34>
 80081c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80081ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081cc:	4413      	add	r3, r2
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1f0      	bne.n	80081b6 <UART_printf+0x16>
        }

        //
        // Write this portion of the string.
        //
        UART_write(pc_string, ui16Idx);
 80081d4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80081d6:	4619      	mov	r1, r3
 80081d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80081da:	f7ff ff89 	bl	80080f0 <UART_write>

        //
        // Skip the portion of the string that was written.
        //
        pc_string += ui16Idx;
 80081de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80081e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081e2:	4413      	add	r3, r2
 80081e4:	633b      	str	r3, [r7, #48]	@ 0x30

        //
        // See if the next character is a %.
        //
        if(*pc_string == '%')
 80081e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	2b25      	cmp	r3, #37	@ 0x25
 80081ec:	f040 81ba 	bne.w	8008564 <UART_printf+0x3c4>
        {
            //
            // Skip the %.
            //
            pc_string++;
 80081f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f2:	3301      	adds	r3, #1
 80081f4:	633b      	str	r3, [r7, #48]	@ 0x30

            //
            // Set the digit count to zero, and the fill character to space
            // (in other words, to the defaults).
            //
            ui16Count = 0;
 80081f6:	2300      	movs	r3, #0
 80081f8:	847b      	strh	r3, [r7, #34]	@ 0x22
            cFill = ' ';
 80081fa:	2320      	movs	r3, #32
 80081fc:	777b      	strb	r3, [r7, #29]
again:

            //
            // Determine how to handle the next character.
            //
            switch(*pc_string++)
 80081fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	633a      	str	r2, [r7, #48]	@ 0x30
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	3b25      	subs	r3, #37	@ 0x25
 8008208:	2b53      	cmp	r3, #83	@ 0x53
 800820a:	f200 81a5 	bhi.w	8008558 <UART_printf+0x3b8>
 800820e:	a201      	add	r2, pc, #4	@ (adr r2, 8008214 <UART_printf+0x74>)
 8008210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008214:	0800854b 	.word	0x0800854b
 8008218:	08008559 	.word	0x08008559
 800821c:	08008559 	.word	0x08008559
 8008220:	08008559 	.word	0x08008559
 8008224:	08008559 	.word	0x08008559
 8008228:	08008559 	.word	0x08008559
 800822c:	08008559 	.word	0x08008559
 8008230:	08008559 	.word	0x08008559
 8008234:	08008559 	.word	0x08008559
 8008238:	08008559 	.word	0x08008559
 800823c:	08008559 	.word	0x08008559
 8008240:	08008365 	.word	0x08008365
 8008244:	08008365 	.word	0x08008365
 8008248:	08008365 	.word	0x08008365
 800824c:	08008365 	.word	0x08008365
 8008250:	08008365 	.word	0x08008365
 8008254:	08008365 	.word	0x08008365
 8008258:	08008365 	.word	0x08008365
 800825c:	08008365 	.word	0x08008365
 8008260:	08008365 	.word	0x08008365
 8008264:	08008365 	.word	0x08008365
 8008268:	08008559 	.word	0x08008559
 800826c:	08008559 	.word	0x08008559
 8008270:	08008559 	.word	0x08008559
 8008274:	08008559 	.word	0x08008559
 8008278:	08008559 	.word	0x08008559
 800827c:	08008559 	.word	0x08008559
 8008280:	08008559 	.word	0x08008559
 8008284:	08008559 	.word	0x08008559
 8008288:	08008559 	.word	0x08008559
 800828c:	08008559 	.word	0x08008559
 8008290:	08008559 	.word	0x08008559
 8008294:	08008559 	.word	0x08008559
 8008298:	08008559 	.word	0x08008559
 800829c:	08008559 	.word	0x08008559
 80082a0:	08008559 	.word	0x08008559
 80082a4:	08008559 	.word	0x08008559
 80082a8:	08008559 	.word	0x08008559
 80082ac:	08008559 	.word	0x08008559
 80082b0:	08008559 	.word	0x08008559
 80082b4:	08008559 	.word	0x08008559
 80082b8:	08008559 	.word	0x08008559
 80082bc:	08008559 	.word	0x08008559
 80082c0:	08008559 	.word	0x08008559
 80082c4:	08008559 	.word	0x08008559
 80082c8:	08008559 	.word	0x08008559
 80082cc:	08008559 	.word	0x08008559
 80082d0:	08008559 	.word	0x08008559
 80082d4:	08008559 	.word	0x08008559
 80082d8:	08008559 	.word	0x08008559
 80082dc:	08008559 	.word	0x08008559
 80082e0:	08008451 	.word	0x08008451
 80082e4:	08008559 	.word	0x08008559
 80082e8:	08008559 	.word	0x08008559
 80082ec:	08008559 	.word	0x08008559
 80082f0:	08008559 	.word	0x08008559
 80082f4:	08008559 	.word	0x08008559
 80082f8:	08008559 	.word	0x08008559
 80082fc:	08008559 	.word	0x08008559
 8008300:	08008559 	.word	0x08008559
 8008304:	08008559 	.word	0x08008559
 8008308:	08008559 	.word	0x08008559
 800830c:	08008399 	.word	0x08008399
 8008310:	080083b3 	.word	0x080083b3
 8008314:	08008559 	.word	0x08008559
 8008318:	08008559 	.word	0x08008559
 800831c:	08008559 	.word	0x08008559
 8008320:	08008559 	.word	0x08008559
 8008324:	080083b3 	.word	0x080083b3
 8008328:	08008559 	.word	0x08008559
 800832c:	08008559 	.word	0x08008559
 8008330:	08008559 	.word	0x08008559
 8008334:	08008559 	.word	0x08008559
 8008338:	08008559 	.word	0x08008559
 800833c:	08008559 	.word	0x08008559
 8008340:	08008451 	.word	0x08008451
 8008344:	08008559 	.word	0x08008559
 8008348:	08008559 	.word	0x08008559
 800834c:	080083e3 	.word	0x080083e3
 8008350:	08008559 	.word	0x08008559
 8008354:	08008437 	.word	0x08008437
 8008358:	08008559 	.word	0x08008559
 800835c:	08008559 	.word	0x08008559
 8008360:	08008451 	.word	0x08008451
                {
                    //
                    // If this is a zero, and it is the first digit, then the
                    // fill character is a zero instead of a space.
                    //
                    if((pc_string[-1] == '0') && (ui16Count == 0))
 8008364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008366:	3b01      	subs	r3, #1
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	2b30      	cmp	r3, #48	@ 0x30
 800836c:	d104      	bne.n	8008378 <UART_printf+0x1d8>
 800836e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008370:	2b00      	cmp	r3, #0
 8008372:	d101      	bne.n	8008378 <UART_printf+0x1d8>
                    {
                        cFill = '0';
 8008374:	2330      	movs	r3, #48	@ 0x30
 8008376:	777b      	strb	r3, [r7, #29]
                    }

                    //
                    // Update the digit count.
                    //
                    ui16Count *= 10;
 8008378:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800837a:	461a      	mov	r2, r3
 800837c:	0092      	lsls	r2, r2, #2
 800837e:	4413      	add	r3, r2
 8008380:	005b      	lsls	r3, r3, #1
 8008382:	847b      	strh	r3, [r7, #34]	@ 0x22
                    ui16Count += pc_string[-1] - '0';
 8008384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008386:	3b01      	subs	r3, #1
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	461a      	mov	r2, r3
 800838c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800838e:	4413      	add	r3, r2
 8008390:	b29b      	uxth	r3, r3
 8008392:	3b30      	subs	r3, #48	@ 0x30
 8008394:	847b      	strh	r3, [r7, #34]	@ 0x22

                    //
                    // Get the next character.
                    //
                    goto again;
 8008396:	e732      	b.n	80081fe <UART_printf+0x5e>
                case 'c':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	1d1a      	adds	r2, r3, #4
 800839c:	603a      	str	r2, [r7, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	82fb      	strh	r3, [r7, #22]

                    //
                    // Print out the character.
                    //
                    UART_write((char *)&ui16Value, 1);
 80083a4:	f107 0316 	add.w	r3, r7, #22
 80083a8:	2101      	movs	r1, #1
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7ff fea0 	bl	80080f0 <UART_write>

                    //
                    // This command has been handled.
                    //
                    break;
 80083b0:	e0d8      	b.n	8008564 <UART_printf+0x3c4>
                case 'i':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	1d1a      	adds	r2, r3, #4
 80083b6:	603a      	str	r2, [r7, #0]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	82fb      	strh	r3, [r7, #22]

                    //
                    // Reset the buffer position.
                    //
                    ui16Pos = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	84bb      	strh	r3, [r7, #36]	@ 0x24

                    //
                    // If the value is negative, make it positive and indicate
                    // that a minus sign is needed.
                    //
                    if((int16_t)ui16Value < 0)
 80083c2:	8afb      	ldrh	r3, [r7, #22]
 80083c4:	b21b      	sxth	r3, r3
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	da06      	bge.n	80083d8 <UART_printf+0x238>
                    {
                        //
                        // Make the value positive.
                        //
                        ui16Value = -(int16_t)ui16Value;
 80083ca:	8afb      	ldrh	r3, [r7, #22]
 80083cc:	425b      	negs	r3, r3
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	82fb      	strh	r3, [r7, #22]

                        //
                        // Indicate that the value is negative.
                        //
                        ui16Neg = 1;
 80083d2:	2301      	movs	r3, #1
 80083d4:	83fb      	strh	r3, [r7, #30]
 80083d6:	e001      	b.n	80083dc <UART_printf+0x23c>
                    {
                        //
                        // Indicate that the value is positive so that a minus
                        // sign isn't inserted.
                        //
                        ui16Neg = 0;
 80083d8:	2300      	movs	r3, #0
 80083da:	83fb      	strh	r3, [r7, #30]
                    }

                    //
                    // Set the base to 10.
                    //
                    ui16Base = 10;
 80083dc:	230a      	movs	r3, #10
 80083de:	843b      	strh	r3, [r7, #32]

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 80083e0:	e042      	b.n	8008468 <UART_printf+0x2c8>
                case 's':
                {
                    //
                    // Get the string pointer from the varargs.
                    //
                    pcStr = va_arg(vaArgP, char *);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	1d1a      	adds	r2, r3, #4
 80083e6:	603a      	str	r2, [r7, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	61bb      	str	r3, [r7, #24]

                    //
                    // Determine the length of the string.
                    //
                    for(ui16Idx = 0; pcStr[ui16Idx] != '\0'; ui16Idx++)
 80083ec:	2300      	movs	r3, #0
 80083ee:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80083f0:	e002      	b.n	80083f8 <UART_printf+0x258>
 80083f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80083f4:	3301      	adds	r3, #1
 80083f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80083f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	4413      	add	r3, r2
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d1f6      	bne.n	80083f2 <UART_printf+0x252>
                    }

                    //
                    // Write the string.
                    //
                    UART_write(pcStr, ui16Idx);
 8008404:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008406:	4619      	mov	r1, r3
 8008408:	69b8      	ldr	r0, [r7, #24]
 800840a:	f7ff fe71 	bl	80080f0 <UART_write>

                    //
                    // Write any required padding spaces
                    //
                    if(ui16Count > ui16Idx)
 800840e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8008410:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008412:	429a      	cmp	r2, r3
 8008414:	f240 80a5 	bls.w	8008562 <UART_printf+0x3c2>
                    {
                        ui16Count -= ui16Idx;
 8008418:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800841a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800841c:	1ad3      	subs	r3, r2, r3
 800841e:	847b      	strh	r3, [r7, #34]	@ 0x22
                        while(ui16Count--)
 8008420:	e003      	b.n	800842a <UART_printf+0x28a>
                        {
                            UART_write(" ", 1);
 8008422:	2101      	movs	r1, #1
 8008424:	4856      	ldr	r0, [pc, #344]	@ (8008580 <UART_printf+0x3e0>)
 8008426:	f7ff fe63 	bl	80080f0 <UART_write>
                        while(ui16Count--)
 800842a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800842c:	1e5a      	subs	r2, r3, #1
 800842e:	847a      	strh	r2, [r7, #34]	@ 0x22
 8008430:	2b00      	cmp	r3, #0
 8008432:	d1f6      	bne.n	8008422 <UART_printf+0x282>
                    }

                    //
                    // This command has been handled.
                    //
                    break;
 8008434:	e095      	b.n	8008562 <UART_printf+0x3c2>
                case 'u':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	1d1a      	adds	r2, r3, #4
 800843a:	603a      	str	r2, [r7, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	b29b      	uxth	r3, r3
 8008440:	82fb      	strh	r3, [r7, #22]

                    //
                    // Reset the buffer position.
                    //
                    ui16Pos = 0;
 8008442:	2300      	movs	r3, #0
 8008444:	84bb      	strh	r3, [r7, #36]	@ 0x24

                    //
                    // Set the base to 10.
                    //
                    ui16Base = 10;
 8008446:	230a      	movs	r3, #10
 8008448:	843b      	strh	r3, [r7, #32]

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui16Neg = 0;
 800844a:	2300      	movs	r3, #0
 800844c:	83fb      	strh	r3, [r7, #30]

                    //
                    // Convert the value to ASCII.
                    //
                    goto convert;
 800844e:	e00b      	b.n	8008468 <UART_printf+0x2c8>
                case 'p':
                {
                    //
                    // Get the value from the varargs.
                    //
                    ui16Value = va_arg(vaArgP, int);
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	1d1a      	adds	r2, r3, #4
 8008454:	603a      	str	r2, [r7, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	b29b      	uxth	r3, r3
 800845a:	82fb      	strh	r3, [r7, #22]

                    //
                    // Reset the buffer position.
                    //
                    ui16Pos = 0;
 800845c:	2300      	movs	r3, #0
 800845e:	84bb      	strh	r3, [r7, #36]	@ 0x24

                    //
                    // Set the base to 16.
                    //
                    ui16Base = 16;
 8008460:	2310      	movs	r3, #16
 8008462:	843b      	strh	r3, [r7, #32]

                    //
                    // Indicate that the value is positive so that a minus sign
                    // isn't inserted.
                    //
                    ui16Neg = 0;
 8008464:	2300      	movs	r3, #0
 8008466:	83fb      	strh	r3, [r7, #30]
                    //
                    // Determine the number of digits in the string version of
                    // the value.
                    //
convert:
                    for(ui16Idx = 1;
 8008468:	2301      	movs	r3, #1
 800846a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800846c:	e007      	b.n	800847e <UART_printf+0x2de>
                        (((ui16Idx * ui16Base) <= ui16Value) &&
                         (((ui16Idx * ui16Base) / ui16Base) == ui16Idx));
                        ui16Idx *= ui16Base, ui16Count--)
 800846e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008470:	8c3a      	ldrh	r2, [r7, #32]
 8008472:	fb02 f303 	mul.w	r3, r2, r3
 8008476:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008478:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800847a:	3b01      	subs	r3, #1
 800847c:	847b      	strh	r3, [r7, #34]	@ 0x22
                        (((ui16Idx * ui16Base) <= ui16Value) &&
 800847e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008480:	8c3a      	ldrh	r2, [r7, #32]
 8008482:	fb02 f303 	mul.w	r3, r2, r3
 8008486:	8afa      	ldrh	r2, [r7, #22]
 8008488:	4293      	cmp	r3, r2
 800848a:	ddf0      	ble.n	800846e <UART_printf+0x2ce>

                    //
                    // If the value is negative, reduce the count of padding
                    // characters needed.
                    //
                    if(ui16Neg)
 800848c:	8bfb      	ldrh	r3, [r7, #30]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d002      	beq.n	8008498 <UART_printf+0x2f8>
                    {
                        ui16Count--;
 8008492:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008494:	3b01      	subs	r3, #1
 8008496:	847b      	strh	r3, [r7, #34]	@ 0x22

                    //
                    // If the value is negative and the value is padded with
                    // zeros, then place the minus sign before the padding.
                    //
                    if(ui16Neg && (cFill == '0'))
 8008498:	8bfb      	ldrh	r3, [r7, #30]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00c      	beq.n	80084b8 <UART_printf+0x318>
 800849e:	7f7b      	ldrb	r3, [r7, #29]
 80084a0:	2b30      	cmp	r3, #48	@ 0x30
 80084a2:	d109      	bne.n	80084b8 <UART_printf+0x318>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui16Pos++] = '-';
 80084a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80084a6:	1c5a      	adds	r2, r3, #1
 80084a8:	84ba      	strh	r2, [r7, #36]	@ 0x24
 80084aa:	3328      	adds	r3, #40	@ 0x28
 80084ac:	443b      	add	r3, r7
 80084ae:	222d      	movs	r2, #45	@ 0x2d
 80084b0:	f803 2c24 	strb.w	r2, [r3, #-36]

                        //
                        // The minus sign has been placed, so turn off the
                        // negative flag.
                        //
                        ui16Neg = 0;
 80084b4:	2300      	movs	r3, #0
 80084b6:	83fb      	strh	r3, [r7, #30]

                    //
                    // Provide additional padding at the beginning of the
                    // string conversion if needed.
                    //
                    if((ui16Count > 1) && (ui16Count < 16))
 80084b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d914      	bls.n	80084e8 <UART_printf+0x348>
 80084be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80084c0:	2b0f      	cmp	r3, #15
 80084c2:	d811      	bhi.n	80084e8 <UART_printf+0x348>
                    {
                        for(ui16Count--; ui16Count; ui16Count--)
 80084c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80084c6:	3b01      	subs	r3, #1
 80084c8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80084ca:	e00a      	b.n	80084e2 <UART_printf+0x342>
                        {
                            pcBuf[ui16Pos++] = cFill;
 80084cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80084ce:	1c5a      	adds	r2, r3, #1
 80084d0:	84ba      	strh	r2, [r7, #36]	@ 0x24
 80084d2:	3328      	adds	r3, #40	@ 0x28
 80084d4:	443b      	add	r3, r7
 80084d6:	7f7a      	ldrb	r2, [r7, #29]
 80084d8:	f803 2c24 	strb.w	r2, [r3, #-36]
                        for(ui16Count--; ui16Count; ui16Count--)
 80084dc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80084de:	3b01      	subs	r3, #1
 80084e0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80084e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1f1      	bne.n	80084cc <UART_printf+0x32c>

                    //
                    // If the value is negative, then place the minus sign
                    // before the number.
                    //
                    if(ui16Neg)
 80084e8:	8bfb      	ldrh	r3, [r7, #30]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d023      	beq.n	8008536 <UART_printf+0x396>
                    {
                        //
                        // Place the minus sign in the output buffer.
                        //
                        pcBuf[ui16Pos++] = '-';
 80084ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80084f0:	1c5a      	adds	r2, r3, #1
 80084f2:	84ba      	strh	r2, [r7, #36]	@ 0x24
 80084f4:	3328      	adds	r3, #40	@ 0x28
 80084f6:	443b      	add	r3, r7
 80084f8:	222d      	movs	r2, #45	@ 0x2d
 80084fa:	f803 2c24 	strb.w	r2, [r3, #-36]
                    }

                    //
                    // Convert the value into a string.
                    //
                    for(; ui16Idx; ui16Idx /= ui16Base)
 80084fe:	e01a      	b.n	8008536 <UART_printf+0x396>
                    {
                        pcBuf[ui16Pos++] =
                            HEX_reference[(ui16Value / ui16Idx) % ui16Base];
 8008500:	4820      	ldr	r0, [pc, #128]	@ (8008584 <UART_printf+0x3e4>)
 8008502:	8afa      	ldrh	r2, [r7, #22]
 8008504:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008506:	fbb2 f3f3 	udiv	r3, r2, r3
 800850a:	b29b      	uxth	r3, r3
 800850c:	461a      	mov	r2, r3
 800850e:	8c3b      	ldrh	r3, [r7, #32]
 8008510:	fb92 f1f3 	sdiv	r1, r2, r3
 8008514:	fb01 f303 	mul.w	r3, r1, r3
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	18c2      	adds	r2, r0, r3
                        pcBuf[ui16Pos++] =
 800851c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800851e:	1c59      	adds	r1, r3, #1
 8008520:	84b9      	strh	r1, [r7, #36]	@ 0x24
                            HEX_reference[(ui16Value / ui16Idx) % ui16Base];
 8008522:	7812      	ldrb	r2, [r2, #0]
                        pcBuf[ui16Pos++] =
 8008524:	3328      	adds	r3, #40	@ 0x28
 8008526:	443b      	add	r3, r7
 8008528:	f803 2c24 	strb.w	r2, [r3, #-36]
                    for(; ui16Idx; ui16Idx /= ui16Base)
 800852c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800852e:	8c3b      	ldrh	r3, [r7, #32]
 8008530:	fbb2 f3f3 	udiv	r3, r2, r3
 8008534:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008536:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008538:	2b00      	cmp	r3, #0
 800853a:	d1e1      	bne.n	8008500 <UART_printf+0x360>
                    }

                    //
                    // Write the string.
                    //
                    UART_write(pcBuf, ui16Pos);
 800853c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800853e:	1d3b      	adds	r3, r7, #4
 8008540:	4611      	mov	r1, r2
 8008542:	4618      	mov	r0, r3
 8008544:	f7ff fdd4 	bl	80080f0 <UART_write>

                    //
                    // This command has been handled.
                    //
                    break;
 8008548:	e00c      	b.n	8008564 <UART_printf+0x3c4>
                case '%':
                {
                    //
                    // Simply write a single %.
                    //
                    UART_write(pc_string - 1, 1);
 800854a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854c:	3b01      	subs	r3, #1
 800854e:	2101      	movs	r1, #1
 8008550:	4618      	mov	r0, r3
 8008552:	f7ff fdcd 	bl	80080f0 <UART_write>

                    //
                    // This command has been handled.
                    //
                    break;
 8008556:	e005      	b.n	8008564 <UART_printf+0x3c4>
                default:
                {
                    //
                    // Indicate an error.
                    //
                    UART_write("ERROR", 5);
 8008558:	2105      	movs	r1, #5
 800855a:	480b      	ldr	r0, [pc, #44]	@ (8008588 <UART_printf+0x3e8>)
 800855c:	f7ff fdc8 	bl	80080f0 <UART_write>

                    //
                    // This command has been handled.
                    //
                    break;
 8008560:	e000      	b.n	8008564 <UART_printf+0x3c4>
                    break;
 8008562:	bf00      	nop
    while(*pc_string)
 8008564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	f47f ae21 	bne.w	80081b0 <UART_printf+0x10>
                }
            }
        }
    }
    va_end(vaArgP);
}
 800856e:	bf00      	nop
 8008570:	bf00      	nop
 8008572:	3728      	adds	r7, #40	@ 0x28
 8008574:	46bd      	mov	sp, r7
 8008576:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800857a:	b004      	add	sp, #16
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	080088c0 	.word	0x080088c0
 8008584:	080088ac 	.word	0x080088ac
 8008588:	080088c4 	.word	0x080088c4

0800858c <malloc>:
 800858c:	4b02      	ldr	r3, [pc, #8]	@ (8008598 <malloc+0xc>)
 800858e:	4601      	mov	r1, r0
 8008590:	6818      	ldr	r0, [r3, #0]
 8008592:	f000 b825 	b.w	80085e0 <_malloc_r>
 8008596:	bf00      	nop
 8008598:	20000040 	.word	0x20000040

0800859c <sbrk_aligned>:
 800859c:	b570      	push	{r4, r5, r6, lr}
 800859e:	4e0f      	ldr	r6, [pc, #60]	@ (80085dc <sbrk_aligned+0x40>)
 80085a0:	460c      	mov	r4, r1
 80085a2:	6831      	ldr	r1, [r6, #0]
 80085a4:	4605      	mov	r5, r0
 80085a6:	b911      	cbnz	r1, 80085ae <sbrk_aligned+0x12>
 80085a8:	f000 f8ae 	bl	8008708 <_sbrk_r>
 80085ac:	6030      	str	r0, [r6, #0]
 80085ae:	4621      	mov	r1, r4
 80085b0:	4628      	mov	r0, r5
 80085b2:	f000 f8a9 	bl	8008708 <_sbrk_r>
 80085b6:	1c43      	adds	r3, r0, #1
 80085b8:	d103      	bne.n	80085c2 <sbrk_aligned+0x26>
 80085ba:	f04f 34ff 	mov.w	r4, #4294967295
 80085be:	4620      	mov	r0, r4
 80085c0:	bd70      	pop	{r4, r5, r6, pc}
 80085c2:	1cc4      	adds	r4, r0, #3
 80085c4:	f024 0403 	bic.w	r4, r4, #3
 80085c8:	42a0      	cmp	r0, r4
 80085ca:	d0f8      	beq.n	80085be <sbrk_aligned+0x22>
 80085cc:	1a21      	subs	r1, r4, r0
 80085ce:	4628      	mov	r0, r5
 80085d0:	f000 f89a 	bl	8008708 <_sbrk_r>
 80085d4:	3001      	adds	r0, #1
 80085d6:	d1f2      	bne.n	80085be <sbrk_aligned+0x22>
 80085d8:	e7ef      	b.n	80085ba <sbrk_aligned+0x1e>
 80085da:	bf00      	nop
 80085dc:	20004c54 	.word	0x20004c54

080085e0 <_malloc_r>:
 80085e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085e4:	1ccd      	adds	r5, r1, #3
 80085e6:	f025 0503 	bic.w	r5, r5, #3
 80085ea:	3508      	adds	r5, #8
 80085ec:	2d0c      	cmp	r5, #12
 80085ee:	bf38      	it	cc
 80085f0:	250c      	movcc	r5, #12
 80085f2:	2d00      	cmp	r5, #0
 80085f4:	4606      	mov	r6, r0
 80085f6:	db01      	blt.n	80085fc <_malloc_r+0x1c>
 80085f8:	42a9      	cmp	r1, r5
 80085fa:	d904      	bls.n	8008606 <_malloc_r+0x26>
 80085fc:	230c      	movs	r3, #12
 80085fe:	6033      	str	r3, [r6, #0]
 8008600:	2000      	movs	r0, #0
 8008602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008606:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80086dc <_malloc_r+0xfc>
 800860a:	f000 f869 	bl	80086e0 <__malloc_lock>
 800860e:	f8d8 3000 	ldr.w	r3, [r8]
 8008612:	461c      	mov	r4, r3
 8008614:	bb44      	cbnz	r4, 8008668 <_malloc_r+0x88>
 8008616:	4629      	mov	r1, r5
 8008618:	4630      	mov	r0, r6
 800861a:	f7ff ffbf 	bl	800859c <sbrk_aligned>
 800861e:	1c43      	adds	r3, r0, #1
 8008620:	4604      	mov	r4, r0
 8008622:	d158      	bne.n	80086d6 <_malloc_r+0xf6>
 8008624:	f8d8 4000 	ldr.w	r4, [r8]
 8008628:	4627      	mov	r7, r4
 800862a:	2f00      	cmp	r7, #0
 800862c:	d143      	bne.n	80086b6 <_malloc_r+0xd6>
 800862e:	2c00      	cmp	r4, #0
 8008630:	d04b      	beq.n	80086ca <_malloc_r+0xea>
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	4639      	mov	r1, r7
 8008636:	4630      	mov	r0, r6
 8008638:	eb04 0903 	add.w	r9, r4, r3
 800863c:	f000 f864 	bl	8008708 <_sbrk_r>
 8008640:	4581      	cmp	r9, r0
 8008642:	d142      	bne.n	80086ca <_malloc_r+0xea>
 8008644:	6821      	ldr	r1, [r4, #0]
 8008646:	4630      	mov	r0, r6
 8008648:	1a6d      	subs	r5, r5, r1
 800864a:	4629      	mov	r1, r5
 800864c:	f7ff ffa6 	bl	800859c <sbrk_aligned>
 8008650:	3001      	adds	r0, #1
 8008652:	d03a      	beq.n	80086ca <_malloc_r+0xea>
 8008654:	6823      	ldr	r3, [r4, #0]
 8008656:	442b      	add	r3, r5
 8008658:	6023      	str	r3, [r4, #0]
 800865a:	f8d8 3000 	ldr.w	r3, [r8]
 800865e:	685a      	ldr	r2, [r3, #4]
 8008660:	bb62      	cbnz	r2, 80086bc <_malloc_r+0xdc>
 8008662:	f8c8 7000 	str.w	r7, [r8]
 8008666:	e00f      	b.n	8008688 <_malloc_r+0xa8>
 8008668:	6822      	ldr	r2, [r4, #0]
 800866a:	1b52      	subs	r2, r2, r5
 800866c:	d420      	bmi.n	80086b0 <_malloc_r+0xd0>
 800866e:	2a0b      	cmp	r2, #11
 8008670:	d917      	bls.n	80086a2 <_malloc_r+0xc2>
 8008672:	1961      	adds	r1, r4, r5
 8008674:	42a3      	cmp	r3, r4
 8008676:	6025      	str	r5, [r4, #0]
 8008678:	bf18      	it	ne
 800867a:	6059      	strne	r1, [r3, #4]
 800867c:	6863      	ldr	r3, [r4, #4]
 800867e:	bf08      	it	eq
 8008680:	f8c8 1000 	streq.w	r1, [r8]
 8008684:	5162      	str	r2, [r4, r5]
 8008686:	604b      	str	r3, [r1, #4]
 8008688:	4630      	mov	r0, r6
 800868a:	f000 f82f 	bl	80086ec <__malloc_unlock>
 800868e:	f104 000b 	add.w	r0, r4, #11
 8008692:	1d23      	adds	r3, r4, #4
 8008694:	f020 0007 	bic.w	r0, r0, #7
 8008698:	1ac2      	subs	r2, r0, r3
 800869a:	bf1c      	itt	ne
 800869c:	1a1b      	subne	r3, r3, r0
 800869e:	50a3      	strne	r3, [r4, r2]
 80086a0:	e7af      	b.n	8008602 <_malloc_r+0x22>
 80086a2:	6862      	ldr	r2, [r4, #4]
 80086a4:	42a3      	cmp	r3, r4
 80086a6:	bf0c      	ite	eq
 80086a8:	f8c8 2000 	streq.w	r2, [r8]
 80086ac:	605a      	strne	r2, [r3, #4]
 80086ae:	e7eb      	b.n	8008688 <_malloc_r+0xa8>
 80086b0:	4623      	mov	r3, r4
 80086b2:	6864      	ldr	r4, [r4, #4]
 80086b4:	e7ae      	b.n	8008614 <_malloc_r+0x34>
 80086b6:	463c      	mov	r4, r7
 80086b8:	687f      	ldr	r7, [r7, #4]
 80086ba:	e7b6      	b.n	800862a <_malloc_r+0x4a>
 80086bc:	461a      	mov	r2, r3
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	42a3      	cmp	r3, r4
 80086c2:	d1fb      	bne.n	80086bc <_malloc_r+0xdc>
 80086c4:	2300      	movs	r3, #0
 80086c6:	6053      	str	r3, [r2, #4]
 80086c8:	e7de      	b.n	8008688 <_malloc_r+0xa8>
 80086ca:	230c      	movs	r3, #12
 80086cc:	4630      	mov	r0, r6
 80086ce:	6033      	str	r3, [r6, #0]
 80086d0:	f000 f80c 	bl	80086ec <__malloc_unlock>
 80086d4:	e794      	b.n	8008600 <_malloc_r+0x20>
 80086d6:	6005      	str	r5, [r0, #0]
 80086d8:	e7d6      	b.n	8008688 <_malloc_r+0xa8>
 80086da:	bf00      	nop
 80086dc:	20004c58 	.word	0x20004c58

080086e0 <__malloc_lock>:
 80086e0:	4801      	ldr	r0, [pc, #4]	@ (80086e8 <__malloc_lock+0x8>)
 80086e2:	f000 b84b 	b.w	800877c <__retarget_lock_acquire_recursive>
 80086e6:	bf00      	nop
 80086e8:	20004d98 	.word	0x20004d98

080086ec <__malloc_unlock>:
 80086ec:	4801      	ldr	r0, [pc, #4]	@ (80086f4 <__malloc_unlock+0x8>)
 80086ee:	f000 b846 	b.w	800877e <__retarget_lock_release_recursive>
 80086f2:	bf00      	nop
 80086f4:	20004d98 	.word	0x20004d98

080086f8 <memset>:
 80086f8:	4603      	mov	r3, r0
 80086fa:	4402      	add	r2, r0
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d100      	bne.n	8008702 <memset+0xa>
 8008700:	4770      	bx	lr
 8008702:	f803 1b01 	strb.w	r1, [r3], #1
 8008706:	e7f9      	b.n	80086fc <memset+0x4>

08008708 <_sbrk_r>:
 8008708:	b538      	push	{r3, r4, r5, lr}
 800870a:	2300      	movs	r3, #0
 800870c:	4d05      	ldr	r5, [pc, #20]	@ (8008724 <_sbrk_r+0x1c>)
 800870e:	4604      	mov	r4, r0
 8008710:	4608      	mov	r0, r1
 8008712:	602b      	str	r3, [r5, #0]
 8008714:	f7f9 fa70 	bl	8001bf8 <_sbrk>
 8008718:	1c43      	adds	r3, r0, #1
 800871a:	d102      	bne.n	8008722 <_sbrk_r+0x1a>
 800871c:	682b      	ldr	r3, [r5, #0]
 800871e:	b103      	cbz	r3, 8008722 <_sbrk_r+0x1a>
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	20004d94 	.word	0x20004d94

08008728 <__errno>:
 8008728:	4b01      	ldr	r3, [pc, #4]	@ (8008730 <__errno+0x8>)
 800872a:	6818      	ldr	r0, [r3, #0]
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	20000040 	.word	0x20000040

08008734 <__libc_init_array>:
 8008734:	b570      	push	{r4, r5, r6, lr}
 8008736:	2600      	movs	r6, #0
 8008738:	4d0c      	ldr	r5, [pc, #48]	@ (800876c <__libc_init_array+0x38>)
 800873a:	4c0d      	ldr	r4, [pc, #52]	@ (8008770 <__libc_init_array+0x3c>)
 800873c:	1b64      	subs	r4, r4, r5
 800873e:	10a4      	asrs	r4, r4, #2
 8008740:	42a6      	cmp	r6, r4
 8008742:	d109      	bne.n	8008758 <__libc_init_array+0x24>
 8008744:	f000 f82a 	bl	800879c <_init>
 8008748:	2600      	movs	r6, #0
 800874a:	4d0a      	ldr	r5, [pc, #40]	@ (8008774 <__libc_init_array+0x40>)
 800874c:	4c0a      	ldr	r4, [pc, #40]	@ (8008778 <__libc_init_array+0x44>)
 800874e:	1b64      	subs	r4, r4, r5
 8008750:	10a4      	asrs	r4, r4, #2
 8008752:	42a6      	cmp	r6, r4
 8008754:	d105      	bne.n	8008762 <__libc_init_array+0x2e>
 8008756:	bd70      	pop	{r4, r5, r6, pc}
 8008758:	f855 3b04 	ldr.w	r3, [r5], #4
 800875c:	4798      	blx	r3
 800875e:	3601      	adds	r6, #1
 8008760:	e7ee      	b.n	8008740 <__libc_init_array+0xc>
 8008762:	f855 3b04 	ldr.w	r3, [r5], #4
 8008766:	4798      	blx	r3
 8008768:	3601      	adds	r6, #1
 800876a:	e7f2      	b.n	8008752 <__libc_init_array+0x1e>
 800876c:	0800e23c 	.word	0x0800e23c
 8008770:	0800e23c 	.word	0x0800e23c
 8008774:	0800e23c 	.word	0x0800e23c
 8008778:	0800e240 	.word	0x0800e240

0800877c <__retarget_lock_acquire_recursive>:
 800877c:	4770      	bx	lr

0800877e <__retarget_lock_release_recursive>:
 800877e:	4770      	bx	lr

08008780 <memcpy>:
 8008780:	440a      	add	r2, r1
 8008782:	4291      	cmp	r1, r2
 8008784:	f100 33ff 	add.w	r3, r0, #4294967295
 8008788:	d100      	bne.n	800878c <memcpy+0xc>
 800878a:	4770      	bx	lr
 800878c:	b510      	push	{r4, lr}
 800878e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008792:	4291      	cmp	r1, r2
 8008794:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008798:	d1f9      	bne.n	800878e <memcpy+0xe>
 800879a:	bd10      	pop	{r4, pc}

0800879c <_init>:
 800879c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879e:	bf00      	nop
 80087a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087a2:	bc08      	pop	{r3}
 80087a4:	469e      	mov	lr, r3
 80087a6:	4770      	bx	lr

080087a8 <_fini>:
 80087a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087aa:	bf00      	nop
 80087ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ae:	bc08      	pop	{r3}
 80087b0:	469e      	mov	lr, r3
 80087b2:	4770      	bx	lr
